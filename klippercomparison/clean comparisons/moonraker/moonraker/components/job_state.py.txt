Differences in moonraker/components/job_state.py:

- Lines with differences: 48 lines in 3 blocks

Detailed Differences:

--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/moonraker/moonraker/components/job_state.py	2022-07-25 05:53:30.902869287 -0400
+++ /home/mks/firmware_comparison/downloads/moonraker/moonraker/components/job_state.py	2024-10-08 17:45:43.665278020 -0400
@@ -15,34 +15,45 @@
     Dict,
     List,
 )
+from ..common import JobEvent, KlippyState
 if TYPE_CHECKING:
-    from confighelper import ConfigHelper
+    from ..confighelper import ConfigHelper
     from .klippy_apis import KlippyAPI
 
 class JobState:
     def __init__(self, config: ConfigHelper) -> None:
         self.server = config.get_server()
         self.last_print_stats: Dict[str, Any] = {}
+        self.last_event: JobEvent = JobEvent.STANDBY
         self.server.register_event_handler(
-            "server:klippy_started", self._handle_started)
+            "server:klippy_started", self._handle_started
+        )
         self.server.register_event_handler(
-            "server:status_update", self._status_update)
+            "server:klippy_disconnect", self._handle_disconnect
+        )
 
-    async def _handle_started(self, state: str) -> None:
-        if state != "ready":
+    def _handle_disconnect(self):
+        state = self.last_print_stats.get("state", "")
+        if state in ("printing", "paused"):
+            # set error state
+            self.last_print_stats["state"] = "error"
+            self.last_event = JobEvent.ERROR
+
+    async def _handle_started(self, state: KlippyState) -> None:
+        if state != KlippyState.READY:
             return
         kapis: KlippyAPI = self.server.lookup_component('klippy_apis')
         sub: Dict[str, Optional[List[str]]] = {"print_stats": None}
         try:
-            result = await kapis.subscribe_objects(sub)
-        except self.server.error as e:
-            logging.info(f"Error subscribing to print_stats")
+            result = await kapis.subscribe_objects(sub, self._status_update)
+        except self.server.error:
+            logging.info("Error subscribing to print_stats")
         self.last_print_stats = result.get("print_stats", {})
         if "state" in self.last_print_stats:
             state = self.last_print_stats["state"]
             logging.info(f"Job state initialized: {state}")
 
-    async def _status_update(self, data: Dict[str, Any]) -> None:
+    async def _status_update(self, data: Dict[str, Any], _: float) -> None:
         if 'print_stats' not in data:
             return
         ps = data['print_stats']
@@ -67,8 +78,24 @@
                     f"Job State Changed - Prev State: {old_state}, "
                     f"New State: {new_state}"
                 )
+                # NOTE: Individual job_state events are DEPRECATED.  New modules
+                # should register handlers for "job_state: status_changed" and
+                # match against the JobEvent object provided.
+                self.server.send_event(f"job_state:{new_state}", prev_ps, new_ps)
+                self.last_event = JobEvent.from_string(new_state)
                 self.server.send_event(
-                    f"job_state:{new_state}", prev_ps, new_ps)
+                    "job_state:state_changed",
+                    self.last_event,
+                    prev_ps,
+                    new_ps
+                )
+        if "info" in ps:
+            cur_layer: Optional[int] = ps["info"].get("current_layer")
+            if cur_layer is not None:
+                total: int = ps["info"].get("total_layer", 0)
+                self.server.send_event(
+                    "job_state:layer_changed", cur_layer, total
+                )
         self.last_print_stats.update(ps)
 
     def _check_resumed(self,
@@ -84,5 +111,8 @@
     def get_last_stats(self) -> Dict[str, Any]:
         return dict(self.last_print_stats)
 
+    def get_last_job_event(self) -> JobEvent:
+        return self.last_event
+
 def load_component(config: ConfigHelper) -> JobState:
     return JobState(config)
