diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/default.kiauh.cfg /home/mks/firmware_comparison/downloads/kiauh/default.kiauh.cfg
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/default.kiauh.cfg	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/default.kiauh.cfg	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,18 @@
+[kiauh]
+backup_before_update: False
+
+[klipper]
+repo_url: https://github.com/Klipper3d/klipper
+branch: master
+
+[moonraker]
+repo_url: https://github.com/Arksine/moonraker
+branch: master
+
+[mainsail]
+port: 80
+unstable_releases: False
+
+[fluidd]
+port: 81
+unstable_releases: False
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/docs/changelog.md /home/mks/firmware_comparison/downloads/kiauh/docs/changelog.md
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/docs/changelog.md	2023-12-15 01:08:34.837257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/docs/changelog.md	2024-10-08 17:45:33.575241837 -0400
@@ -2,13 +2,54 @@
 
 This document covers possible important changes to KIAUH.
 
+### 2024-08-31 (v6.0.0-alpha.1)
+Long time no see, but here we are again!
+A lot has happened in the background, but now it is time to take it out into the wild.
+
+#### KIAUH has now reached version 6! Well, at least in an alpha state...
+
+The project has seen a complete rewrite of the script from scratch in Python.
+It requires Python 3.8 or newer to run. Because this update is still in an alpha state, bugs may or will occur.
+During startup, you will be asked if you want to start the new version 6 or the old version 5.
+As long as version 6 is in a pre-release state, version 5 will still be available. If there are any critical issues
+with the new version that were overlooked, you can always switch back to the old version.
+
+In case you selected not to get asked about which version to start (option 3 or 4 in the startup dialog) and you want to
+revert that decision, you will find a line called `version_to_launch=` within the `.kiauh.ini` file in your home directory.
+Just delete that line, save the file and restart KIAUH. KIAUH will then ask you again which version you want to start.
+
+Here is a list of the most important changes to KIAUH in regard to version 6:
+- The majority of features available in KIAUH v5 are still available; they just got migrated from Bash to Python.
+- It is now possible to add new/remove instances to/from existing multi-instance installations of Klipper and Moonraker
+- KIAUH now has an Extension-System. This allows contributors to add new installers to KIAUH without having to modify the main script.
+    - You will now find some of the features that were previously available in the Installer-Menu in the Extensions-Menu.
+    - The current extensions are:
+        - G-Code Shell Command (previously found in the Advanced-Menu)
+        - Mainsail Theme Installer (previously found in the Advanced-Menu)
+        - Klipper-Backup (new in v6!)
+        - Moonraker Telegram Bot (previously found in the Installer-Menu)
+        - PrettyGCode for Klipper (previously found in the Installer-Menu)
+        - Obico for Klipper (previously found in the Installer-Menu)
+    - The following additional extensions are planned, but not yet available:
+        - Spoolman (available in v5 in the Installer-Menu)
+        - OctoApp (available in v5 in the Installer-Menu)
+- KIAUH has its own config file now
+    - The file has some default values for the currently supported options
+    - There might be more options in the future
+    - It is located in KIAUH's root directory and is called `default.kiauh.cfg`
+        - DO NOT EDIT the default file directly, instead make a copy of it and call it `kiauh.cfg`
+        - Settings changed via the Advanced-Menu will be written to the `kiauh.cfg`
+- Support for OctoPrint was removed
+
+Feel free to give version 6 a try and report any bugs or issues you encounter! Every feedback is appreciated.
+
 ### 2023-06-17
-KIAUH has now added support for installing Mobileraker's companion! 
+KIAUH has now added support for installing Mobileraker's companion!
 Mobileraker is a free and Open Source Android and iOS App for Klipper, utilizing the Moonraker API, allowing you
 to control your printer. Thank you to [Clon1998](https://github.com/Clon1998) for adding this feature!
 
 ### 2023-02-03
-The installer for MJPG-Streamer got replaced by crowsnest. It is an improved webcam service, utilizing ustreamer. 
+The installer for MJPG-Streamer got replaced by crowsnest. It is an improved webcam service, utilizing ustreamer.
 Please have a look here for additional info about crowsnest and how to configure it: https://github.com/mainsail-crew/crowsnest \
 It's unsure if the previous MJPG-Streamer installer will be updated and make its way back into KIAUH.
 A big thanks to [KwadFan](https://github.com/KwadFan) for writing the crowsnest implementation.
@@ -115,7 +156,7 @@
 Other issues could occur when trying to flash an MCU on Debian or Ubuntu distributions where a user might not be part
 of the dialout group by default. A check for the tty group is also done. The tty group is needed for setting
 up a linux MCU (currently not yet supported by KIAUH).
-* There is an issue when trying to install Mainsail or Fluidd on Ubuntu 21.10. Permissions on that distro seem to have seen a rework 
+* There is an issue when trying to install Mainsail or Fluidd on Ubuntu 21.10. Permissions on that distro seem to have seen a rework
  in comparison to 20.04 and users will be greeted with an "Error 403 - Permission denied" message after installing one of Klippers webinterfaces.
 I still have to figure out a viable solution for that.
 
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.editorconfig /home/mks/firmware_comparison/downloads/kiauh/.editorconfig
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.editorconfig	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.editorconfig	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,15 @@
+root = true
+
+[*]
+indent_style = space
+indent_size = 4
+insert_final_newline = true
+trim_trailing_whitespace = true
+charset = utf-8
+end_of_line = lf
+
+[*.py]
+max_line_length = 88
+
+[*.sh]
+indent_size = 2
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/FETCH_HEAD /home/mks/firmware_comparison/downloads/kiauh/.git/FETCH_HEAD
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/FETCH_HEAD	2023-12-15 01:50:05.426398116 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/FETCH_HEAD	1969-12-31 19:00:00.000000000 -0500
@@ -1,6 +0,0 @@
-7a9e752f9ca3297fbca311d5fbb1d95da3093cac		branch 'master' of https://github.com/th33xitus/kiauh
-646e5acd3abc478863d21ecb82d5ccebb2f704c0	not-for-merge	branch 'develop' of https://github.com/th33xitus/kiauh
-e121ba8a629768bace1c7bf9c35472a69eb704bb	not-for-merge	branch 'kiauh-v6-dev' of https://github.com/th33xitus/kiauh
-18e85235c189b7b4a60a4c03afdbf7e7cd4c255c	not-for-merge	branch 'v2' of https://github.com/th33xitus/kiauh
-4bf9e8f0a8c3b0939b3ee8337530aafcc08cd3b1	not-for-merge	branch 'v3' of https://github.com/th33xitus/kiauh
-442980dbd03c141a5286150d2c6ce102b84c1728	not-for-merge	branch 'v4' of https://github.com/th33xitus/kiauh
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/hooks/fsmonitor-watchman.sample /home/mks/firmware_comparison/downloads/kiauh/.git/hooks/fsmonitor-watchman.sample
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/hooks/fsmonitor-watchman.sample	2022-07-25 05:41:31.986172929 -0400
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/hooks/fsmonitor-watchman.sample	2024-10-08 17:45:32.785238975 -0400
@@ -8,107 +8,166 @@
 # (https://facebook.github.io/watchman/) with git to speed up detecting
 # new and modified files.
 #
-# The hook is passed a version (currently 1) and a time in nanoseconds
-# formatted as a string and outputs to stdout all files that have been
-# modified since the given time. Paths must be relative to the root of
-# the working tree and separated by a single NUL.
+# The hook is passed a version (currently 2) and last update token
+# formatted as a string and outputs to stdout a new update token and
+# all files that have been modified since the update token. Paths must
+# be relative to the root of the working tree and separated by a single NUL.
 #
 # To enable this hook, rename this file to "query-watchman" and set
 # 'git config core.fsmonitor .git/hooks/query-watchman'
 #
-my ($version, $time) = @ARGV;
+my ($version, $last_update_token) = @ARGV;
 
-# Check the hook interface version
+# Uncomment for debugging
+# print STDERR "$0 $version $last_update_token\n";
 
-if ($version == 1) {
-	# convert nanoseconds to seconds
-	$time = int $time / 1000000000;
-} else {
+# Check the hook interface version
+if ($version ne 2) {
 	die "Unsupported query-fsmonitor hook version '$version'.\n" .
 	    "Falling back to scanning...\n";
 }
 
-my $git_work_tree;
-if ($^O =~ 'msys' || $^O =~ 'cygwin') {
-	$git_work_tree = Win32::GetCwd();
-	$git_work_tree =~ tr/\\/\//;
-} else {
-	require Cwd;
-	$git_work_tree = Cwd::cwd();
-}
+my $git_work_tree = get_working_dir();
 
 my $retry = 1;
 
+my $json_pkg;
+eval {
+	require JSON::XS;
+	$json_pkg = "JSON::XS";
+	1;
+} or do {
+	require JSON::PP;
+	$json_pkg = "JSON::PP";
+};
+
 launch_watchman();
 
 sub launch_watchman {
+	my $o = watchman_query();
+	if (is_work_tree_watched($o)) {
+		output_result($o->{clock}, @{$o->{files}});
+	}
+}
+
+sub output_result {
+	my ($clockid, @files) = @_;
+
+	# Uncomment for debugging watchman output
+	# open (my $fh, ">", ".git/watchman-output.out");
+	# binmode $fh, ":utf8";
+	# print $fh "$clockid\n@files\n";
+	# close $fh;
 
+	binmode STDOUT, ":utf8";
+	print $clockid;
+	print "\0";
+	local $, = "\0";
+	print @files;
+}
+
+sub watchman_clock {
+	my $response = qx/watchman clock "$git_work_tree"/;
+	die "Failed to get clock id on '$git_work_tree'.\n" .
+		"Falling back to scanning...\n" if $? != 0;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub watchman_query {
 	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
-	    or die "open2() failed: $!\n" .
-	    "Falling back to scanning...\n";
+	or die "open2() failed: $!\n" .
+	"Falling back to scanning...\n";
 
 	# In the query expression below we're asking for names of files that
-	# changed since $time but were not transient (ie created after
-	# $time but no longer exist).
+	# changed since $last_update_token but not from the .git folder.
 	#
 	# To accomplish this, we're using the "since" generator to use the
 	# recency index to select candidate nodes and "fields" to limit the
 	# output to file names only. Then we're using the "expression" term to
 	# further constrain the results.
-	#
-	# The category of transient files that we want to ignore will have a
-	# creation clock (cclock) newer than $time_t value and will also not
-	# currently exist.
-
+	if (substr($last_update_token, 0, 1) eq "c") {
+		$last_update_token = "\"$last_update_token\"";
+	}
 	my $query = <<"	END";
 		["query", "$git_work_tree", {
-			"since": $time,
+			"since": $last_update_token,
 			"fields": ["name"],
-			"expression": ["not", ["allof", ["since", $time, "cclock"], ["not", "exists"]]]
+			"expression": ["not", ["dirname", ".git"]]
 		}]
 	END
 
+	# Uncomment for debugging the watchman query
+	# open (my $fh, ">", ".git/watchman-query.json");
+	# print $fh $query;
+	# close $fh;
+
 	print CHLD_IN $query;
 	close CHLD_IN;
 	my $response = do {local $/; <CHLD_OUT>};
 
+	# Uncomment for debugging the watch response
+	# open ($fh, ">", ".git/watchman-response.json");
+	# print $fh $response;
+	# close $fh;
+
 	die "Watchman: command returned no output.\n" .
-	    "Falling back to scanning...\n" if $response eq "";
+	"Falling back to scanning...\n" if $response eq "";
 	die "Watchman: command returned invalid output: $response\n" .
-	    "Falling back to scanning...\n" unless $response =~ /^\{/;
-
-	my $json_pkg;
-	eval {
-		require JSON::XS;
-		$json_pkg = "JSON::XS";
-		1;
-	} or do {
-		require JSON::PP;
-		$json_pkg = "JSON::PP";
-	};
+	"Falling back to scanning...\n" unless $response =~ /^\{/;
 
-	my $o = $json_pkg->new->utf8->decode($response);
+	return $json_pkg->new->utf8->decode($response);
+}
 
-	if ($retry > 0 and $o->{error} and $o->{error} =~ m/unable to resolve root .* directory (.*) is not watched/) {
-		print STDERR "Adding '$git_work_tree' to watchman's watch list.\n";
+sub is_work_tree_watched {
+	my ($output) = @_;
+	my $error = $output->{error};
+	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
 		$retry--;
-		qx/watchman watch "$git_work_tree"/;
+		my $response = qx/watchman watch "$git_work_tree"/;
 		die "Failed to make watchman watch '$git_work_tree'.\n" .
 		    "Falling back to scanning...\n" if $? != 0;
+		$output = $json_pkg->new->utf8->decode($response);
+		$error = $output->{error};
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		# Uncomment for debugging watchman output
+		# open (my $fh, ">", ".git/watchman-output.out");
+		# close $fh;
 
 		# Watchman will always return all files on the first query so
 		# return the fast "everything is dirty" flag to git and do the
 		# Watchman query just to get it over with now so we won't pay
 		# the cost in git to look up each individual file.
-		print "/\0";
+		my $o = watchman_clock();
+		$error = $output->{error};
+
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		output_result($o->{clock}, ("/"));
+		$last_update_token = $o->{clock};
+
 		eval { launch_watchman() };
-		exit 0;
+		return 0;
 	}
 
-	die "Watchman: $o->{error}.\n" .
-	    "Falling back to scanning...\n" if $o->{error};
+	die "Watchman: $error.\n" .
+	"Falling back to scanning...\n" if $error;
 
-	binmode STDOUT, ":utf8";
-	local $, = "\0";
-	print @{$o->{files}};
+	return 1;
+}
+
+sub get_working_dir {
+	my $working_dir;
+	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+		$working_dir = Win32::GetCwd();
+		$working_dir =~ tr/\\/\//;
+	} else {
+		require Cwd;
+		$working_dir = Cwd::cwd();
+	}
+
+	return $working_dir;
 }
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/hooks/pre-commit.sample /home/mks/firmware_comparison/downloads/kiauh/.git/hooks/pre-commit.sample
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/hooks/pre-commit.sample	2022-07-25 05:41:31.978172799 -0400
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/hooks/pre-commit.sample	2024-10-08 17:45:32.785238975 -0400
@@ -16,7 +16,7 @@
 fi
 
 # If you want to allow non-ASCII filenames set this variable to true.
-allownonascii=$(git config --bool hooks.allownonascii)
+allownonascii=$(git config --type=bool hooks.allownonascii)
 
 # Redirect output to stderr.
 exec 1>&2
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/hooks/pre-merge-commit.sample /home/mks/firmware_comparison/downloads/kiauh/.git/hooks/pre-merge-commit.sample
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/hooks/pre-merge-commit.sample	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/hooks/pre-merge-commit.sample	2024-10-08 17:45:32.785238975 -0400
@@ -0,0 +1,13 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/hooks/pre-push.sample /home/mks/firmware_comparison/downloads/kiauh/.git/hooks/pre-push.sample
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/hooks/pre-push.sample	2022-07-25 05:41:31.978172799 -0400
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/hooks/pre-push.sample	2024-10-08 17:45:32.785238975 -0400
@@ -14,7 +14,7 @@
 # Information about the commits which are being pushed is supplied as lines to
 # the standard input in the form:
 #
-#   <local ref> <local sha1> <remote ref> <remote sha1>
+#   <local ref> <local oid> <remote ref> <remote oid>
 #
 # This sample shows how to prevent push of commits where the log message starts
 # with "WIP" (work in progress).
@@ -22,27 +22,27 @@
 remote="$1"
 url="$2"
 
-z40=0000000000000000000000000000000000000000
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
 
-while read local_ref local_sha remote_ref remote_sha
+while read local_ref local_oid remote_ref remote_oid
 do
-	if [ "$local_sha" = $z40 ]
+	if test "$local_oid" = "$zero"
 	then
 		# Handle delete
 		:
 	else
-		if [ "$remote_sha" = $z40 ]
+		if test "$remote_oid" = "$zero"
 		then
 			# New branch, examine all commits
-			range="$local_sha"
+			range="$local_oid"
 		else
 			# Update to existing branch, examine new commits
-			range="$remote_sha..$local_sha"
+			range="$remote_oid..$local_oid"
 		fi
 
 		# Check for WIP commit
-		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
-		if [ -n "$commit" ]
+		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
+		if test -n "$commit"
 		then
 			echo >&2 "Found WIP commit in $local_ref, not pushing"
 			exit 1
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/hooks/push-to-checkout.sample /home/mks/firmware_comparison/downloads/kiauh/.git/hooks/push-to-checkout.sample
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/hooks/push-to-checkout.sample	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/hooks/push-to-checkout.sample	2024-10-08 17:45:32.785238975 -0400
@@ -0,0 +1,78 @@
+#!/bin/sh
+
+# An example hook script to update a checked-out tree on a git push.
+#
+# This hook is invoked by git-receive-pack(1) when it reacts to git
+# push and updates reference(s) in its repository, and when the push
+# tries to update the branch that is currently checked out and the
+# receive.denyCurrentBranch configuration variable is set to
+# updateInstead.
+#
+# By default, such a push is refused if the working tree and the index
+# of the remote repository has any difference from the currently
+# checked out commit; when both the working tree and the index match
+# the current commit, they are updated to match the newly pushed tip
+# of the branch. This hook is to be used to override the default
+# behaviour; however the code below reimplements the default behaviour
+# as a starting point for convenient modification.
+#
+# The hook receives the commit with which the tip of the current
+# branch is going to be updated:
+commit=$1
+
+# It can exit with a non-zero status to refuse the push (when it does
+# so, it must not modify the index or the working tree).
+die () {
+	echo >&2 "$*"
+	exit 1
+}
+
+# Or it can make any necessary changes to the working tree and to the
+# index to bring them to the desired state when the tip of the current
+# branch is updated to the new commit, and exit with a zero status.
+#
+# For example, the hook can simply run git read-tree -u -m HEAD "$1"
+# in order to emulate git fetch that is run in the reverse direction
+# with git push, as the two-tree form of git read-tree -u -m is
+# essentially the same as git switch or git checkout that switches
+# branches while keeping the local changes in the working tree that do
+# not interfere with the difference between the branches.
+
+# The below is a more-or-less exact translation to shell of the C code
+# for the default behaviour for git's push-to-checkout hook defined in
+# the push_to_deploy() function in builtin/receive-pack.c.
+#
+# Note that the hook will be executed from the repository directory,
+# not from the working tree, so if you want to perform operations on
+# the working tree, you will have to adapt your code accordingly, e.g.
+# by adding "cd .." or using relative paths.
+
+if ! git update-index -q --ignore-submodules --refresh
+then
+	die "Up-to-date check failed"
+fi
+
+if ! git diff-files --quiet --ignore-submodules --
+then
+	die "Working directory has unstaged changes"
+fi
+
+# This is a rough translation of:
+#
+#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
+if git cat-file -e HEAD 2>/dev/null
+then
+	head=HEAD
+else
+	head=$(git hash-object -t tree --stdin </dev/null)
+fi
+
+if ! git diff-index --quiet --cached --ignore-submodules $head --
+then
+	die "Working directory has staged changes"
+fi
+
+if ! git read-tree -u -m "$commit"
+then
+	die "Could not update working tree to new HEAD"
+fi
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/hooks/update.sample /home/mks/firmware_comparison/downloads/kiauh/.git/hooks/update.sample
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/hooks/update.sample	2022-07-25 05:41:31.982172864 -0400
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/hooks/update.sample	2024-10-08 17:45:32.785238975 -0400
@@ -43,11 +43,11 @@
 fi
 
 # --- Config
-allowunannotated=$(git config --bool hooks.allowunannotated)
-allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
-denycreatebranch=$(git config --bool hooks.denycreatebranch)
-allowdeletetag=$(git config --bool hooks.allowdeletetag)
-allowmodifytag=$(git config --bool hooks.allowmodifytag)
+allowunannotated=$(git config --type=bool hooks.allowunannotated)
+allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
+allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
+allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
 
 # check for no description
 projectdesc=$(sed -e '1q' "$GIT_DIR/description")
@@ -60,7 +60,7 @@
 
 # --- Check types
 # if $newrev is 0000...0000, it's a commit to delete a ref.
-zero="0000000000000000000000000000000000000000"
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
 if [ "$newrev" = "$zero" ]; then
 	newrev_type=delete
 else
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/index and /home/mks/firmware_comparison/downloads/kiauh/.git/index differ
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/HEAD /home/mks/firmware_comparison/downloads/kiauh/.git/logs/HEAD
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/HEAD	2023-12-15 01:08:34.873257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/logs/HEAD	2024-10-08 17:45:33.575241837 -0400
@@ -1,4 +1 @@
-0000000000000000000000000000000000000000 1d7fb010af75c4d1cbea7e37893a06a6401a9b80 Mks <mks@mkspi.(none)> 1658742096 -0700	clone: from https://github.com/th33xitus/kiauh.git
-1d7fb010af75c4d1cbea7e37893a06a6401a9b80 1d7fb010af75c4d1cbea7e37893a06a6401a9b80 Mks <mks@mkspi.(none)> 1691836328 +0800	reset: moving to HEAD
-1d7fb010af75c4d1cbea7e37893a06a6401a9b80 1d7fb010af75c4d1cbea7e37893a06a6401a9b80 Mks <mks@mkspi.(none)> 1702620511 +0800	reset: moving to HEAD
-1d7fb010af75c4d1cbea7e37893a06a6401a9b80 7a9e752f9ca3297fbca311d5fbb1d95da3093cac Mks <mks@mkspi.(none)> 1702620514 +0800	pull: Fast-forward
+0000000000000000000000000000000000000000 dc026a7a2ba57fa6c29bcd05ceb2ba7c71e02cf9 mks <mks@arm2.myguest.virtualbox.org> 1728423933 -0400	clone: from https://github.com/th33xitus/kiauh.git
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/refs/heads/master /home/mks/firmware_comparison/downloads/kiauh/.git/logs/refs/heads/master
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/refs/heads/master	2023-12-15 01:08:34.873257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/logs/refs/heads/master	2024-10-08 17:45:33.575241837 -0400
@@ -1,2 +1 @@
-0000000000000000000000000000000000000000 1d7fb010af75c4d1cbea7e37893a06a6401a9b80 Mks <mks@mkspi.(none)> 1658742096 -0700	clone: from https://github.com/th33xitus/kiauh.git
-1d7fb010af75c4d1cbea7e37893a06a6401a9b80 7a9e752f9ca3297fbca311d5fbb1d95da3093cac Mks <mks@mkspi.(none)> 1702620514 +0800	pull: Fast-forward
+0000000000000000000000000000000000000000 dc026a7a2ba57fa6c29bcd05ceb2ba7c71e02cf9 mks <mks@arm2.myguest.virtualbox.org> 1728423933 -0400	clone: from https://github.com/th33xitus/kiauh.git
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/refs/remotes/origin/HEAD /home/mks/firmware_comparison/downloads/kiauh/.git/logs/refs/remotes/origin/HEAD
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/refs/remotes/origin/HEAD	2022-07-25 05:41:36.722249943 -0400
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/logs/refs/remotes/origin/HEAD	2024-10-08 17:45:33.574241834 -0400
@@ -1 +1 @@
-0000000000000000000000000000000000000000 1d7fb010af75c4d1cbea7e37893a06a6401a9b80 Mks <mks@mkspi.(none)> 1658742096 -0700	clone: from https://github.com/th33xitus/kiauh.git
+0000000000000000000000000000000000000000 dc026a7a2ba57fa6c29bcd05ceb2ba7c71e02cf9 mks <mks@arm2.myguest.virtualbox.org> 1728423933 -0400	clone: from https://github.com/th33xitus/kiauh.git
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/refs/remotes/origin/improve-readme /home/mks/firmware_comparison/downloads/kiauh/.git/logs/refs/remotes/origin/improve-readme
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/refs/remotes/origin/improve-readme	2023-03-10 17:05:20.488011337 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/logs/refs/remotes/origin/improve-readme	1969-12-31 19:00:00.000000000 -0500
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 9f2fe7621078439da67be55cf7097fd27fa7aaef solawc <1225093964@qq.com> 1678485920 -0800	fetch -q: storing head
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/refs/remotes/origin/kiauh-v6-dev /home/mks/firmware_comparison/downloads/kiauh/.git/logs/refs/remotes/origin/kiauh-v6-dev
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/refs/remotes/origin/kiauh-v6-dev	2023-12-15 01:07:51.469257028 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/logs/refs/remotes/origin/kiauh-v6-dev	1969-12-31 19:00:00.000000000 -0500
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 e121ba8a629768bace1c7bf9c35472a69eb704bb Mks <mks@mkspi.(none)> 1702620471 +0800	fetch -q: storing head
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/refs/remotes/origin/master /home/mks/firmware_comparison/downloads/kiauh/.git/logs/refs/remotes/origin/master
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/refs/remotes/origin/master	2023-12-15 01:07:51.465257028 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/logs/refs/remotes/origin/master	1969-12-31 19:00:00.000000000 -0500
@@ -1,4 +0,0 @@
-1d7fb010af75c4d1cbea7e37893a06a6401a9b80 7989cec8d4e99cc31cac5e24753c8690f16bcde8 solawc <1225093964@qq.com> 1678485920 -0800	fetch -q: fast-forward
-7989cec8d4e99cc31cac5e24753c8690f16bcde8 65854c8da633a927e6f29a2c05d8263deb2df488 Mks <mks@mkspi.(none)> 1691460553 +0800	fetch -q: fast-forward
-65854c8da633a927e6f29a2c05d8263deb2df488 899b204dc746b16055d00faa633cbf4a8b8a3bf3 Mks <mks@mkspi.(none)> 1697787556 +0800	fetch -q: fast-forward
-899b204dc746b16055d00faa633cbf4a8b8a3bf3 7a9e752f9ca3297fbca311d5fbb1d95da3093cac Mks <mks@mkspi.(none)> 1702620471 +0800	fetch -q: fast-forward
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/refs/remotes/origin/v4 /home/mks/firmware_comparison/downloads/kiauh/.git/logs/refs/remotes/origin/v4
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/logs/refs/remotes/origin/v4	2023-03-10 17:05:20.488011337 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/logs/refs/remotes/origin/v4	1969-12-31 19:00:00.000000000 -0500
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 442980dbd03c141a5286150d2c6ce102b84c1728 solawc <1225093964@qq.com> 1678485920 -0800	fetch -q: storing head
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/objects/pack/pack-0adfcbcb5658382faa4a5653e921a37c1867847c.idx and /home/mks/firmware_comparison/downloads/kiauh/.git/objects/pack/pack-0adfcbcb5658382faa4a5653e921a37c1867847c.idx differ
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/objects/pack/pack-0adfcbcb5658382faa4a5653e921a37c1867847c.pack and /home/mks/firmware_comparison/downloads/kiauh/.git/objects/pack/pack-0adfcbcb5658382faa4a5653e921a37c1867847c.pack differ
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/objects/pack/pack-10fca5f1cf01252367df1fca579c26987f91988e.idx and /home/mks/firmware_comparison/downloads/kiauh/.git/objects/pack/pack-10fca5f1cf01252367df1fca579c26987f91988e.idx differ
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/objects/pack/pack-10fca5f1cf01252367df1fca579c26987f91988e.pack and /home/mks/firmware_comparison/downloads/kiauh/.git/objects/pack/pack-10fca5f1cf01252367df1fca579c26987f91988e.pack differ
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/objects/pack/pack-3117af90ab3ed6f0ca04f76f0bd8653ff15ac7a0.idx and /home/mks/firmware_comparison/downloads/kiauh/.git/objects/pack/pack-3117af90ab3ed6f0ca04f76f0bd8653ff15ac7a0.idx differ
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/objects/pack/pack-3117af90ab3ed6f0ca04f76f0bd8653ff15ac7a0.pack and /home/mks/firmware_comparison/downloads/kiauh/.git/objects/pack/pack-3117af90ab3ed6f0ca04f76f0bd8653ff15ac7a0.pack differ
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/objects/pack/pack-843e4d651b3e289403a37cde4ae41b4426c979bc.idx and /home/mks/firmware_comparison/downloads/kiauh/.git/objects/pack/pack-843e4d651b3e289403a37cde4ae41b4426c979bc.idx differ
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/objects/pack/pack-843e4d651b3e289403a37cde4ae41b4426c979bc.pack and /home/mks/firmware_comparison/downloads/kiauh/.git/objects/pack/pack-843e4d651b3e289403a37cde4ae41b4426c979bc.pack differ
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/objects/pack/pack-ac4de198f5d317e876137b365d38ad6d31836d3b.idx and /home/mks/firmware_comparison/downloads/kiauh/.git/objects/pack/pack-ac4de198f5d317e876137b365d38ad6d31836d3b.idx differ
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/objects/pack/pack-ac4de198f5d317e876137b365d38ad6d31836d3b.pack and /home/mks/firmware_comparison/downloads/kiauh/.git/objects/pack/pack-ac4de198f5d317e876137b365d38ad6d31836d3b.pack differ
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/objects/pack/pack-add583dbd9f80556619b4e4d4c1e3803727f36c1.idx and /home/mks/firmware_comparison/downloads/kiauh/.git/objects/pack/pack-add583dbd9f80556619b4e4d4c1e3803727f36c1.idx differ
Binary files /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/objects/pack/pack-add583dbd9f80556619b4e4d4c1e3803727f36c1.pack and /home/mks/firmware_comparison/downloads/kiauh/.git/objects/pack/pack-add583dbd9f80556619b4e4d4c1e3803727f36c1.pack differ
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/ORIG_HEAD /home/mks/firmware_comparison/downloads/kiauh/.git/ORIG_HEAD
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/ORIG_HEAD	2023-12-15 01:08:34.829257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/ORIG_HEAD	1969-12-31 19:00:00.000000000 -0500
@@ -1 +0,0 @@
-1d7fb010af75c4d1cbea7e37893a06a6401a9b80
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/packed-refs /home/mks/firmware_comparison/downloads/kiauh/.git/packed-refs
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/packed-refs	2022-07-25 05:41:36.722249943 -0400
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/packed-refs	2024-10-08 17:45:33.574241834 -0400
@@ -1,10 +1,22 @@
 # pack-refs with: peeled fully-peeled sorted 
-646e5acd3abc478863d21ecb82d5ccebb2f704c0 refs/remotes/origin/develop
-1d7fb010af75c4d1cbea7e37893a06a6401a9b80 refs/remotes/origin/master
+43d6598be6db526832c9a8cd79b7c3da83e410b6 refs/remotes/origin/develop
+4da9b20c2c24bab1e66078fc00e0f661e9a878e3 refs/remotes/origin/fix/section-adding
+dc026a7a2ba57fa6c29bcd05ceb2ba7c71e02cf9 refs/remotes/origin/master
 18e85235c189b7b4a60a4c03afdbf7e7cd4c255c refs/remotes/origin/v2
 4bf9e8f0a8c3b0939b3ee8337530aafcc08cd3b1 refs/remotes/origin/v3
+442980dbd03c141a5286150d2c6ce102b84c1728 refs/remotes/origin/v4
+854794298679cc6cb187465df7e3e38b5eb0e8c7 refs/remotes/origin/v5
 2d351e0bf10d076825f5d354d9104fe416d99430 refs/tags/v2.0.0
 ^d7ff3f86755a9498fe520990ba9ba147c8c1243e
 16e6dde99864bc0c315f483c036938728ae597ba refs/tags/v3.0.0
 e9706b52d8c91e9a8d4898119ccba6dd80ad6baa refs/tags/v3.1.0
 fcf059df73aa273296cb4d0e3f89a85dc48e53d2 refs/tags/v4.0.0
+046178f8016d6a20c11ceab3d2df8c68cd9bceee refs/tags/v5.0.0
+0ee0fa332509d11b3e5f98066f377eebc7f376b0 refs/tags/v5.1.0
+ec3f93eeda5c6a10ef588e127d26f91d42c50aa2 refs/tags/v5.1.1
+0ee0fa332509d11b3e5f98066f377eebc7f376b0 refs/tags/v6.0.0-alpha.1
+1d06bf76f39a18a49f7b7099853ce4de590bf647 refs/tags/v6.0.0-alpha.2
+4cf523a758fb2b18ac70a910532aeff6b8fbd6fc refs/tags/v6.0.0-alpha.3
+ec3f93eeda5c6a10ef588e127d26f91d42c50aa2 refs/tags/v6.0.0-alpha.4
+a8a73249a507a657a09b92410179d23f552a5829 refs/tags/v6.0.0-alpha.5
+dc026a7a2ba57fa6c29bcd05ceb2ba7c71e02cf9 refs/tags/v6.0.0-alpha.6
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/refs/heads/master /home/mks/firmware_comparison/downloads/kiauh/.git/refs/heads/master
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/refs/heads/master	2023-12-15 01:08:34.869257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/refs/heads/master	2024-10-08 17:45:33.575241837 -0400
@@ -1 +1 @@
-7a9e752f9ca3297fbca311d5fbb1d95da3093cac
+dc026a7a2ba57fa6c29bcd05ceb2ba7c71e02cf9
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/refs/remotes/origin/improve-readme /home/mks/firmware_comparison/downloads/kiauh/.git/refs/remotes/origin/improve-readme
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/refs/remotes/origin/improve-readme	2023-03-10 17:05:20.484011337 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/refs/remotes/origin/improve-readme	1969-12-31 19:00:00.000000000 -0500
@@ -1 +0,0 @@
-9f2fe7621078439da67be55cf7097fd27fa7aaef
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/refs/remotes/origin/kiauh-v6-dev /home/mks/firmware_comparison/downloads/kiauh/.git/refs/remotes/origin/kiauh-v6-dev
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/refs/remotes/origin/kiauh-v6-dev	2023-12-15 01:07:51.469257028 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/refs/remotes/origin/kiauh-v6-dev	1969-12-31 19:00:00.000000000 -0500
@@ -1 +0,0 @@
-e121ba8a629768bace1c7bf9c35472a69eb704bb
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/refs/remotes/origin/master /home/mks/firmware_comparison/downloads/kiauh/.git/refs/remotes/origin/master
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/refs/remotes/origin/master	2023-12-15 01:07:51.461257028 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/refs/remotes/origin/master	1969-12-31 19:00:00.000000000 -0500
@@ -1 +0,0 @@
-7a9e752f9ca3297fbca311d5fbb1d95da3093cac
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/refs/remotes/origin/v4 /home/mks/firmware_comparison/downloads/kiauh/.git/refs/remotes/origin/v4
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/refs/remotes/origin/v4	2023-03-10 17:05:20.488011337 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/refs/remotes/origin/v4	1969-12-31 19:00:00.000000000 -0500
@@ -1 +0,0 @@
-442980dbd03c141a5286150d2c6ce102b84c1728
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/refs/tags/v5.0.0 /home/mks/firmware_comparison/downloads/kiauh/.git/refs/tags/v5.0.0
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.git/refs/tags/v5.0.0	2023-03-10 17:05:20.508011337 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.git/refs/tags/v5.0.0	1969-12-31 19:00:00.000000000 -0500
@@ -1 +0,0 @@
-046178f8016d6a20c11ceab3d2df8c68cd9bceee
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.github/FUNDING.yml /home/mks/firmware_comparison/downloads/kiauh/.github/FUNDING.yml
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.github/FUNDING.yml	2023-12-15 01:08:34.837257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.github/FUNDING.yml	2024-10-08 17:45:33.575241837 -0400
@@ -9,4 +9,4 @@
 liberapay: # Replace with a single Liberapay username
 issuehunt: # Replace with a single IssueHunt username
 otechie: # Replace with a single Otechie username
-custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']
+custom: https://paypal.me/dwillner0
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.gitignore /home/mks/firmware_comparison/downloads/kiauh/.gitignore
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/.gitignore	2023-12-15 01:08:34.837257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/.gitignore	2024-10-08 17:45:33.575241837 -0400
@@ -1,3 +1,8 @@
+.idea
 .vscode
+.pytest_cache
+__pycache__
+.kiauh-env
 *.code-workspace
-klipper_repos.txt
+*.iml
+kiauh.cfg
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/crowsnest/crowsnest.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/crowsnest/crowsnest.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/crowsnest/crowsnest.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/crowsnest/crowsnest.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,178 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import shutil
+import time
+from pathlib import Path
+from subprocess import CalledProcessError, run
+from typing import List
+
+from components.crowsnest import (
+    CROWSNEST_BACKUP_DIR,
+    CROWSNEST_BIN_FILE,
+    CROWSNEST_DIR,
+    CROWSNEST_INSTALL_SCRIPT,
+    CROWSNEST_LOGROTATE_FILE,
+    CROWSNEST_MULTI_CONFIG,
+    CROWSNEST_REPO,
+    CROWSNEST_SERVICE_FILE,
+    CROWSNEST_SERVICE_NAME,
+)
+from components.klipper.klipper import Klipper
+from core.backup_manager.backup_manager import BackupManager
+from core.constants import CURRENT_USER
+from core.logger import DialogType, Logger
+from core.settings.kiauh_settings import KiauhSettings
+from core.types import ComponentStatus
+from utils.common import (
+    check_install_dependencies,
+    get_install_status,
+)
+from utils.git_utils import (
+    git_clone_wrapper,
+    git_pull_wrapper,
+)
+from utils.input_utils import get_confirm
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    cmd_sysctl_service,
+    parse_packages_from_file,
+)
+
+
+def install_crowsnest() -> None:
+    # Step 1: Clone crowsnest repo
+    git_clone_wrapper(CROWSNEST_REPO, CROWSNEST_DIR, "master")
+
+    # Step 2: Install dependencies
+    check_install_dependencies({"make"})
+
+    # Step 3: Check for Multi Instance
+    instances: List[Klipper] = get_instances(Klipper)
+
+    if len(instances) > 1:
+        print_multi_instance_warning(instances)
+
+        if not get_confirm("Do you want to continue with the installation?"):
+            Logger.print_info("Crowsnest installation aborted!")
+            return
+
+        Logger.print_status("Launching crowsnest's install configurator ...")
+        time.sleep(3)
+        configure_multi_instance()
+
+    # Step 4: Launch crowsnest installer
+    Logger.print_status("Launching crowsnest installer ...")
+    Logger.print_info("Installer will prompt you for sudo password!")
+    try:
+        run(
+            f"sudo make install BASE_USER={CURRENT_USER}",
+            cwd=CROWSNEST_DIR,
+            shell=True,
+            check=True,
+        )
+    except CalledProcessError as e:
+        Logger.print_error(f"Something went wrong! Please try again...\n{e}")
+        return
+
+
+def print_multi_instance_warning(instances: List[Klipper]) -> None:
+    Logger.print_dialog(
+        DialogType.WARNING,
+        [
+            "Multi instance install detected!",
+            "\n\n",
+            "Crowsnest is NOT designed to support multi instances. A workaround "
+            "for this is to choose the most used instance as a 'master' and use "
+            "this instance to set up your 'crowsnest.conf' and steering it's service.",
+            "\n\n",
+            "The following instances were found:",
+            *[f"● {instance.data_dir.name}" for instance in instances],
+        ],
+    )
+
+
+def configure_multi_instance() -> None:
+    try:
+        run(
+            "make config",
+            cwd=CROWSNEST_DIR,
+            shell=True,
+            check=True,
+        )
+    except CalledProcessError as e:
+        Logger.print_error(f"Something went wrong! Please try again...\n{e}")
+        if CROWSNEST_MULTI_CONFIG.exists():
+            Path.unlink(CROWSNEST_MULTI_CONFIG)
+        return
+
+    if not CROWSNEST_MULTI_CONFIG.exists():
+        Logger.print_error("Generating .config failed, installation aborted")
+
+
+def update_crowsnest() -> None:
+    try:
+        cmd_sysctl_service(CROWSNEST_SERVICE_NAME, "stop")
+
+        if not CROWSNEST_DIR.exists():
+            git_clone_wrapper(CROWSNEST_REPO, CROWSNEST_DIR, "master")
+        else:
+            Logger.print_status("Updating Crowsnest ...")
+
+            settings = KiauhSettings()
+            if settings.kiauh.backup_before_update:
+                bm = BackupManager()
+                bm.backup_directory(
+                    CROWSNEST_DIR.name,
+                    source=CROWSNEST_DIR,
+                    target=CROWSNEST_BACKUP_DIR,
+                )
+
+            git_pull_wrapper(CROWSNEST_REPO, CROWSNEST_DIR)
+
+            deps = parse_packages_from_file(CROWSNEST_INSTALL_SCRIPT)
+            check_install_dependencies({*deps})
+
+        cmd_sysctl_service(CROWSNEST_SERVICE_NAME, "restart")
+
+        Logger.print_ok("Crowsnest updated successfully.", end="\n\n")
+    except CalledProcessError as e:
+        Logger.print_error(f"Something went wrong! Please try again...\n{e}")
+        return
+
+
+def get_crowsnest_status() -> ComponentStatus:
+    files = [
+        CROWSNEST_BIN_FILE,
+        CROWSNEST_LOGROTATE_FILE,
+        CROWSNEST_SERVICE_FILE,
+    ]
+    return get_install_status(CROWSNEST_DIR, files=files)
+
+
+def remove_crowsnest() -> None:
+    if not CROWSNEST_DIR.exists():
+        Logger.print_info("Crowsnest does not seem to be installed! Skipping ...")
+        return
+
+    try:
+        run(
+            "make uninstall",
+            cwd=CROWSNEST_DIR,
+            shell=True,
+            check=True,
+        )
+    except CalledProcessError as e:
+        Logger.print_error(f"Something went wrong! Please try again...\n{e}")
+        return
+
+    Logger.print_status("Removing crowsnest directory ...")
+    shutil.rmtree(CROWSNEST_DIR)
+    Logger.print_ok("Directory removed!")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/crowsnest/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/crowsnest/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/crowsnest/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/crowsnest/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,30 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+from core.backup_manager import BACKUP_ROOT_DIR
+from core.constants import SYSTEMD
+
+# repo
+CROWSNEST_REPO = "https://github.com/mainsail-crew/crowsnest.git"
+
+# names
+CROWSNEST_SERVICE_NAME = "crowsnest.service"
+
+# directories
+CROWSNEST_DIR = Path.home().joinpath("crowsnest")
+CROWSNEST_BACKUP_DIR = BACKUP_ROOT_DIR.joinpath("crowsnest-backups")
+
+# files
+CROWSNEST_MULTI_CONFIG = CROWSNEST_DIR.joinpath("tools/.config")
+CROWSNEST_INSTALL_SCRIPT = CROWSNEST_DIR.joinpath("tools/install.sh")
+CROWSNEST_BIN_FILE = Path("/usr/local/bin/crowsnest")
+CROWSNEST_LOGROTATE_FILE = Path("/etc/logrotate.d/crowsnest")
+CROWSNEST_SERVICE_FILE = SYSTEMD.joinpath(CROWSNEST_SERVICE_NAME)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/assets/klipper.env /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/assets/klipper.env
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/assets/klipper.env	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/assets/klipper.env	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1 @@
+KLIPPER_ARGS="%KLIPPER_DIR%/klippy/klippy.py %CFG% -I %SERIAL% -l %LOG% -a %UDS%"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/assets/klipper.service /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/assets/klipper.service
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/assets/klipper.service	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/assets/klipper.service	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,18 @@
+[Unit]
+Description=Klipper 3D Printer Firmware SV1
+Documentation=https://www.klipper3d.org/
+After=network-online.target
+Wants=udev.target
+
+[Install]
+WantedBy=multi-user.target
+
+[Service]
+Type=simple
+User=%USER%
+RemainAfterExit=yes
+WorkingDirectory=%KLIPPER_DIR%
+EnvironmentFile=%ENV_FILE%
+ExecStart=%ENV%/bin/python $KLIPPER_ARGS
+Restart=always
+RestartSec=10
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/assets/printer.cfg /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/assets/printer.cfg
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/assets/printer.cfg	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/assets/printer.cfg	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,11 @@
+[mcu]
+serial: /dev/serial/by-id/<your-mcu-id>
+
+[virtual_sdcard]
+path: %GCODES_DIR%
+on_error_gcode: CANCEL_PRINT
+
+[printer]
+kinematics: none
+max_velocity: 1000
+max_accel: 1000
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,36 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+from core.backup_manager import BACKUP_ROOT_DIR
+
+MODULE_PATH = Path(__file__).resolve().parent
+
+# names
+KLIPPER_LOG_NAME = "klippy.log"
+KLIPPER_CFG_NAME = "printer.cfg"
+KLIPPER_SERIAL_NAME = "klippy.serial"
+KLIPPER_UDS_NAME = "klippy.sock"
+KLIPPER_ENV_FILE_NAME = "klipper.env"
+KLIPPER_SERVICE_NAME = "klipper.service"
+
+# directories
+KLIPPER_DIR = Path.home().joinpath("klipper")
+KLIPPER_ENV_DIR = Path.home().joinpath("klippy-env")
+KLIPPER_BACKUP_DIR = BACKUP_ROOT_DIR.joinpath("klipper-backups")
+
+# files
+KLIPPER_REQ_FILE = KLIPPER_DIR.joinpath("scripts/klippy-requirements.txt")
+KLIPPER_INSTALL_SCRIPT = KLIPPER_DIR.joinpath("scripts/install-ubuntu-22.04.sh")
+KLIPPER_SERVICE_TEMPLATE = MODULE_PATH.joinpath(f"assets/{KLIPPER_SERVICE_NAME}")
+KLIPPER_ENV_FILE_TEMPLATE = MODULE_PATH.joinpath(f"assets/{KLIPPER_ENV_FILE_NAME}")
+
+
+EXIT_KLIPPER_SETUP = "Exiting Klipper setup ..."
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/klipper_dialogs.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/klipper_dialogs.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/klipper_dialogs.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/klipper_dialogs.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,114 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+import textwrap
+from enum import Enum, unique
+from typing import List
+
+from core.constants import (
+    COLOR_CYAN,
+    COLOR_GREEN,
+    COLOR_YELLOW,
+    RESET_FORMAT,
+)
+from core.menus.base_menu import print_back_footer
+from utils.instance_type import InstanceType
+
+
+@unique
+class DisplayType(Enum):
+    SERVICE_NAME = "SERVICE_NAME"
+    PRINTER_NAME = "PRINTER_NAME"
+
+
+def print_instance_overview(
+    instances: List[InstanceType],
+    display_type: DisplayType = DisplayType.SERVICE_NAME,
+    show_headline=True,
+    show_index=False,
+    start_index=0,
+    show_select_all=False,
+) -> None:
+    dialog = "╔═══════════════════════════════════════════════════════╗\n"
+    if show_headline:
+        d_type = (
+            "Klipper instances"
+            if display_type is DisplayType.SERVICE_NAME
+            else "printer directories"
+        )
+        headline = f"{COLOR_GREEN}The following {d_type} were found:{RESET_FORMAT}"
+        dialog += f"║{headline:^64}║\n"
+        dialog += "╟───────────────────────────────────────────────────────╢\n"
+
+    if show_select_all:
+        select_all = f"{COLOR_YELLOW}a) Select all{RESET_FORMAT}"
+        dialog += f"║ {select_all:<63}║\n"
+        dialog += "║                                                       ║\n"
+
+    for i, s in enumerate(instances):
+        if display_type is DisplayType.SERVICE_NAME:
+            name = s.service_file_path.stem
+        else:
+            name = s.data_dir
+        line = f"{COLOR_CYAN}{f'{i + start_index})' if show_index else '●'} {name}{RESET_FORMAT}"
+        dialog += f"║ {line:<63}║\n"
+    dialog += "╟───────────────────────────────────────────────────────╢\n"
+
+    print(dialog, end="")
+    print_back_footer()
+
+
+def print_select_instance_count_dialog() -> None:
+    line1 = f"{COLOR_YELLOW}WARNING:{RESET_FORMAT}"
+    line2 = f"{COLOR_YELLOW}Setting up too many instances may crash your system.{RESET_FORMAT}"
+    dialog = textwrap.dedent(
+        f"""
+        ╔═══════════════════════════════════════════════════════╗
+        ║ Please select the number of Klipper instances to set  ║
+        ║ up. The number of Klipper instances will determine    ║
+        ║ the amount of printers you can run from this host.    ║
+        ║                                                       ║
+        ║ {line1:<63}║
+        ║ {line2:<63}║
+        ╟───────────────────────────────────────────────────────╢
+        """
+    )[1:]
+
+    print(dialog, end="")
+    print_back_footer()
+
+
+def print_select_custom_name_dialog() -> None:
+    line1 = f"{COLOR_YELLOW}INFO:{RESET_FORMAT}"
+    line2 = f"{COLOR_YELLOW}Only alphanumeric characters are allowed!{RESET_FORMAT}"
+    dialog = textwrap.dedent(
+        f"""
+        ╔═══════════════════════════════════════════════════════╗
+        ║ Do you want to assign a custom name to each instance? ║
+        ║                                                       ║
+        ║ Assigning a custom name will create a Klipper service ║
+        ║ and a printer directory with the chosen name.         ║
+        ║                                                       ║
+        ║ Example for custom name 'kiauh':                      ║
+        ║  ● Klipper service:   klipper-kiauh.service           ║
+        ║  ● Printer directory: printer_kiauh_data              ║
+        ║                                                       ║
+        ║ If skipped, each instance will get an index assigned  ║
+        ║ in ascending order, starting at '1' in case of a new  ║
+        ║ installation. Otherwise, the index will be derived    ║
+        ║ from amount of already existing instances.            ║
+        ║                                                       ║
+        ║ {line1:<63}║
+        ║ {line2:<63}║
+        ╟───────────────────────────────────────────────────────╢
+        """
+    )[1:]
+
+    print(dialog, end="")
+    print_back_footer()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/klipper.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/klipper.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/klipper.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/klipper.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,142 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from dataclasses import dataclass, field
+from pathlib import Path
+from subprocess import CalledProcessError
+
+from components.klipper import (
+    KLIPPER_CFG_NAME,
+    KLIPPER_DIR,
+    KLIPPER_ENV_DIR,
+    KLIPPER_ENV_FILE_NAME,
+    KLIPPER_ENV_FILE_TEMPLATE,
+    KLIPPER_LOG_NAME,
+    KLIPPER_SERIAL_NAME,
+    KLIPPER_SERVICE_TEMPLATE,
+    KLIPPER_UDS_NAME,
+)
+from core.constants import CURRENT_USER
+from core.instance_manager.base_instance import BaseInstance
+from core.logger import Logger
+from utils.fs_utils import create_folders, get_data_dir
+from utils.sys_utils import get_service_file_path
+
+
+# noinspection PyMethodMayBeStatic
+@dataclass(repr=True)
+class Klipper:
+    suffix: str
+    base: BaseInstance = field(init=False, repr=False)
+    service_file_path: Path = field(init=False)
+    log_file_name: str = KLIPPER_LOG_NAME
+    klipper_dir: Path = KLIPPER_DIR
+    env_dir: Path = KLIPPER_ENV_DIR
+    data_dir: Path = field(init=False)
+    cfg_file: Path = field(init=False)
+    env_file: Path = field(init=False)
+    serial: Path = field(init=False)
+    uds: Path = field(init=False)
+
+    def __post_init__(self):
+        self.base: BaseInstance = BaseInstance(Klipper, self.suffix)
+        self.base.log_file_name = self.log_file_name
+
+        self.service_file_path: Path = get_service_file_path(Klipper, self.suffix)
+        self.data_dir: Path = get_data_dir(Klipper, self.suffix)
+        self.cfg_file: Path = self.base.cfg_dir.joinpath(KLIPPER_CFG_NAME)
+        self.env_file: Path = self.base.sysd_dir.joinpath(KLIPPER_ENV_FILE_NAME)
+        self.serial: Path = self.base.comms_dir.joinpath(KLIPPER_SERIAL_NAME)
+        self.uds: Path = self.base.comms_dir.joinpath(KLIPPER_UDS_NAME)
+
+    def create(self) -> None:
+        from utils.sys_utils import create_env_file, create_service_file
+
+        Logger.print_status("Creating new Klipper Instance ...")
+
+        try:
+            create_folders(self.base.base_folders)
+
+            create_service_file(
+                name=self.service_file_path.name,
+                content=self._prep_service_file_content(),
+            )
+
+            create_env_file(
+                path=self.base.sysd_dir.joinpath(KLIPPER_ENV_FILE_NAME),
+                content=self._prep_env_file_content(),
+            )
+
+        except CalledProcessError as e:
+            Logger.print_error(f"Error creating instance: {e}")
+            raise
+        except OSError as e:
+            Logger.print_error(f"Error creating env file: {e}")
+            raise
+
+    def _prep_service_file_content(self) -> str:
+        template = KLIPPER_SERVICE_TEMPLATE
+
+        try:
+            with open(template, "r") as template_file:
+                template_content = template_file.read()
+        except FileNotFoundError:
+            Logger.print_error(f"Unable to open {template} - File not found")
+            raise
+
+        service_content = template_content.replace(
+            "%USER%",
+            CURRENT_USER,
+        )
+        service_content = service_content.replace(
+            "%KLIPPER_DIR%",
+            self.klipper_dir.as_posix(),
+        )
+        service_content = service_content.replace(
+            "%ENV%",
+            self.env_dir.as_posix(),
+        )
+        service_content = service_content.replace(
+            "%ENV_FILE%",
+            self.base.sysd_dir.joinpath(KLIPPER_ENV_FILE_NAME).as_posix(),
+        )
+        return service_content
+
+    def _prep_env_file_content(self) -> str:
+        template = KLIPPER_ENV_FILE_TEMPLATE
+
+        try:
+            with open(template, "r") as env_file:
+                env_template_file_content = env_file.read()
+        except FileNotFoundError:
+            Logger.print_error(f"Unable to open {template} - File not found")
+            raise
+
+        env_file_content = env_template_file_content.replace(
+            "%KLIPPER_DIR%", self.klipper_dir.as_posix()
+        )
+        env_file_content = env_file_content.replace(
+            "%CFG%",
+            f"{self.base.cfg_dir}/{KLIPPER_CFG_NAME}",
+        )
+        env_file_content = env_file_content.replace(
+            "%SERIAL%",
+            self.serial.as_posix() if self.serial else "",
+        )
+        env_file_content = env_file_content.replace(
+            "%LOG%",
+            self.base.log_dir.joinpath(self.log_file_name).as_posix(),
+        )
+        env_file_content = env_file_content.replace(
+            "%UDS%",
+            self.uds.as_posix() if self.uds else "",
+        )
+
+        return env_file_content
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/klipper_remove.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/klipper_remove.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/klipper_remove.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/klipper_remove.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,95 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from typing import List
+
+from components.klipper import KLIPPER_DIR, KLIPPER_ENV_DIR
+from components.klipper.klipper import Klipper
+from components.klipper.klipper_dialogs import print_instance_overview
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import Logger
+from utils.fs_utils import run_remove_routines
+from utils.input_utils import get_selection_input
+from utils.instance_utils import get_instances
+from utils.sys_utils import unit_file_exists
+
+
+def run_klipper_removal(
+    remove_service: bool,
+    remove_dir: bool,
+    remove_env: bool,
+) -> None:
+    klipper_instances: List[Klipper] = get_instances(Klipper)
+
+    if remove_service:
+        Logger.print_status("Removing Klipper instances ...")
+        if klipper_instances:
+            instances_to_remove = select_instances_to_remove(klipper_instances)
+            remove_instances(instances_to_remove)
+        else:
+            Logger.print_info("No Klipper Services installed! Skipped ...")
+
+    if (remove_dir or remove_env) and unit_file_exists("klipper", suffix="service"):
+        Logger.print_info("There are still other Klipper services installed:")
+        Logger.print_info(f"● '{KLIPPER_DIR}' was not removed.", prefix=False)
+        Logger.print_info(f"● '{KLIPPER_ENV_DIR}' was not removed.", prefix=False)
+    else:
+        if remove_dir:
+            Logger.print_status("Removing Klipper local repository ...")
+            run_remove_routines(KLIPPER_DIR)
+        if remove_env:
+            Logger.print_status("Removing Klipper Python environment ...")
+            run_remove_routines(KLIPPER_ENV_DIR)
+
+
+def select_instances_to_remove(instances: List[Klipper]) -> List[Klipper] | None:
+    start_index = 1
+    options = [str(i + start_index) for i in range(len(instances))]
+    options.extend(["a", "b"])
+    instance_map = {options[i]: instances[i] for i in range(len(instances))}
+
+    print_instance_overview(
+        instances,
+        start_index=start_index,
+        show_index=True,
+        show_select_all=True,
+    )
+    selection = get_selection_input("Select Klipper instance to remove", options)
+
+    instances_to_remove = []
+    if selection == "b":
+        return None
+    elif selection == "a":
+        instances_to_remove.extend(instances)
+    else:
+        instances_to_remove.append(instance_map[selection])
+
+    return instances_to_remove
+
+
+def remove_instances(
+    instance_list: List[Klipper] | None,
+) -> None:
+    if not instance_list:
+        return
+
+    for instance in instance_list:
+        Logger.print_status(f"Removing instance {instance.service_file_path.stem} ...")
+        InstanceManager.remove(instance)
+        delete_klipper_env_file(instance)
+
+
+def delete_klipper_env_file(instance: Klipper):
+    Logger.print_status(f"Remove '{instance.env_file}'")
+    if not instance.env_file.exists():
+        msg = f"Env file in {instance.base.sysd_dir} not found. Skipped ..."
+        Logger.print_info(msg)
+        return
+    run_remove_routines(instance.env_file)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/klipper_setup.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/klipper_setup.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/klipper_setup.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/klipper_setup.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,239 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from pathlib import Path
+from typing import Dict, List, Tuple
+
+from components.klipper import (
+    EXIT_KLIPPER_SETUP,
+    KLIPPER_DIR,
+    KLIPPER_ENV_DIR,
+    KLIPPER_INSTALL_SCRIPT,
+    KLIPPER_REQ_FILE,
+)
+from components.klipper.klipper import Klipper
+from components.klipper.klipper_dialogs import (
+    print_select_custom_name_dialog,
+)
+from components.klipper.klipper_utils import (
+    assign_custom_name,
+    backup_klipper_dir,
+    check_user_groups,
+    create_example_printer_cfg,
+    get_install_count,
+    handle_disruptive_system_packages,
+)
+from components.moonraker.moonraker import Moonraker
+from components.webui_client.client_utils import (
+    get_existing_clients,
+)
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import DialogType, Logger
+from core.settings.kiauh_settings import KiauhSettings
+from utils.common import check_install_dependencies
+from utils.git_utils import git_clone_wrapper, git_pull_wrapper
+from utils.input_utils import get_confirm
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    cmd_sysctl_manage,
+    cmd_sysctl_service,
+    create_python_venv,
+    install_python_requirements,
+    parse_packages_from_file,
+)
+
+
+def install_klipper() -> None:
+    Logger.print_status("Installing Klipper ...")
+
+    klipper_list: List[Klipper] = get_instances(Klipper)
+    moonraker_list: List[Moonraker] = get_instances(Moonraker)
+    match_moonraker: bool = False
+
+    # if there are more moonraker instances than klipper instances, ask the user to
+    # match the klipper instance count to the count of moonraker instances with the same suffix
+    if len(moonraker_list) > len(klipper_list):
+        is_confirmed = display_moonraker_info(moonraker_list)
+        if not is_confirmed:
+            Logger.print_status(EXIT_KLIPPER_SETUP)
+            return
+        match_moonraker = True
+
+    install_count, name_dict = get_install_count_and_name_dict(
+        klipper_list, moonraker_list
+    )
+
+    if install_count == 0:
+        Logger.print_status(EXIT_KLIPPER_SETUP)
+        return
+
+    is_multi_install = install_count > 1 or (len(name_dict) >= 1 and install_count >= 1)
+    if not name_dict and install_count == 1:
+        name_dict = {0: ""}
+    elif is_multi_install and not match_moonraker:
+        custom_names = use_custom_names_or_go_back()
+        if custom_names is None:
+            Logger.print_status(EXIT_KLIPPER_SETUP)
+            return
+
+        handle_instance_names(install_count, name_dict, custom_names)
+
+    create_example_cfg = get_confirm("Create example printer.cfg?")
+    # run the actual installation
+    try:
+        run_klipper_setup(klipper_list, name_dict, create_example_cfg)
+    except Exception as e:
+        Logger.print_error(e)
+        Logger.print_error("Klipper installation failed!")
+        return
+
+
+def run_klipper_setup(
+    klipper_list: List[Klipper], name_dict: Dict[int, str], create_example_cfg: bool
+) -> None:
+    if not klipper_list:
+        setup_klipper_prerequesites()
+
+    for i in name_dict:
+        # skip this iteration if there is already an instance with the name
+        if name_dict[i] in [n.suffix for n in klipper_list]:
+            continue
+
+        instance = Klipper(suffix=name_dict[i])
+        instance.create()
+        cmd_sysctl_service(instance.service_file_path.name, "enable")
+
+        if create_example_cfg:
+            # if a client-config is installed, include it in the new example cfg
+            clients = get_existing_clients()
+            create_example_printer_cfg(instance, clients)
+
+        cmd_sysctl_service(instance.service_file_path.name, "start")
+
+    cmd_sysctl_manage("daemon-reload")
+
+    # step 4: check/handle conflicting packages/services
+    handle_disruptive_system_packages()
+
+    # step 5: check for required group membership
+    check_user_groups()
+
+
+def handle_instance_names(
+    install_count: int, name_dict: Dict[int, str], custom_names: bool
+) -> None:
+    for i in range(install_count):  # 3
+        key: int = len(name_dict.keys()) + 1
+        if custom_names:
+            assign_custom_name(key, name_dict)
+        else:
+            name_dict[key] = str(len(name_dict) + 1)
+
+
+def get_install_count_and_name_dict(
+    klipper_list: List[Klipper], moonraker_list: List[Moonraker]
+) -> Tuple[int, Dict[int, str]]:
+    install_count: int | None
+    if len(moonraker_list) > len(klipper_list):
+        install_count = len(moonraker_list)
+        name_dict = {i: moonraker.suffix for i, moonraker in enumerate(moonraker_list)}
+    else:
+        install_count = get_install_count()
+        name_dict = {i: klipper.suffix for i, klipper in enumerate(klipper_list)}
+
+        if install_count is None:
+            Logger.print_status(EXIT_KLIPPER_SETUP)
+            return 0, {}
+
+    return install_count, name_dict
+
+
+def setup_klipper_prerequesites() -> None:
+    settings = KiauhSettings()
+    repo = settings.klipper.repo_url
+    branch = settings.klipper.branch
+
+    git_clone_wrapper(repo, KLIPPER_DIR, branch)
+
+    # install klipper dependencies and create python virtualenv
+    try:
+        install_klipper_packages()
+        if create_python_venv(KLIPPER_ENV_DIR):
+            install_python_requirements(KLIPPER_ENV_DIR, KLIPPER_REQ_FILE)
+    except Exception:
+        Logger.print_error("Error during installation of Klipper requirements!")
+        raise
+
+
+def install_klipper_packages() -> None:
+    script = KLIPPER_INSTALL_SCRIPT
+    packages = parse_packages_from_file(script)
+
+    # Add dbus requirement for DietPi distro
+    if Path("/boot/dietpi/.version").exists():
+        packages.append("dbus")
+
+    check_install_dependencies({*packages})
+
+
+def update_klipper() -> None:
+    Logger.print_dialog(
+        DialogType.WARNING,
+        [
+            "Do NOT continue if there are ongoing prints running!",
+            "All Klipper instances will be restarted during the update process and "
+            "ongoing prints WILL FAIL.",
+        ],
+    )
+
+    if not get_confirm("Update Klipper now?"):
+        return
+
+    settings = KiauhSettings()
+    if settings.kiauh.backup_before_update:
+        backup_klipper_dir()
+
+    instances = get_instances(Klipper)
+    InstanceManager.stop_all(instances)
+
+    git_pull_wrapper(repo=settings.klipper.repo_url, target_dir=KLIPPER_DIR)
+
+    # install possible new system packages
+    install_klipper_packages()
+    # install possible new python dependencies
+    install_python_requirements(KLIPPER_ENV_DIR, KLIPPER_REQ_FILE)
+
+    InstanceManager.start_all(instances)
+
+
+def use_custom_names_or_go_back() -> bool | None:
+    print_select_custom_name_dialog()
+    _input: bool | None = get_confirm(
+        "Assign custom names?",
+        False,
+        allow_go_back=True,
+    )
+    return _input
+
+
+def display_moonraker_info(moonraker_list: List[Moonraker]) -> bool:
+    # todo: only show the klipper instances that are not already installed
+    Logger.print_dialog(
+        DialogType.INFO,
+        [
+            "Existing Moonraker instances detected:",
+            *[f"● {m.service_file_path.stem}" for m in moonraker_list],
+            "\n\n",
+            "The following Klipper instances will be installed:",
+            *[f"● klipper-{m.suffix}" for m in moonraker_list],
+        ],
+    )
+    _input: bool = get_confirm("Proceed with installation?")
+    return _input
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/klipper_utils.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/klipper_utils.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/klipper_utils.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/klipper_utils.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,196 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import grp
+import os
+import shutil
+from subprocess import CalledProcessError, run
+from typing import Dict, List
+
+from components.klipper import (
+    KLIPPER_BACKUP_DIR,
+    KLIPPER_DIR,
+    KLIPPER_ENV_DIR,
+    MODULE_PATH,
+)
+from components.klipper.klipper import Klipper
+from components.klipper.klipper_dialogs import (
+    print_instance_overview,
+    print_select_instance_count_dialog,
+)
+from components.webui_client.base_data import BaseWebClient
+from components.webui_client.client_config.client_config_setup import (
+    create_client_config_symlink,
+)
+from core.backup_manager.backup_manager import BackupManager
+from core.constants import CURRENT_USER
+from core.instance_manager.base_instance import SUFFIX_BLACKLIST
+from core.logger import DialogType, Logger
+from core.submodules.simple_config_parser.src.simple_config_parser.simple_config_parser import (
+    SimpleConfigParser,
+)
+from core.types import ComponentStatus
+from utils.common import get_install_status
+from utils.input_utils import get_confirm, get_number_input, get_string_input
+from utils.instance_utils import get_instances
+from utils.sys_utils import cmd_sysctl_service
+
+
+def get_klipper_status() -> ComponentStatus:
+    return get_install_status(KLIPPER_DIR, KLIPPER_ENV_DIR, Klipper)
+
+
+def add_to_existing() -> bool | None:
+    kl_instances: List[Klipper] = get_instances(Klipper)
+    print_instance_overview(kl_instances)
+    _input: bool | None = get_confirm("Add new instances?", allow_go_back=True)
+    return _input
+
+
+def get_install_count() -> int | None:
+    """
+    Print a dialog for selecting the amount of Klipper instances
+    to set up with an option to navigate back. Returns None if the
+    user selected to go back, otherwise an integer greater or equal than 1 |
+    :return: Integer >= 1 or None
+    """
+    kl_instances = get_instances(Klipper)
+    print_select_instance_count_dialog()
+    question = (
+        f"Number of"
+        f"{' additional' if len(kl_instances) > 0 else ''} "
+        f"Klipper instances to set up"
+    )
+    _input: int | None = get_number_input(question, 1, default=1, allow_go_back=True)
+    return _input
+
+
+def assign_custom_name(key: int, name_dict: Dict[int, str]) -> None:
+    existing_names = []
+    existing_names.extend(SUFFIX_BLACKLIST)
+    existing_names.extend(name_dict[n] for n in name_dict)
+    pattern = r"^[a-zA-Z0-9]+$"
+
+    question = f"Enter name for instance {key}"
+    name_dict[key] = get_string_input(question, exclude=existing_names, regex=pattern)
+
+
+def check_user_groups() -> None:
+    user_groups = [grp.getgrgid(gid).gr_name for gid in os.getgroups()]
+    missing_groups = [g for g in ["tty", "dialout"] if g not in user_groups]
+
+    if not missing_groups:
+        return
+
+    Logger.print_dialog(
+        DialogType.ATTENTION,
+        [
+            "Your current user is not in group:",
+            *[f"● {g}" for g in missing_groups],
+            "\n\n",
+            "It is possible that you won't be able to successfully connect and/or "
+            "flash the controller board without your user being a member of that "
+            "group. If you want to add the current user to the group(s) listed above, "
+            "answer with 'Y'. Else skip with 'n'.",
+            "\n\n",
+            "INFO:",
+            "Relog required for group assignments to take effect!",
+        ],
+    )
+
+    if not get_confirm(f"Add user '{CURRENT_USER}' to group(s) now?"):
+        log = "Skipped adding user to required groups. You might encounter issues."
+        Logger.warn(log)
+        return
+
+    try:
+        for group in missing_groups:
+            Logger.print_status(f"Adding user '{CURRENT_USER}' to group {group} ...")
+            command = ["sudo", "usermod", "-a", "-G", group, CURRENT_USER]
+            run(command, check=True)
+            Logger.print_ok(f"Group {group} assigned to user '{CURRENT_USER}'.")
+    except CalledProcessError as e:
+        Logger.print_error(f"Unable to add user to usergroups: {e}")
+        raise
+
+    log = "Remember to relog/restart this machine for the group(s) to be applied!"
+    Logger.print_warn(log)
+
+
+def handle_disruptive_system_packages() -> None:
+    services = []
+
+    command = ["systemctl", "is-enabled", "brltty"]
+    brltty_status = run(command, capture_output=True, text=True)
+
+    command = ["systemctl", "is-enabled", "brltty-udev"]
+    brltty_udev_status = run(command, capture_output=True, text=True)
+
+    command = ["systemctl", "is-enabled", "ModemManager"]
+    modem_manager_status = run(command, capture_output=True, text=True)
+
+    if "enabled" in brltty_status.stdout:
+        services.append("brltty")
+    if "enabled" in brltty_udev_status.stdout:
+        services.append("brltty-udev")
+    if "enabled" in modem_manager_status.stdout:
+        services.append("ModemManager")
+
+    for service in services if services else []:
+        try:
+            cmd_sysctl_service(service, "mask")
+        except CalledProcessError:
+            Logger.print_dialog(
+                DialogType.WARNING,
+                [
+                    f"KIAUH was unable to mask the {service} system service. "
+                    "Please fix the problem manually. Otherwise, this may have "
+                    "undesirable effects on the operation of Klipper."
+                ],
+            )
+
+
+def create_example_printer_cfg(
+    instance: Klipper, clients: List[BaseWebClient] | None = None
+) -> None:
+    Logger.print_status(f"Creating example printer.cfg in '{instance.base.cfg_dir}'")
+    if instance.cfg_file.is_file():
+        Logger.print_info(f"'{instance.cfg_file}' already exists.")
+        return
+
+    source = MODULE_PATH.joinpath("assets/printer.cfg")
+    target = instance.cfg_file
+    try:
+        shutil.copy(source, target)
+    except OSError as e:
+        Logger.print_error(f"Unable to create example printer.cfg:\n{e}")
+        return
+
+    scp = SimpleConfigParser()
+    scp.read_file(target)
+    scp.set_option("virtual_sdcard", "path", str(instance.base.gcodes_dir))
+
+    # include existing client configs in the example config
+    if clients is not None and len(clients) > 0:
+        for c in clients:
+            client_config = c.client_config
+            section = client_config.config_section
+            scp.add_section(section=section)
+            create_client_config_symlink(client_config, [instance])
+
+    scp.write_file(target)
+
+    Logger.print_ok(f"Example printer.cfg created in '{instance.base.cfg_dir}'")
+
+
+def backup_klipper_dir() -> None:
+    bm = BackupManager()
+    bm.backup_directory("klipper", source=KLIPPER_DIR, target=KLIPPER_BACKUP_DIR)
+    bm.backup_directory("klippy-env", source=KLIPPER_ENV_DIR, target=KLIPPER_BACKUP_DIR)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/menus/klipper_remove_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/menus/klipper_remove_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper/menus/klipper_remove_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper/menus/klipper_remove_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,118 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import Type
+
+from components.klipper import klipper_remove
+from core.constants import COLOR_CYAN, COLOR_RED, RESET_FORMAT
+from core.menus import FooterType, Option
+from core.menus.base_menu import BaseMenu
+
+
+# noinspection PyUnusedLocal
+class KlipperRemoveMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+        self.footer_type = FooterType.BACK
+        self.remove_klipper_service = False
+        self.remove_klipper_dir = False
+        self.remove_klipper_env = False
+        self.selection_state = False
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.remove_menu import RemoveMenu
+
+        self.previous_menu = previous_menu if previous_menu is not None else RemoveMenu
+
+    def set_options(self) -> None:
+        self.options = {
+            "a": Option(method=self.toggle_all),
+            "1": Option(method=self.toggle_remove_klipper_service),
+            "2": Option(method=self.toggle_remove_klipper_dir),
+            "3": Option(method=self.toggle_remove_klipper_env),
+            "c": Option(method=self.run_removal_process),
+        }
+
+    def print_menu(self) -> None:
+        header = " [ Remove Klipper ] "
+        color = COLOR_RED
+        count = 62 - len(color) - len(RESET_FORMAT)
+        checked = f"[{COLOR_CYAN}x{RESET_FORMAT}]"
+        unchecked = "[ ]"
+        o1 = checked if self.remove_klipper_service else unchecked
+        o2 = checked if self.remove_klipper_dir else unchecked
+        o3 = checked if self.remove_klipper_env else unchecked
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ Enter a number and hit enter to select / deselect     ║
+            ║ the specific option for removal.                      ║
+            ╟───────────────────────────────────────────────────────╢
+            ║  a) {self._get_selection_state_str():37}             ║
+            ╟───────────────────────────────────────────────────────╢
+            ║  1) {o1} Remove Service                                ║
+            ║  2) {o2} Remove Local Repository                       ║
+            ║  3) {o3} Remove Python Environment                     ║
+            ╟───────────────────────────────────────────────────────╢
+            ║  C) Continue                                          ║
+            ╟───────────────────────────────────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def toggle_all(self, **kwargs) -> None:
+        self.selection_state = not self.selection_state
+        self.remove_klipper_service = self.selection_state
+        self.remove_klipper_dir = self.selection_state
+        self.remove_klipper_env = self.selection_state
+
+    def toggle_remove_klipper_service(self, **kwargs) -> None:
+        self.remove_klipper_service = not self.remove_klipper_service
+
+    def toggle_remove_klipper_dir(self, **kwargs) -> None:
+        self.remove_klipper_dir = not self.remove_klipper_dir
+
+    def toggle_remove_klipper_env(self, **kwargs) -> None:
+        self.remove_klipper_env = not self.remove_klipper_env
+
+    def run_removal_process(self, **kwargs) -> None:
+        if (
+            not self.remove_klipper_service
+            and not self.remove_klipper_dir
+            and not self.remove_klipper_env
+        ):
+            error = f"{COLOR_RED}Nothing selected! Select options to remove first.{RESET_FORMAT}"
+            print(error)
+            return
+
+        klipper_remove.run_klipper_removal(
+            self.remove_klipper_service,
+            self.remove_klipper_dir,
+            self.remove_klipper_env,
+        )
+
+        self.remove_klipper_service = False
+        self.remove_klipper_dir = False
+        self.remove_klipper_env = False
+
+        self._go_back()
+
+    def _get_selection_state_str(self) -> str:
+        return (
+            "Select everything" if not self.selection_state else "Deselect everything"
+        )
+
+    def _go_back(self, **kwargs) -> None:
+        if self.previous_menu is not None:
+            self.previous_menu().run()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/firmware_utils.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/firmware_utils.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/firmware_utils.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/firmware_utils.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,196 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+import re
+from subprocess import (
+    DEVNULL,
+    PIPE,
+    STDOUT,
+    CalledProcessError,
+    Popen,
+    check_output,
+    run,
+)
+from typing import List
+
+from components.klipper import KLIPPER_DIR
+from components.klipper.klipper import Klipper
+from components.klipper_firmware import SD_FLASH_SCRIPT
+from components.klipper_firmware.flash_options import (
+    FlashMethod,
+    FlashOptions,
+)
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import Logger
+from utils.instance_utils import get_instances
+from utils.sys_utils import log_process
+
+
+def find_firmware_file() -> bool:
+    target = KLIPPER_DIR.joinpath("out")
+    target_exists: bool = target.exists()
+
+    f1 = "klipper.elf.hex"
+    f2 = "klipper.elf"
+    f3 = "klipper.bin"
+    f4 = "klipper.uf2"
+    fw_file_exists: bool = (
+        (target.joinpath(f1).exists() and target.joinpath(f2).exists())
+        or target.joinpath(f3).exists()
+        or target.joinpath(f4).exists()
+    )
+
+    return target_exists and fw_file_exists
+
+
+def find_usb_device_by_id() -> List[str]:
+    try:
+        command = "find /dev/serial/by-id/*"
+        output = check_output(command, shell=True, text=True, stderr=DEVNULL)
+        return output.splitlines()
+    except CalledProcessError as e:
+        Logger.print_error("Unable to find a USB device!")
+        Logger.print_error(e, prefix=False)
+        return []
+
+
+def find_uart_device() -> List[str]:
+    try:
+        cmd = "find /dev -maxdepth 1"
+        output = check_output(cmd, shell=True, text=True, stderr=DEVNULL)
+        device_list = []
+        if output:
+            pattern = r"^/dev/tty(AMA0|S0)$"
+            devices = output.splitlines()
+            device_list = [d for d in devices if re.search(pattern, d)]
+        return device_list
+    except CalledProcessError as e:
+        Logger.print_error("Unable to find a UART device!")
+        Logger.print_error(e, prefix=False)
+        return []
+
+
+def find_usb_dfu_device() -> List[str]:
+    try:
+        output = check_output("lsusb", shell=True, text=True, stderr=DEVNULL)
+        device_list = []
+        if output:
+            devices = output.splitlines()
+            device_list = [d.split(" ")[5] for d in devices if "DFU" in d]
+        return device_list
+
+    except CalledProcessError as e:
+        Logger.print_error("Unable to find a USB DFU device!")
+        Logger.print_error(e, prefix=False)
+        return []
+
+
+def get_sd_flash_board_list() -> List[str]:
+    if not KLIPPER_DIR.exists() or not SD_FLASH_SCRIPT.exists():
+        return []
+
+    try:
+        cmd = f"{SD_FLASH_SCRIPT} -l"
+        blist: List[str] = check_output(cmd, shell=True, text=True).splitlines()[1:]
+        return blist
+    except CalledProcessError as e:
+        Logger.print_error(f"An unexpected error occured:\n{e}")
+        return []
+
+
+def start_flash_process(flash_options: FlashOptions) -> None:
+    Logger.print_status(f"Flashing '{flash_options.selected_mcu}' ...")
+    try:
+        if not flash_options.flash_method:
+            raise Exception("Missing value for flash_method!")
+        if not flash_options.flash_command:
+            raise Exception("Missing value for flash_command!")
+        if not flash_options.selected_mcu:
+            raise Exception("Missing value for selected_mcu!")
+        if not flash_options.connection_type:
+            raise Exception("Missing value for connection_type!")
+        if (
+            flash_options.flash_method == FlashMethod.SD_CARD
+            and not flash_options.selected_board
+        ):
+            raise Exception("Missing value for selected_board!")
+
+        if flash_options.flash_method is FlashMethod.REGULAR:
+            cmd = [
+                "make",
+                flash_options.flash_command.value,
+                f"FLASH_DEVICE={flash_options.selected_mcu}",
+            ]
+        elif flash_options.flash_method is FlashMethod.SD_CARD:
+            if not SD_FLASH_SCRIPT.exists():
+                raise Exception("Unable to find Klippers sdcard flash script!")
+            cmd = [
+                SD_FLASH_SCRIPT.as_posix(),
+                f"-b {flash_options.selected_baudrate}",
+                flash_options.selected_mcu,
+                flash_options.selected_board,
+            ]
+        else:
+            raise Exception("Invalid value for flash_method!")
+
+        instances = get_instances(Klipper)
+        InstanceManager.stop_all(instances)
+
+        process = Popen(cmd, cwd=KLIPPER_DIR, stdout=PIPE, stderr=STDOUT, text=True)
+        log_process(process)
+
+        InstanceManager.start_all(instances)
+
+        rc = process.returncode
+        if rc != 0:
+            raise Exception(f"Flashing failed with returncode: {rc}")
+        else:
+            Logger.print_ok("Flashing successfull!", start="\n", end="\n\n")
+
+    except (Exception, CalledProcessError):
+        Logger.print_error("Flashing failed!", start="\n")
+        Logger.print_error("See the console output above!", end="\n\n")
+
+
+def run_make_clean() -> None:
+    try:
+        run(
+            "make clean",
+            cwd=KLIPPER_DIR,
+            shell=True,
+            check=True,
+        )
+    except CalledProcessError as e:
+        Logger.print_error(f"Unexpected error:\n{e}")
+        raise
+
+
+def run_make_menuconfig() -> None:
+    try:
+        run(
+            "make PYTHON=python3 menuconfig",
+            cwd=KLIPPER_DIR,
+            shell=True,
+            check=True,
+        )
+    except CalledProcessError as e:
+        Logger.print_error(f"Unexpected error:\n{e}")
+        raise
+
+
+def run_make() -> None:
+    try:
+        run(
+            "make PYTHON=python3",
+            cwd=KLIPPER_DIR,
+            shell=True,
+            check=True,
+        )
+    except CalledProcessError as e:
+        Logger.print_error(f"Unexpected error:\n{e}")
+        raise
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/flash_options.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/flash_options.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/flash_options.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/flash_options.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,105 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from dataclasses import field
+from enum import Enum
+from typing import List
+
+
+class FlashMethod(Enum):
+    REGULAR = "Regular"
+    SD_CARD = "SD Card"
+
+
+class FlashCommand(Enum):
+    FLASH = "flash"
+    SERIAL_FLASH = "serialflash"
+
+
+class ConnectionType(Enum):
+    USB = "USB"
+    USB_DFU = "USB (DFU)"
+    UART = "UART"
+
+
+class FlashOptions:
+    _instance = None
+    _flash_method: FlashMethod | None = None
+    _flash_command: FlashCommand | None = None
+    _connection_type: ConnectionType | None = None
+    _mcu_list: List[str] = field(default_factory=list)
+    _selected_mcu: str = ""
+    _selected_board: str = ""
+    _selected_baudrate: int = 250000
+
+    def __new__(cls, *args, **kwargs):
+        if not cls._instance:
+            cls._instance = super(FlashOptions, cls).__new__(cls, *args, **kwargs)
+        return cls._instance
+
+    @classmethod
+    def destroy(cls) -> None:
+        cls._instance = None
+
+    @property
+    def flash_method(self) -> FlashMethod | None:
+        return self._flash_method
+
+    @flash_method.setter
+    def flash_method(self, value: FlashMethod | None):
+        self._flash_method = value
+
+    @property
+    def flash_command(self) -> FlashCommand | None:
+        return self._flash_command
+
+    @flash_command.setter
+    def flash_command(self, value: FlashCommand | None):
+        self._flash_command = value
+
+    @property
+    def connection_type(self) -> ConnectionType | None:
+        return self._connection_type
+
+    @connection_type.setter
+    def connection_type(self, value: ConnectionType | None):
+        self._connection_type = value
+
+    @property
+    def mcu_list(self) -> List[str]:
+        return self._mcu_list
+
+    @mcu_list.setter
+    def mcu_list(self, value: List[str]) -> None:
+        self._mcu_list = value
+
+    @property
+    def selected_mcu(self) -> str:
+        return self._selected_mcu
+
+    @selected_mcu.setter
+    def selected_mcu(self, value: str) -> None:
+        self._selected_mcu = value
+
+    @property
+    def selected_board(self) -> str:
+        return self._selected_board
+
+    @selected_board.setter
+    def selected_board(self, value: str) -> None:
+        self._selected_board = value
+
+    @property
+    def selected_baudrate(self) -> int:
+        return self._selected_baudrate
+
+    @selected_baudrate.setter
+    def selected_baudrate(self, value: int) -> None:
+        self._selected_baudrate = value
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,12 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from components.klipper import KLIPPER_DIR
+
+SD_FLASH_SCRIPT = KLIPPER_DIR.joinpath("scripts/flash-sdcard.sh")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/menus/klipper_build_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/menus/klipper_build_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/menus/klipper_build_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/menus/klipper_build_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,115 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import List, Set, Type
+
+from components.klipper import KLIPPER_DIR
+from components.klipper_firmware.firmware_utils import (
+    run_make,
+    run_make_clean,
+    run_make_menuconfig,
+)
+from core.constants import COLOR_CYAN, COLOR_GREEN, COLOR_RED, RESET_FORMAT
+from core.logger import Logger
+from core.menus import Option
+from core.menus.base_menu import BaseMenu
+from utils.sys_utils import (
+    check_package_install,
+    install_system_packages,
+    update_system_package_lists,
+)
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class KlipperBuildFirmwareMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+        self.deps: Set[str] = {"build-essential", "dpkg-dev", "make"}
+        self.missing_deps: List[str] = check_package_install(self.deps)
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.advanced_menu import AdvancedMenu
+
+        self.previous_menu = (
+            previous_menu if previous_menu is not None else AdvancedMenu
+        )
+
+    def set_options(self) -> None:
+        if len(self.missing_deps) == 0:
+            self.input_label_txt = "Press ENTER to continue"
+            self.default_option = Option(method=self.start_build_process)
+        else:
+            self.input_label_txt = "Press ENTER to install dependencies"
+            self.default_option = Option(method=self.install_missing_deps)
+
+    def print_menu(self) -> None:
+        header = " [ Build Firmware Menu ] "
+        color = COLOR_CYAN
+        count = 62 - len(color) - len(RESET_FORMAT)
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ The following dependencies are required:              ║
+            ║                                                       ║
+            """
+        )[1:]
+
+        for d in self.deps:
+            status_ok = f"{COLOR_GREEN}*INSTALLED*{RESET_FORMAT}"
+            status_missing = f"{COLOR_RED}*MISSING*{RESET_FORMAT}"
+            status = status_missing if d in self.missing_deps else status_ok
+            padding = 39 - len(d) + len(status) + (len(status_ok) - len(status))
+            d = f" {COLOR_CYAN}● {d}{RESET_FORMAT}"
+            menu += f"║ {d}{status:>{padding}} ║\n"
+        menu += "║                                                       ║\n"
+
+        if len(self.missing_deps) == 0:
+            line = f"{COLOR_GREEN}All dependencies are met!{RESET_FORMAT}"
+        else:
+            line = f"{COLOR_RED}Dependencies are missing!{RESET_FORMAT}"
+
+        menu += f"║ {line:<62} ║\n"
+        menu += "╟───────────────────────────────────────────────────────╢\n"
+
+        print(menu, end="")
+
+    def install_missing_deps(self, **kwargs) -> None:
+        try:
+            update_system_package_lists(silent=False)
+            Logger.print_status("Installing system packages...")
+            install_system_packages(self.missing_deps)
+        except Exception as e:
+            Logger.print_error(e)
+            Logger.print_error("Installing dependencies failed!")
+        finally:
+            # restart this menu
+            KlipperBuildFirmwareMenu().run()
+
+    def start_build_process(self, **kwargs) -> None:
+        try:
+            run_make_clean()
+            run_make_menuconfig()
+            run_make()
+
+            Logger.print_ok("Firmware successfully built!")
+            Logger.print_ok(f"Firmware file located in '{KLIPPER_DIR}/out'!")
+
+        except Exception as e:
+            Logger.print_error(e)
+            Logger.print_error("Building Klipper Firmware failed!")
+
+        finally:
+            if self.previous_menu is not None:
+                self.previous_menu().run()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/menus/klipper_flash_error_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/menus/klipper_flash_error_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/menus/klipper_flash_error_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/menus/klipper_flash_error_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,111 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import Type
+
+from components.klipper_firmware.flash_options import FlashMethod, FlashOptions
+from core.constants import COLOR_RED, RESET_FORMAT
+from core.menus import FooterType, Option
+from core.menus.base_menu import BaseMenu
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class KlipperNoFirmwareErrorMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+
+        self.flash_options = FlashOptions()
+        self.footer_type = FooterType.BLANK
+        self.input_label_txt = "Press ENTER to go back to [Advanced Menu]"
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        self.previous_menu = previous_menu
+
+    def set_options(self) -> None:
+        self.default_option = Option(method=self.go_back)
+
+    def print_menu(self) -> None:
+        header = "!!! NO FIRMWARE FILE FOUND !!!"
+        color = COLOR_RED
+        count = 62 - len(color) - len(RESET_FORMAT)
+        line1 = f"{color}Unable to find a compiled firmware file!{RESET_FORMAT}"
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ {line1:<62} ║
+            ║                                                       ║
+            ║ Make sure, that:                                      ║
+            ║ ● the folder '~/klipper/out' and its content exist    ║
+            ║ ● the folder contains the following file:             ║
+            """
+        )[1:]
+
+        if self.flash_options.flash_method is FlashMethod.REGULAR:
+            menu += "║   ● 'klipper.elf'                                     ║\n"
+            menu += "║   ● 'klipper.elf.hex'                                 ║\n"
+        else:
+            menu += "║   ● 'klipper.bin'                                     ║\n"
+
+        print(menu, end="")
+
+    def go_back(self, **kwargs) -> None:
+        from core.menus.advanced_menu import AdvancedMenu
+
+        AdvancedMenu().run()
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class KlipperNoBoardTypesErrorMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+        self.footer_type = FooterType.BLANK
+        self.input_label_txt = "Press ENTER to go back to [Main Menu]"
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        self.previous_menu = previous_menu
+
+    def set_options(self) -> None:
+        self.default_option = Option(method=self.go_back)
+
+    def print_menu(self) -> None:
+        header = "!!! ERROR GETTING BOARD LIST !!!"
+        color = COLOR_RED
+        count = 62 - len(color) - len(RESET_FORMAT)
+        line1 = f"{color}Reading the list of supported boards failed!{RESET_FORMAT}"
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ {line1:<62} ║
+            ║                                                       ║
+            ║ Make sure, that:                                      ║
+            ║ ● the folder '~/klipper' and all its content exist    ║
+            ║ ● the content of folder '~/klipper' is not currupted  ║
+            ║ ● the file '~/klipper/scripts/flash-sd.py' exist      ║
+            ║ ● your current user has access to those files/folders ║
+            ║                                                       ║
+            ║ If in doubt or this process continues to fail, please ║
+            ║ consider to download Klipper again.                   ║
+            """
+        )[1:]
+        print(menu, end="")
+
+    def go_back(self, **kwargs) -> None:
+        from core.menus.main_menu import MainMenu
+
+        MainMenu().run()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/menus/klipper_flash_help_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/menus/klipper_flash_help_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/menus/klipper_flash_help_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/menus/klipper_flash_help_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,170 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import Type
+
+from core.constants import COLOR_CYAN, COLOR_YELLOW, RESET_FORMAT
+from core.menus.base_menu import BaseMenu
+
+
+# noinspection DuplicatedCode
+class KlipperFlashMethodHelpMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from components.klipper_firmware.menus.klipper_flash_menu import (
+            KlipperFlashMethodMenu,
+        )
+
+        self.previous_menu = (
+            previous_menu if previous_menu is not None else KlipperFlashMethodMenu
+        )
+
+    def set_options(self) -> None:
+        pass
+
+    def print_menu(self) -> None:
+        header = " < ? > Help: Flash MCU < ? > "
+        color = COLOR_YELLOW
+        count = 62 - len(color) - len(RESET_FORMAT)
+        subheader1 = f"{COLOR_CYAN}Regular flashing method:{RESET_FORMAT}"
+        subheader2 = f"{COLOR_CYAN}Updating via SD-Card Update:{RESET_FORMAT}"
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ {subheader1:<62} ║
+            ║ The default method to flash controller boards which   ║
+            ║ are connected and updated over USB and not by placing ║
+            ║ a compiled firmware file onto an internal SD-Card.    ║
+            ║                                                       ║
+            ║ Common controllers that get flashed that way are:     ║
+            ║ - Arduino Mega 2560                                   ║
+            ║ - Fysetc F6 / S6 (used without a Display + SD-Slot)   ║
+            ║                                                       ║
+            ║ {subheader2:<62} ║
+            ║ Many popular controller boards ship with a bootloader ║
+            ║ capable of updating the firmware via SD-Card.         ║
+            ║ Choose this method if your controller board supports  ║
+            ║ this way of updating. This method ONLY works for up-  ║
+            ║ grading firmware. The initial flashing procedure must ║
+            ║ be done manually per the instructions that apply to   ║
+            ║ your controller board.                                ║
+            ║                                                       ║
+            ║ Common controllers that can be flashed that way are:  ║
+            ║ - BigTreeTech SKR 1.3 / 1.4 (Turbo) / E3 / Mini E3    ║
+            ║ - Fysetc F6 / S6 (used with a Display + SD-Slot)      ║
+            ║ - Fysetc Spider                                       ║
+            ║                                                       ║
+            ╟───────────────────────────────────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+
+# noinspection DuplicatedCode
+class KlipperFlashCommandHelpMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from components.klipper_firmware.menus.klipper_flash_menu import (
+            KlipperFlashCommandMenu,
+        )
+
+        self.previous_menu = (
+            previous_menu if previous_menu is not None else KlipperFlashCommandMenu
+        )
+
+    def set_options(self) -> None:
+        pass
+
+    def print_menu(self) -> None:
+        header = " < ? > Help: Flash MCU < ? > "
+        color = COLOR_YELLOW
+        count = 62 - len(color) - len(RESET_FORMAT)
+        subheader1 = f"{COLOR_CYAN}make flash:{RESET_FORMAT}"
+        subheader2 = f"{COLOR_CYAN}make serialflash:{RESET_FORMAT}"
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ {subheader1:<62} ║
+            ║ The default command to flash controller board, it     ║
+            ║ will detect selected microcontroller and use suitable ║
+            ║ tool for flashing it.                                 ║
+            ║                                                       ║
+            ║ {subheader2:<62} ║
+            ║ Special command to flash STM32 microcontrollers in    ║
+            ║ DFU mode but connected via serial. stm32flash command ║
+            ║ will be used internally.                              ║
+            ║                                                       ║
+            """
+        )[1:]
+        print(menu, end="")
+
+
+# noinspection DuplicatedCode
+class KlipperMcuConnectionHelpMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from components.klipper_firmware.menus.klipper_flash_menu import (
+            KlipperSelectMcuConnectionMenu,
+        )
+
+        self.previous_menu = (
+            previous_menu
+            if previous_menu is not None
+            else KlipperSelectMcuConnectionMenu
+        )
+
+    def set_options(self) -> None:
+        pass
+
+    def print_menu(self) -> None:
+        header = " < ? > Help: Flash MCU < ? > "
+        color = COLOR_YELLOW
+        count = 62 - len(color) - len(RESET_FORMAT)
+        subheader1 = f"{COLOR_CYAN}USB:{RESET_FORMAT}"
+        subheader2 = f"{COLOR_CYAN}UART:{RESET_FORMAT}"
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ {subheader1:<62} ║
+            ║ Selecting USB as the connection method will scan the  ║
+            ║ USB ports for connected controller boards. This will  ║
+            ║ be similar to the 'ls /dev/serial/by-id/*' command    ║
+            ║ suggested by the official Klipper documentation for   ║
+            ║ determining successfull USB connections!              ║
+            ║                                                       ║
+            ║ {subheader2:<62} ║
+            ║ Selecting UART as the connection method will list all ║
+            ║ possible UART serial ports. Note: This method ALWAYS  ║
+            ║ returns something as it seems impossible to determine ║
+            ║ if a valid Klipper controller board is connected or   ║
+            ║ not. Because of that, you MUST know which UART serial ║
+            ║ port your controller board is connected to when using ║
+            ║ this connection method.                               ║
+            ║                                                       ║
+            ╟───────────────────────────────────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/menus/klipper_flash_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/menus/klipper_flash_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipper_firmware/menus/klipper_flash_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipper_firmware/menus/klipper_flash_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,471 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+import time
+from typing import Type
+
+from components.klipper_firmware.firmware_utils import (
+    find_firmware_file,
+    find_uart_device,
+    find_usb_device_by_id,
+    find_usb_dfu_device,
+    get_sd_flash_board_list,
+    start_flash_process,
+)
+from components.klipper_firmware.flash_options import (
+    ConnectionType,
+    FlashCommand,
+    FlashMethod,
+    FlashOptions,
+)
+from components.klipper_firmware.menus.klipper_flash_error_menu import (
+    KlipperNoBoardTypesErrorMenu,
+    KlipperNoFirmwareErrorMenu,
+)
+from components.klipper_firmware.menus.klipper_flash_help_menu import (
+    KlipperFlashCommandHelpMenu,
+    KlipperFlashMethodHelpMenu,
+    KlipperMcuConnectionHelpMenu,
+)
+from core.constants import COLOR_CYAN, COLOR_RED, COLOR_YELLOW, RESET_FORMAT
+from core.logger import DialogType, Logger
+from core.menus import FooterType, Option
+from core.menus.base_menu import BaseMenu
+from utils.input_utils import get_number_input
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class KlipperFlashMethodMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.help_menu = KlipperFlashMethodHelpMenu
+        self.input_label_txt = "Select flash method"
+        self.footer_type = FooterType.BACK_HELP
+        self.flash_options = FlashOptions()
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.advanced_menu import AdvancedMenu
+
+        self.previous_menu = (
+            previous_menu if previous_menu is not None else AdvancedMenu
+        )
+
+    def set_options(self) -> None:
+        self.options = {
+            "1": Option(self.select_regular),
+            "2": Option(self.select_sdcard),
+        }
+
+    def print_menu(self) -> None:
+        header = " [ MCU Flash Menu ] "
+        subheader = f"{COLOR_YELLOW}ATTENTION:{RESET_FORMAT}"
+        subline1 = f"{COLOR_YELLOW}Make sure to select the correct method for the  MCU!{RESET_FORMAT}"
+        subline2 = f"{COLOR_YELLOW}Not all MCUs support both methods!{RESET_FORMAT}"
+
+        color = COLOR_CYAN
+        count = 62 - len(color) - len(RESET_FORMAT)
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ Select the flash method for flashing the MCU.         ║
+            ║                                                       ║
+            ║ {subheader:<62} ║
+            ║ {subline1:<62} ║
+            ║ {subline2:<62} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ 1) Regular flashing method                            ║
+            ║ 2) Updating via SD-Card Update                        ║
+            ╟───────────────────────────┬───────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def select_regular(self, **kwargs):
+        self.flash_options.flash_method = FlashMethod.REGULAR
+        self.goto_next_menu()
+
+    def select_sdcard(self, **kwargs):
+        self.flash_options.flash_method = FlashMethod.SD_CARD
+        self.goto_next_menu()
+
+    def goto_next_menu(self, **kwargs):
+        if find_firmware_file():
+            KlipperFlashCommandMenu(previous_menu=self.__class__).run()
+        else:
+            KlipperNoFirmwareErrorMenu().run()
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class KlipperFlashCommandMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.help_menu = KlipperFlashCommandHelpMenu
+        self.input_label_txt = "Select flash command"
+        self.footer_type = FooterType.BACK_HELP
+        self.flash_options = FlashOptions()
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        self.previous_menu = (
+            previous_menu if previous_menu is not None else KlipperFlashMethodMenu
+        )
+
+    def set_options(self) -> None:
+        self.options = {
+            "1": Option(self.select_flash),
+            "2": Option(self.select_serialflash),
+        }
+        self.default_option = Option(self.select_flash)
+
+    def print_menu(self) -> None:
+        menu = textwrap.dedent(
+            """
+            ╔═══════════════════════════════════════════════════════╗
+            ║ Which flash command to use for flashing the MCU?      ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ 1) make flash (default)                               ║
+            ║ 2) make serialflash (stm32flash)                      ║
+            ╟───────────────────────────┬───────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def select_flash(self, **kwargs):
+        self.flash_options.flash_command = FlashCommand.FLASH
+        self.goto_next_menu()
+
+    def select_serialflash(self, **kwargs):
+        self.flash_options.flash_command = FlashCommand.SERIAL_FLASH
+        self.goto_next_menu()
+
+    def goto_next_menu(self, **kwargs):
+        KlipperSelectMcuConnectionMenu(previous_menu=self.__class__).run()
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class KlipperSelectMcuConnectionMenu(BaseMenu):
+    def __init__(
+        self, previous_menu: Type[BaseMenu] | None = None, standalone: bool = False
+    ):
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+        self.__standalone = standalone
+        self.help_menu = KlipperMcuConnectionHelpMenu
+        self.input_label_txt = "Select connection type"
+        self.footer_type = FooterType.BACK_HELP
+        self.flash_options = FlashOptions()
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        self.previous_menu = (
+            previous_menu if previous_menu is not None else KlipperFlashCommandMenu
+        )
+
+    def set_options(self) -> None:
+        self.options = {
+            "1": Option(method=self.select_usb),
+            "2": Option(method=self.select_dfu),
+            "3": Option(method=self.select_usb_dfu),
+        }
+
+    def print_menu(self) -> None:
+        header = "Make sure that the controller board is connected now!"
+        color = COLOR_YELLOW
+        count = 62 - len(color) - len(RESET_FORMAT)
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ How is the controller board connected to the host?    ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ 1) USB                                                ║
+            ║ 2) UART                                               ║
+            ║ 3) USB (DFU mode)                                     ║
+            ╟───────────────────────────┬───────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def select_usb(self, **kwargs):
+        self.flash_options.connection_type = ConnectionType.USB
+        self.get_mcu_list()
+
+    def select_dfu(self, **kwargs):
+        self.flash_options.connection_type = ConnectionType.UART
+        self.get_mcu_list()
+
+    def select_usb_dfu(self, **kwargs):
+        self.flash_options.connection_type = ConnectionType.USB_DFU
+        self.get_mcu_list()
+
+    def get_mcu_list(self, **kwargs):
+        conn_type = self.flash_options.connection_type
+
+        if conn_type is ConnectionType.USB:
+            Logger.print_status("Identifying MCU connected via USB ...")
+            self.flash_options.mcu_list = find_usb_device_by_id()
+        elif conn_type is ConnectionType.UART:
+            Logger.print_status("Identifying MCU possibly connected via UART ...")
+            self.flash_options.mcu_list = find_uart_device()
+        elif conn_type is ConnectionType.USB_DFU:
+            Logger.print_status("Identifying MCU connected via USB in DFU mode ...")
+            self.flash_options.mcu_list = find_usb_dfu_device()
+
+        if len(self.flash_options.mcu_list) < 1:
+            Logger.print_warn("No MCUs found!")
+            Logger.print_warn("Make sure they are connected and repeat this step.")
+
+        # if standalone is True, we only display the MCUs to the user and return
+        if self.__standalone and len(self.flash_options.mcu_list) > 0:
+            Logger.print_ok("The following MCUs were found:", prefix=False)
+            for i, mcu in enumerate(self.flash_options.mcu_list):
+                print(f"   ● MCU #{i}: {COLOR_CYAN}{mcu}{RESET_FORMAT}")
+            time.sleep(3)
+            return
+
+        self.goto_next_menu()
+
+    def goto_next_menu(self, **kwargs):
+        KlipperSelectMcuIdMenu(previous_menu=self.__class__).run()
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class KlipperSelectMcuIdMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.flash_options = FlashOptions()
+        self.mcu_list = self.flash_options.mcu_list
+        self.input_label_txt = "Select MCU to flash"
+        self.footer_type = FooterType.BACK
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        self.previous_menu = (
+            previous_menu
+            if previous_menu is not None
+            else KlipperSelectMcuConnectionMenu
+        )
+
+    def set_options(self) -> None:
+        self.options = {
+            f"{i}": Option(self.flash_mcu, f"{i}") for i in range(len(self.mcu_list))
+        }
+
+    def print_menu(self) -> None:
+        header = "!!! ATTENTION !!!"
+        header2 = f"[{COLOR_CYAN}List of detected MCUs{RESET_FORMAT}]"
+        color = COLOR_RED
+        count = 62 - len(color) - len(RESET_FORMAT)
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ Make sure, to select the correct MCU!                 ║
+            ║ ONLY flash a firmware created for the respective MCU! ║
+            ║                                                       ║
+            ╟{header2:─^64}╢
+            ║                                                       ║
+            """
+        )[1:]
+
+        for i, mcu in enumerate(self.mcu_list):
+            mcu = mcu.split("/")[-1]
+            menu += f"║ {i}) {COLOR_CYAN}{mcu:<51}{RESET_FORMAT}║\n"
+
+        menu += textwrap.dedent(
+            """
+            ║                                                       ║
+            ╟───────────────────────────────────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def flash_mcu(self, **kwargs):
+        try:
+            index: int | None = kwargs.get("opt_index", None)
+            if index is None:
+                raise Exception("opt_index is None")
+
+            index = int(index)
+            selected_mcu = self.mcu_list[index]
+            self.flash_options.selected_mcu = selected_mcu
+
+            if self.flash_options.flash_method == FlashMethod.SD_CARD:
+                KlipperSelectSDFlashBoardMenu(previous_menu=self.__class__).run()
+            elif self.flash_options.flash_method == FlashMethod.REGULAR:
+                KlipperFlashOverviewMenu(previous_menu=self.__class__).run()
+        except Exception as e:
+            Logger.print_error(e)
+            Logger.print_error("Flashing failed!")
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class KlipperSelectSDFlashBoardMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.flash_options = FlashOptions()
+        self.available_boards = get_sd_flash_board_list()
+        self.input_label_txt = "Select board type"
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        self.previous_menu = (
+            previous_menu if previous_menu is not None else KlipperSelectMcuIdMenu
+        )
+
+    def set_options(self) -> None:
+        self.options = {
+            f"{i}": Option(self.board_select, f"{i}")
+            for i in range(len(self.available_boards))
+        }
+
+    def print_menu(self) -> None:
+        if len(self.available_boards) < 1:
+            KlipperNoBoardTypesErrorMenu().run()
+        else:
+            menu = textwrap.dedent(
+                """
+                ╔═══════════════════════════════════════════════════════╗
+                ║ Please select the type of board that corresponds to   ║
+                ║ the currently selected MCU ID you chose before.       ║
+                ║                                                       ║
+                ║ The following boards are currently supported:         ║
+                ╟───────────────────────────────────────────────────────╢
+                """
+            )[1:]
+
+            for i, board in enumerate(self.available_boards):
+                line = f" {i}) {board}"
+                menu += f"║{line:<55}║\n"
+            menu += "╟───────────────────────────────────────────────────────╢"
+            print(menu, end="")
+
+    def board_select(self, **kwargs):
+        try:
+            index: int | None = kwargs.get("opt_index", None)
+            if index is None:
+                raise Exception("opt_index is None")
+
+            index = int(index)
+            self.flash_options.selected_board = self.available_boards[index]
+            self.baudrate_select()
+        except Exception as e:
+            Logger.print_error(e)
+            Logger.print_error("Board selection failed!")
+
+    def baudrate_select(self, **kwargs):
+        Logger.print_dialog(
+            DialogType.CUSTOM,
+            [
+                "If your board is flashed with firmware that connects "
+                "at a custom baud rate, please change it now.",
+                "\n\n",
+                "If you are unsure, stick to the default 250000!",
+            ],
+        )
+        self.flash_options.selected_baudrate = get_number_input(
+            question="Please set the baud rate",
+            default=250000,
+            min_count=0,
+            allow_go_back=True,
+        )
+        KlipperFlashOverviewMenu(previous_menu=self.__class__).run()
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class KlipperFlashOverviewMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.flash_options = FlashOptions()
+        self.input_label_txt = "Perform action (default=Y)"
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+
+    def set_options(self) -> None:
+        self.options = {
+            "y": Option(self.execute_flash),
+            "n": Option(self.abort_process),
+        }
+
+        self.default_option = Option(self.execute_flash)
+
+    def print_menu(self) -> None:
+        header = "!!! ATTENTION !!!"
+        color = COLOR_RED
+        count = 62 - len(color) - len(RESET_FORMAT)
+
+        method = self.flash_options.flash_method.value
+        command = self.flash_options.flash_command.value
+        conn_type = self.flash_options.connection_type.value
+        mcu = self.flash_options.selected_mcu.split("/")[-1]
+        board = self.flash_options.selected_board
+        baudrate = self.flash_options.selected_baudrate
+        subheader = f"[{COLOR_CYAN}Overview{RESET_FORMAT}]"
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ Before contuining the flashing process, please check  ║
+            ║ if all parameters were set correctly! Once you made   ║
+            ║ sure everything is correct, start the process. If any ║
+            ║ parameter needs to be changed, you can go back (B)    ║
+            ║ step by step or abort and start from the beginning.   ║
+            ║{subheader:─^64}║
+            ║                                                       ║
+            """
+        )[1:]
+
+        menu += textwrap.dedent(
+            f"""
+            ║ MCU: {COLOR_CYAN}{mcu:<48}{RESET_FORMAT} ║
+            ║ Connection: {COLOR_CYAN}{conn_type:<41}{RESET_FORMAT} ║
+            ║ Flash method: {COLOR_CYAN}{method:<39}{RESET_FORMAT} ║
+            ║ Flash command: {COLOR_CYAN}{command:<38}{RESET_FORMAT} ║
+            """
+        )[1:]
+
+        if self.flash_options.flash_method is FlashMethod.SD_CARD:
+            menu += textwrap.dedent(
+                f"""
+                ║ Board type: {COLOR_CYAN}{board:<41}{RESET_FORMAT} ║
+                ║ Baudrate: {COLOR_CYAN}{baudrate:<43}{RESET_FORMAT} ║
+                """
+            )[1:]
+
+        menu += textwrap.dedent(
+            """
+            ║                                                       ║
+            ╟───────────────────────────────────────────────────────╢
+            ║  Y) Start flash process                               ║
+            ║  N) Abort - Return to Advanced Menu                   ║
+            ╟───────────────────────────────────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def execute_flash(self, **kwargs):
+        start_flash_process(self.flash_options)
+        Logger.print_info("Returning to MCU Flash Menu in 5 seconds ...")
+        time.sleep(5)
+        KlipperFlashMethodMenu().run()
+
+    def abort_process(self, **kwargs):
+        from core.menus.advanced_menu import AdvancedMenu
+
+        AdvancedMenu().run()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipperscreen/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipperscreen/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipperscreen/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipperscreen/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,34 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from pathlib import Path
+
+from core.backup_manager import BACKUP_ROOT_DIR
+from core.constants import SYSTEMD
+
+# repo
+KLIPPERSCREEN_REPO = "https://github.com/KlipperScreen/KlipperScreen.git"
+
+# names
+KLIPPERSCREEN_SERVICE_NAME = "KlipperScreen.service"
+KLIPPERSCREEN_UPDATER_SECTION_NAME = "update_manager KlipperScreen"
+KLIPPERSCREEN_LOG_NAME = "KlipperScreen.log"
+
+# directories
+KLIPPERSCREEN_DIR = Path.home().joinpath("KlipperScreen")
+KLIPPERSCREEN_ENV_DIR = Path.home().joinpath(".KlipperScreen-env")
+KLIPPERSCREEN_BACKUP_DIR = BACKUP_ROOT_DIR.joinpath("klipperscreen-backups")
+
+# files
+KLIPPERSCREEN_REQ_FILE = KLIPPERSCREEN_DIR.joinpath(
+    "scripts/KlipperScreen-requirements.txt"
+)
+KLIPPERSCREEN_INSTALL_SCRIPT = KLIPPERSCREEN_DIR.joinpath(
+    "scripts/KlipperScreen-install.sh"
+)
+KLIPPERSCREEN_SERVICE_FILE = SYSTEMD.joinpath(KLIPPERSCREEN_SERVICE_NAME)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipperscreen/klipperscreen.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipperscreen/klipperscreen.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/klipperscreen/klipperscreen.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/klipperscreen/klipperscreen.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,206 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+import shutil
+from pathlib import Path
+from subprocess import CalledProcessError, run
+from typing import List
+
+from components.klipper.klipper import Klipper
+from components.klipperscreen import (
+    KLIPPERSCREEN_BACKUP_DIR,
+    KLIPPERSCREEN_DIR,
+    KLIPPERSCREEN_ENV_DIR,
+    KLIPPERSCREEN_INSTALL_SCRIPT,
+    KLIPPERSCREEN_LOG_NAME,
+    KLIPPERSCREEN_REPO,
+    KLIPPERSCREEN_REQ_FILE,
+    KLIPPERSCREEN_SERVICE_FILE,
+    KLIPPERSCREEN_SERVICE_NAME,
+    KLIPPERSCREEN_UPDATER_SECTION_NAME,
+)
+from components.moonraker.moonraker import Moonraker
+from core.backup_manager.backup_manager import BackupManager
+from core.constants import SYSTEMD
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import DialogType, Logger
+from core.settings.kiauh_settings import KiauhSettings
+from core.types import ComponentStatus
+from utils.common import (
+    check_install_dependencies,
+    get_install_status,
+)
+from utils.config_utils import add_config_section, remove_config_section
+from utils.fs_utils import remove_with_sudo
+from utils.git_utils import (
+    git_clone_wrapper,
+    git_pull_wrapper,
+)
+from utils.input_utils import get_confirm
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    check_python_version,
+    cmd_sysctl_service,
+    install_python_requirements,
+    remove_system_service,
+)
+
+
+def install_klipperscreen() -> None:
+    Logger.print_status("Installing KlipperScreen ...")
+
+    if not check_python_version(3, 7):
+        return
+
+    mr_instances = get_instances(Moonraker)
+    if not mr_instances:
+        Logger.print_dialog(
+            DialogType.WARNING,
+            [
+                "Moonraker not found! KlipperScreen will not properly work "
+                "without a working Moonraker installation.",
+                "\n\n",
+                "KlipperScreens update manager configuration for Moonraker "
+                "will not be added to any moonraker.conf.",
+            ],
+        )
+        if not get_confirm(
+            "Continue KlipperScreen installation?",
+            default_choice=False,
+            allow_go_back=True,
+        ):
+            return
+
+    check_install_dependencies()
+
+    git_clone_wrapper(KLIPPERSCREEN_REPO, KLIPPERSCREEN_DIR)
+
+    try:
+        run(KLIPPERSCREEN_INSTALL_SCRIPT.as_posix(), shell=True, check=True)
+        if mr_instances:
+            patch_klipperscreen_update_manager(mr_instances)
+            InstanceManager.restart_all(mr_instances)
+        else:
+            Logger.print_info(
+                "Moonraker is not installed! Cannot add "
+                "KlipperScreen to update manager!"
+            )
+        Logger.print_ok("KlipperScreen successfully installed!")
+    except CalledProcessError as e:
+        Logger.print_error(f"Error installing KlipperScreen:\n{e}")
+        return
+
+
+def patch_klipperscreen_update_manager(instances: List[Moonraker]) -> None:
+    add_config_section(
+        section=KLIPPERSCREEN_UPDATER_SECTION_NAME,
+        instances=instances,
+        options=[
+            ("type", "git_repo"),
+            ("path", KLIPPERSCREEN_DIR.as_posix()),
+            ("origin", KLIPPERSCREEN_REPO),
+            ("managed_services", "KlipperScreen"),
+            ("env", f"{KLIPPERSCREEN_ENV_DIR}/bin/python"),
+            ("requirements", KLIPPERSCREEN_REQ_FILE.as_posix()),
+            ("install_script", KLIPPERSCREEN_INSTALL_SCRIPT.as_posix()),
+        ],
+    )
+
+
+def update_klipperscreen() -> None:
+    if not KLIPPERSCREEN_DIR.exists():
+        Logger.print_info("KlipperScreen does not seem to be installed! Skipping ...")
+        return
+
+    try:
+        Logger.print_status("Updating KlipperScreen ...")
+
+        cmd_sysctl_service(KLIPPERSCREEN_SERVICE_NAME, "stop")
+
+        settings = KiauhSettings()
+        if settings.kiauh.backup_before_update:
+            backup_klipperscreen_dir()
+
+        git_pull_wrapper(KLIPPERSCREEN_REPO, KLIPPERSCREEN_DIR)
+
+        install_python_requirements(KLIPPERSCREEN_ENV_DIR, KLIPPERSCREEN_REQ_FILE)
+
+        cmd_sysctl_service(KLIPPERSCREEN_SERVICE_NAME, "start")
+
+        Logger.print_ok("KlipperScreen updated successfully.", end="\n\n")
+    except CalledProcessError as e:
+        Logger.print_error(f"Error updating KlipperScreen:\n{e}")
+        return
+
+
+def get_klipperscreen_status() -> ComponentStatus:
+    return get_install_status(
+        KLIPPERSCREEN_DIR,
+        KLIPPERSCREEN_ENV_DIR,
+        files=[SYSTEMD.joinpath(KLIPPERSCREEN_SERVICE_NAME)],
+    )
+
+
+def remove_klipperscreen() -> None:
+    Logger.print_status("Removing KlipperScreen ...")
+    try:
+        if KLIPPERSCREEN_DIR.exists():
+            Logger.print_status("Removing KlipperScreen directory ...")
+            shutil.rmtree(KLIPPERSCREEN_DIR)
+            Logger.print_ok("KlipperScreen directory successfully removed!")
+        else:
+            Logger.print_warn("KlipperScreen directory not found!")
+
+        if KLIPPERSCREEN_ENV_DIR.exists():
+            Logger.print_status("Removing KlipperScreen environment ...")
+            shutil.rmtree(KLIPPERSCREEN_ENV_DIR)
+            Logger.print_ok("KlipperScreen environment successfully removed!")
+        else:
+            Logger.print_warn("KlipperScreen environment not found!")
+
+        if KLIPPERSCREEN_SERVICE_FILE.exists():
+            remove_system_service(KLIPPERSCREEN_SERVICE_NAME)
+
+        logfile = Path(f"/tmp/{KLIPPERSCREEN_LOG_NAME}")
+        if logfile.exists():
+            Logger.print_status("Removing KlipperScreen log file ...")
+            remove_with_sudo(logfile)
+            Logger.print_ok("KlipperScreen log file successfully removed!")
+
+        kl_instances: List[Klipper] = get_instances(Klipper)
+        for instance in kl_instances:
+            logfile = instance.base.log_dir.joinpath(KLIPPERSCREEN_LOG_NAME)
+            if logfile.exists():
+                Logger.print_status(f"Removing {logfile} ...")
+                Path(logfile).unlink()
+                Logger.print_ok(f"{logfile} successfully removed!")
+
+        mr_instances: List[Moonraker] = get_instances(Moonraker)
+        if mr_instances:
+            Logger.print_status("Removing KlipperScreen from update manager ...")
+            remove_config_section("update_manager KlipperScreen", mr_instances)
+            Logger.print_ok("KlipperScreen successfully removed from update manager!")
+
+        Logger.print_ok("KlipperScreen successfully removed!")
+
+    except Exception as e:
+        Logger.print_error(f"Error removing KlipperScreen:\n{e}")
+
+
+def backup_klipperscreen_dir() -> None:
+    bm = BackupManager()
+    bm.backup_directory(
+        KLIPPERSCREEN_DIR.name,
+        source=KLIPPERSCREEN_DIR,
+        target=KLIPPERSCREEN_BACKUP_DIR,
+    )
+    bm.backup_directory(
+        KLIPPERSCREEN_ENV_DIR.name,
+        source=KLIPPERSCREEN_ENV_DIR,
+        target=KLIPPERSCREEN_BACKUP_DIR,
+    )
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/log_uploads/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/log_uploads/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/log_uploads/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/log_uploads/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,14 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+from typing import Dict, Literal, Union
+
+FileKey = Literal["filepath", "display_name"]
+LogFile = Dict[FileKey, Union[str, Path]]
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/log_uploads/log_upload_utils.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/log_uploads/log_upload_utils.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/log_uploads/log_upload_utils.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/log_uploads/log_upload_utils.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,55 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+import urllib.request
+from pathlib import Path
+from typing import List
+
+from components.klipper.klipper import Klipper
+from components.log_uploads import LogFile
+from core.logger import Logger
+from utils.instance_utils import get_instances
+
+
+def get_logfile_list() -> List[LogFile]:
+    log_dirs: List[Path] = [
+        instance.base.log_dir for instance in get_instances(Klipper)
+    ]
+
+    logfiles: List[LogFile] = []
+    for _dir in log_dirs:
+        for f in _dir.iterdir():
+            logfiles.append({"filepath": f, "display_name": get_display_name(f)})
+
+    return logfiles
+
+
+def get_display_name(filepath: Path) -> str:
+    printer = " ".join(filepath.parts[-3].split("_")[:-1])
+    name = filepath.name
+
+    return f"{printer}: {name}"
+
+
+def upload_logfile(logfile: LogFile) -> None:
+    file = logfile.get("filepath")
+    name = logfile.get("display_name")
+    Logger.print_status(f"Uploading the following logfile from {name} ...")
+
+    with open(file, "rb") as f:
+        headers = {"x-random": ""}
+        req = urllib.request.Request("http://paste.c-net.org/", headers=headers, data=f)
+        try:
+            response = urllib.request.urlopen(req)
+            link = response.read().decode("utf-8")
+            Logger.print_ok("Upload successful! Access it via the following link:")
+            Logger.print_ok(f">>>> {link}", False)
+        except Exception as e:
+            Logger.print_error("Uploading logfile failed!")
+            Logger.print_error(str(e))
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/log_uploads/menus/log_upload_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/log_uploads/menus/log_upload_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/log_uploads/menus/log_upload_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/log_uploads/menus/log_upload_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,70 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import Type
+
+from components.log_uploads.log_upload_utils import get_logfile_list, upload_logfile
+from core.constants import COLOR_YELLOW, RESET_FORMAT
+from core.logger import Logger
+from core.menus import Option
+from core.menus.base_menu import BaseMenu
+
+
+# noinspection PyMethodMayBeStatic
+class LogUploadMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+        self.logfile_list = get_logfile_list()
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.main_menu import MainMenu
+
+        self.previous_menu = previous_menu if previous_menu is not None else MainMenu
+
+    def set_options(self) -> None:
+        self.options = {
+            f"{index}": Option(self.upload, opt_index=f"{index}")
+            for index in range(len(self.logfile_list))
+        }
+
+    def print_menu(self) -> None:
+        header = " [ Log Upload ] "
+        color = COLOR_YELLOW
+        count = 62 - len(color) - len(RESET_FORMAT)
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ You can select the following logfiles for uploading:  ║
+            ║                                                       ║
+            """
+        )[1:]
+
+        for logfile in enumerate(self.logfile_list):
+            line = f"{logfile[0]}) {logfile[1].get('display_name')}"
+            menu += f"║ {line:<54}║\n"
+        menu += "╟───────────────────────────────────────────────────────╢\n"
+
+        print(menu, end="")
+
+    def upload(self, **kwargs):
+        try:
+            index: int | None = kwargs.get("opt_index", None)
+            if index is None:
+                raise Exception("opt_index is None")
+
+            index = int(index)
+            upload_logfile(self.logfile_list[index])
+        except Exception as e:
+            Logger.print_error(e)
+            Logger.print_error("Log upload failed!")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/assets/moonraker.conf /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/assets/moonraker.conf
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/assets/moonraker.conf	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/assets/moonraker.conf	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,29 @@
+[server]
+host: 0.0.0.0
+port: %PORT%
+klippy_uds_address: %UDS%
+
+[authorization]
+trusted_clients:
+    10.0.0.0/8
+    127.0.0.0/8
+    169.254.0.0/16
+    172.16.0.0/12
+    192.168.0.0/16
+    FE80::/10
+    ::1/128
+cors_domains:
+    *.lan
+    *.local
+    *://localhost
+    *://localhost:*
+    *://my.mainsail.xyz
+    *://app.fluidd.xyz
+
+[octoprint_compat]
+
+[history]
+
+[update_manager]
+channel: dev
+refresh_interval: 168
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/assets/moonraker.env /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/assets/moonraker.env
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/assets/moonraker.env	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/assets/moonraker.env	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1 @@
+MOONRAKER_ARGS="%MOONRAKER_DIR%/moonraker/moonraker.py -d %PRINTER_DATA%"
\ No newline at end of file
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/assets/moonraker.service /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/assets/moonraker.service
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/assets/moonraker.service	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/assets/moonraker.service	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,19 @@
+[Unit]
+Description=API Server for Klipper SV1
+Documentation=https://moonraker.readthedocs.io/
+Requires=network-online.target
+After=network-online.target
+
+[Install]
+WantedBy=multi-user.target
+
+[Service]
+Type=simple
+User=%USER%
+SupplementaryGroups=moonraker-admin
+RemainAfterExit=yes
+WorkingDirectory=%MOONRAKER_DIR%
+EnvironmentFile=%ENV_FILE%
+ExecStart=%ENV%/bin/python $MOONRAKER_ARGS
+Restart=always
+RestartSec=10
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,45 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+from core.backup_manager import BACKUP_ROOT_DIR
+
+MODULE_PATH = Path(__file__).resolve().parent
+
+# names
+MOONRAKER_CFG_NAME = "moonraker.conf"
+MOONRAKER_LOG_NAME = "moonraker.log"
+MOONRAKER_SERVICE_NAME = "moonraker.service"
+MOONRAKER_DEFAULT_PORT = 7125
+MOONRAKER_ENV_FILE_NAME = "moonraker.env"
+
+# directories
+MOONRAKER_DIR = Path.home().joinpath("moonraker")
+MOONRAKER_ENV_DIR = Path.home().joinpath("moonraker-env")
+MOONRAKER_BACKUP_DIR = BACKUP_ROOT_DIR.joinpath("moonraker-backups")
+MOONRAKER_DB_BACKUP_DIR = BACKUP_ROOT_DIR.joinpath("moonraker-db-backups")
+
+# files
+MOONRAKER_INSTALL_SCRIPT = MOONRAKER_DIR.joinpath("scripts/install-moonraker.sh")
+MOONRAKER_REQ_FILE = MOONRAKER_DIR.joinpath("scripts/moonraker-requirements.txt")
+MOONRAKER_SPEEDUPS_REQ_FILE = MOONRAKER_DIR.joinpath("scripts/moonraker-speedups.txt")
+MOONRAKER_DEPS_JSON_FILE = MOONRAKER_DIR.joinpath("scripts/system-dependencies.json")
+# introduced due to
+# https://github.com/Arksine/moonraker/issues/349
+# https://github.com/Arksine/moonraker/pull/346
+POLKIT_LEGACY_FILE = Path("/etc/polkit-1/localauthority/50-local.d/10-moonraker.pkla")
+POLKIT_FILE = Path("/etc/polkit-1/rules.d/moonraker.rules")
+POLKIT_USR_FILE = Path("/usr/share/polkit-1/rules.d/moonraker.rules")
+POLKIT_SCRIPT = MOONRAKER_DIR.joinpath("scripts/set-policykit-rules.sh")
+MOONRAKER_SERVICE_TEMPLATE = MODULE_PATH.joinpath(f"assets/{MOONRAKER_SERVICE_NAME}")
+MOONRAKER_ENV_FILE_TEMPLATE = MODULE_PATH.joinpath(f"assets/{MOONRAKER_ENV_FILE_NAME}")
+
+
+EXIT_MOONRAKER_SETUP = "Exiting Moonraker setup ..."
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/menus/moonraker_remove_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/menus/moonraker_remove_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/menus/moonraker_remove_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/menus/moonraker_remove_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,128 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import Type
+
+from components.moonraker import moonraker_remove
+from core.constants import COLOR_CYAN, COLOR_RED, RESET_FORMAT
+from core.menus import Option
+from core.menus.base_menu import BaseMenu
+
+
+# noinspection PyUnusedLocal
+class MoonrakerRemoveMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+        self.remove_moonraker_service = False
+        self.remove_moonraker_dir = False
+        self.remove_moonraker_env = False
+        self.remove_moonraker_polkit = False
+        self.selection_state = False
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.remove_menu import RemoveMenu
+
+        self.previous_menu = previous_menu if previous_menu is not None else RemoveMenu
+
+    def set_options(self) -> None:
+        self.options = {
+            "a": Option(method=self.toggle_all),
+            "1": Option(method=self.toggle_remove_moonraker_service),
+            "2": Option(method=self.toggle_remove_moonraker_dir),
+            "3": Option(method=self.toggle_remove_moonraker_env),
+            "4": Option(method=self.toggle_remove_moonraker_polkit),
+            "c": Option(method=self.run_removal_process),
+        }
+
+    def print_menu(self) -> None:
+        header = " [ Remove Moonraker ] "
+        color = COLOR_RED
+        count = 62 - len(color) - len(RESET_FORMAT)
+        checked = f"[{COLOR_CYAN}x{RESET_FORMAT}]"
+        unchecked = "[ ]"
+        o1 = checked if self.remove_moonraker_service else unchecked
+        o2 = checked if self.remove_moonraker_dir else unchecked
+        o3 = checked if self.remove_moonraker_env else unchecked
+        o4 = checked if self.remove_moonraker_polkit else unchecked
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ Enter a number and hit enter to select / deselect     ║
+            ║ the specific option for removal.                      ║
+            ╟───────────────────────────────────────────────────────╢
+            ║  a) {self._get_selection_state_str():37}             ║
+            ╟───────────────────────────────────────────────────────╢
+            ║  1) {o1} Remove Service                                ║
+            ║  2) {o2} Remove Local Repository                       ║
+            ║  3) {o3} Remove Python Environment                     ║
+            ║  4) {o4} Remove Policy Kit Rules                       ║
+            ╟───────────────────────────────────────────────────────╢
+            ║  C) Continue                                          ║
+            ╟───────────────────────────────────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def toggle_all(self, **kwargs) -> None:
+        self.selection_state = not self.selection_state
+        self.remove_moonraker_service = self.selection_state
+        self.remove_moonraker_dir = self.selection_state
+        self.remove_moonraker_env = self.selection_state
+        self.remove_moonraker_polkit = self.selection_state
+
+    def toggle_remove_moonraker_service(self, **kwargs) -> None:
+        self.remove_moonraker_service = not self.remove_moonraker_service
+
+    def toggle_remove_moonraker_dir(self, **kwargs) -> None:
+        self.remove_moonraker_dir = not self.remove_moonraker_dir
+
+    def toggle_remove_moonraker_env(self, **kwargs) -> None:
+        self.remove_moonraker_env = not self.remove_moonraker_env
+
+    def toggle_remove_moonraker_polkit(self, **kwargs) -> None:
+        self.remove_moonraker_polkit = not self.remove_moonraker_polkit
+
+    def run_removal_process(self, **kwargs) -> None:
+        if (
+            not self.remove_moonraker_service
+            and not self.remove_moonraker_dir
+            and not self.remove_moonraker_env
+            and not self.remove_moonraker_polkit
+        ):
+            error = f"{COLOR_RED}Nothing selected! Select options to remove first.{RESET_FORMAT}"
+            print(error)
+            return
+
+        moonraker_remove.run_moonraker_removal(
+            self.remove_moonraker_service,
+            self.remove_moonraker_dir,
+            self.remove_moonraker_env,
+            self.remove_moonraker_polkit,
+        )
+
+        self.remove_moonraker_service = False
+        self.remove_moonraker_dir = False
+        self.remove_moonraker_env = False
+        self.remove_moonraker_polkit = False
+
+        self._go_back()
+
+    def _get_selection_state_str(self) -> str:
+        return (
+            "Select everything" if not self.selection_state else "Deselect everything"
+        )
+
+    def _go_back(self, **kwargs) -> None:
+        if self.previous_menu is not None:
+            self.previous_menu().run()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/moonraker_dialogs.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/moonraker_dialogs.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/moonraker_dialogs.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/moonraker_dialogs.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,71 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+import textwrap
+from typing import List
+
+from components.klipper.klipper import Klipper
+from components.moonraker.moonraker import Moonraker
+from core.constants import COLOR_CYAN, COLOR_GREEN, COLOR_YELLOW, RESET_FORMAT
+from core.menus.base_menu import print_back_footer
+
+
+def print_moonraker_overview(
+    klipper_instances: List[Klipper],
+    moonraker_instances: List[Moonraker],
+    show_index=False,
+    show_select_all=False,
+):
+    headline = f"{COLOR_GREEN}The following instances were found:{RESET_FORMAT}"
+    dialog = textwrap.dedent(
+        f"""
+        ╔═══════════════════════════════════════════════════════╗
+        ║{headline:^64}║
+        ╟───────────────────────────────────────────────────────╢
+        """
+    )[1:]
+
+    if show_select_all:
+        select_all = f"{COLOR_YELLOW}a) Select all{RESET_FORMAT}"
+        dialog += f"║ {select_all:<63}║\n"
+        dialog += "║                                                       ║\n"
+
+    instance_map = {
+        k.service_file_path.stem: (
+            k.service_file_path.stem.replace("klipper", "moonraker")
+            if k.suffix in [m.suffix for m in moonraker_instances]
+            else ""
+        )
+        for k in klipper_instances
+    }
+
+    for i, k in enumerate(instance_map):
+        mr_name = instance_map.get(k)
+        m = f"<-> {mr_name}" if mr_name != "" else ""
+        line = f"{COLOR_CYAN}{f'{i+1})' if show_index else '●'} {k} {m} {RESET_FORMAT}"
+        dialog += f"║ {line:<63}║\n"
+
+    warn_l1 = f"{COLOR_YELLOW}PLEASE NOTE: {RESET_FORMAT}"
+    warn_l2 = f"{COLOR_YELLOW}If you select an instance with an existing Moonraker{RESET_FORMAT}"
+    warn_l3 = f"{COLOR_YELLOW}instance, that Moonraker instance will be re-created!{RESET_FORMAT}"
+    warning = textwrap.dedent(
+        f"""
+        ║                                                       ║
+        ╟───────────────────────────────────────────────────────╢
+        ║ {warn_l1:<63}║
+        ║ {warn_l2:<63}║
+        ║ {warn_l3:<63}║
+        ╟───────────────────────────────────────────────────────╢
+        """
+    )[1:]
+
+    dialog += warning
+
+    print(dialog, end="")
+    print_back_footer()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/moonraker.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/moonraker.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/moonraker.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/moonraker.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,146 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from dataclasses import dataclass, field
+from pathlib import Path
+from subprocess import CalledProcessError
+
+from components.klipper.klipper import Klipper
+from components.moonraker import (
+    MOONRAKER_CFG_NAME,
+    MOONRAKER_DIR,
+    MOONRAKER_ENV_DIR,
+    MOONRAKER_ENV_FILE_NAME,
+    MOONRAKER_ENV_FILE_TEMPLATE,
+    MOONRAKER_LOG_NAME,
+    MOONRAKER_SERVICE_TEMPLATE,
+)
+from core.constants import CURRENT_USER
+from core.instance_manager.base_instance import BaseInstance
+from core.logger import Logger
+from core.submodules.simple_config_parser.src.simple_config_parser.simple_config_parser import (
+    SimpleConfigParser,
+)
+from utils.fs_utils import create_folders
+from utils.sys_utils import get_service_file_path
+
+
+# noinspection PyMethodMayBeStatic
+@dataclass
+class Moonraker:
+    suffix: str
+    base: BaseInstance = field(init=False, repr=False)
+    service_file_path: Path = field(init=False)
+    log_file_name: str = MOONRAKER_LOG_NAME
+    moonraker_dir: Path = MOONRAKER_DIR
+    env_dir: Path = MOONRAKER_ENV_DIR
+    data_dir: Path = field(init=False)
+    cfg_file: Path = field(init=False)
+    env_file: Path = field(init=False)
+    backup_dir: Path = field(init=False)
+    certs_dir: Path = field(init=False)
+    db_dir: Path = field(init=False)
+    port: int | None = field(init=False)
+
+    def __post_init__(self):
+        self.base: BaseInstance = BaseInstance(Klipper, self.suffix)
+        self.base.log_file_name = self.log_file_name
+
+        self.service_file_path: Path = get_service_file_path(Moonraker, self.suffix)
+        self.data_dir: Path = self.base.data_dir
+        self.cfg_file: Path = self.base.cfg_dir.joinpath(MOONRAKER_CFG_NAME)
+        self.env_file: Path = self.base.sysd_dir.joinpath(MOONRAKER_ENV_FILE_NAME)
+        self.backup_dir: Path = self.base.data_dir.joinpath("backup")
+        self.certs_dir: Path = self.base.data_dir.joinpath("certs")
+        self.db_dir: Path = self.base.data_dir.joinpath("database")
+        self.port: int | None = self._get_port()
+
+    def create(self) -> None:
+        from utils.sys_utils import create_env_file, create_service_file
+
+        Logger.print_status("Creating new Moonraker Instance ...")
+
+        try:
+            create_folders(self.base.base_folders)
+
+            create_service_file(
+                name=self.service_file_path.name,
+                content=self._prep_service_file_content(),
+            )
+            create_env_file(
+                path=self.base.sysd_dir.joinpath(MOONRAKER_ENV_FILE_NAME),
+                content=self._prep_env_file_content(),
+            )
+
+        except CalledProcessError as e:
+            Logger.print_error(f"Error creating instance: {e}")
+            raise
+        except OSError as e:
+            Logger.print_error(f"Error creating env file: {e}")
+            raise
+
+    def _prep_service_file_content(self) -> str:
+        template = MOONRAKER_SERVICE_TEMPLATE
+
+        try:
+            with open(template, "r") as template_file:
+                template_content = template_file.read()
+        except FileNotFoundError:
+            Logger.print_error(f"Unable to open {template} - File not found")
+            raise
+
+        service_content = template_content.replace(
+            "%USER%",
+            CURRENT_USER,
+        )
+        service_content = service_content.replace(
+            "%MOONRAKER_DIR%",
+            self.moonraker_dir.as_posix(),
+        )
+        service_content = service_content.replace(
+            "%ENV%",
+            self.env_dir.as_posix(),
+        )
+        service_content = service_content.replace(
+            "%ENV_FILE%",
+            self.base.sysd_dir.joinpath(MOONRAKER_ENV_FILE_NAME).as_posix(),
+        )
+        return service_content
+
+    def _prep_env_file_content(self) -> str:
+        template = MOONRAKER_ENV_FILE_TEMPLATE
+
+        try:
+            with open(template, "r") as env_file:
+                env_template_file_content = env_file.read()
+        except FileNotFoundError:
+            Logger.print_error(f"Unable to open {template} - File not found")
+            raise
+
+        env_file_content = env_template_file_content.replace(
+            "%MOONRAKER_DIR%",
+            self.moonraker_dir.as_posix(),
+        )
+        env_file_content = env_file_content.replace(
+            "%PRINTER_DATA%",
+            self.base.data_dir.as_posix(),
+        )
+
+        return env_file_content
+
+    def _get_port(self) -> int | None:
+        if not self.cfg_file or not self.cfg_file.is_file():
+            return None
+
+        scp = SimpleConfigParser()
+        scp.read_file(self.cfg_file)
+        port: int | None = scp.getint("server", "port", fallback=None)
+
+        return port
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/moonraker_remove.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/moonraker_remove.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/moonraker_remove.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/moonraker_remove.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,121 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from subprocess import DEVNULL, PIPE, CalledProcessError, run
+from typing import List
+
+from components.klipper.klipper_dialogs import print_instance_overview
+from components.moonraker import MOONRAKER_DIR, MOONRAKER_ENV_DIR
+from components.moonraker.moonraker import Moonraker
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import Logger
+from utils.fs_utils import run_remove_routines
+from utils.input_utils import get_selection_input
+from utils.instance_utils import get_instances
+from utils.sys_utils import unit_file_exists
+
+
+def run_moonraker_removal(
+    remove_service: bool,
+    remove_dir: bool,
+    remove_env: bool,
+    remove_polkit: bool,
+) -> None:
+    instances = get_instances(Moonraker)
+
+    if remove_service:
+        Logger.print_status("Removing Moonraker instances ...")
+        if instances:
+            instances_to_remove = select_instances_to_remove(instances)
+            remove_instances(instances_to_remove)
+        else:
+            Logger.print_info("No Moonraker Services installed! Skipped ...")
+
+    delete_remaining: bool = remove_polkit or remove_dir or remove_env
+    if delete_remaining and unit_file_exists("moonraker", suffix="service"):
+        Logger.print_info("There are still other Moonraker services installed")
+        Logger.print_info(
+            "●  Moonraker PolicyKit rules were not removed.", prefix=False
+        )
+        Logger.print_info(f"● '{MOONRAKER_DIR}' was not removed.", prefix=False)
+        Logger.print_info(f"● '{MOONRAKER_ENV_DIR}' was not removed.", prefix=False)
+    else:
+        if remove_polkit:
+            Logger.print_status("Removing all Moonraker policykit rules ...")
+            remove_polkit_rules()
+        if remove_dir:
+            Logger.print_status("Removing Moonraker local repository ...")
+            run_remove_routines(MOONRAKER_DIR)
+        if remove_env:
+            Logger.print_status("Removing Moonraker Python environment ...")
+            run_remove_routines(MOONRAKER_ENV_DIR)
+
+
+def select_instances_to_remove(
+    instances: List[Moonraker],
+) -> List[Moonraker] | None:
+    start_index = 1
+    options = [str(i + start_index) for i in range(len(instances))]
+    options.extend(["a", "b"])
+    instance_map = {options[i]: instances[i] for i in range(len(instances))}
+
+    print_instance_overview(
+        instances,
+        start_index=start_index,
+        show_index=True,
+        show_select_all=True,
+    )
+    selection = get_selection_input("Select Moonraker instance to remove", options)
+
+    instances_to_remove = []
+    if selection == "b":
+        return None
+    elif selection == "a":
+        instances_to_remove.extend(instances)
+    else:
+        instances_to_remove.append(instance_map[selection])
+
+    return instances_to_remove
+
+
+def remove_instances(
+    instance_list: List[Moonraker] | None,
+) -> None:
+    if not instance_list:
+        Logger.print_info("No Moonraker instances found. Skipped ...")
+        return
+    for instance in instance_list:
+        Logger.print_status(f"Removing instance {instance.service_file_path.stem} ...")
+        InstanceManager.remove(instance)
+        delete_moonraker_env_file(instance)
+
+
+def remove_polkit_rules() -> None:
+    if not MOONRAKER_DIR.exists():
+        log = "Cannot remove policykit rules. Moonraker directory not found."
+        Logger.print_warn(log)
+        return
+
+    try:
+        cmd = [f"{MOONRAKER_DIR}/scripts/set-policykit-rules.sh", "--clear"]
+        run(cmd, stderr=PIPE, stdout=DEVNULL, check=True)
+    except CalledProcessError as e:
+        Logger.print_error(f"Error while removing policykit rules: {e}")
+
+    Logger.print_ok("Policykit rules successfully removed!")
+
+
+def delete_moonraker_env_file(instance: Moonraker):
+    Logger.print_status(f"Remove '{instance.env_file}'")
+    if not instance.env_file.exists():
+        msg = f"Env file in {instance.base.sysd_dir} not found. Skipped ..."
+        Logger.print_info(msg)
+        return
+    run_remove_routines(instance.env_file)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/moonraker_setup.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/moonraker_setup.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/moonraker_setup.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/moonraker_setup.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,219 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import json
+import subprocess
+from typing import List
+
+from components.klipper.klipper import Klipper
+from components.moonraker import (
+    EXIT_MOONRAKER_SETUP,
+    MOONRAKER_DEPS_JSON_FILE,
+    MOONRAKER_DIR,
+    MOONRAKER_ENV_DIR,
+    MOONRAKER_INSTALL_SCRIPT,
+    MOONRAKER_REQ_FILE,
+    MOONRAKER_SPEEDUPS_REQ_FILE,
+    POLKIT_FILE,
+    POLKIT_LEGACY_FILE,
+    POLKIT_SCRIPT,
+    POLKIT_USR_FILE,
+)
+from components.moonraker.moonraker import Moonraker
+from components.moonraker.moonraker_dialogs import print_moonraker_overview
+from components.moonraker.moonraker_utils import (
+    backup_moonraker_dir,
+    create_example_moonraker_conf,
+)
+from components.webui_client.client_utils import (
+    enable_mainsail_remotemode,
+    get_existing_clients,
+)
+from components.webui_client.mainsail_data import MainsailData
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import Logger
+from core.settings.kiauh_settings import KiauhSettings
+from utils.common import check_install_dependencies
+from utils.fs_utils import check_file_exist
+from utils.git_utils import git_clone_wrapper, git_pull_wrapper
+from utils.input_utils import (
+    get_confirm,
+    get_selection_input,
+)
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    check_python_version,
+    cmd_sysctl_manage,
+    cmd_sysctl_service,
+    create_python_venv,
+    install_python_requirements,
+    parse_packages_from_file,
+)
+
+
+def install_moonraker() -> None:
+    klipper_list: List[Klipper] = get_instances(Klipper)
+
+    if not check_moonraker_install_requirements(klipper_list):
+        return
+
+    moonraker_list: List[Moonraker] = get_instances(Moonraker)
+    instances: List[Moonraker] = []
+    selected_option: str | Klipper
+
+    if len(klipper_list) == 1:
+        instances.append(Moonraker(klipper_list[0].suffix))
+    else:
+        print_moonraker_overview(
+            klipper_list,
+            moonraker_list,
+            show_index=True,
+            show_select_all=True,
+        )
+        options = {str(i + 1): k for i, k in enumerate(klipper_list)}
+        additional_options = {"a": None, "b": None}
+        options = {**options, **additional_options}
+        question = "Select Klipper instance to setup Moonraker for"
+        selected_option = get_selection_input(question, options)
+
+        if selected_option == "b":
+            Logger.print_status(EXIT_MOONRAKER_SETUP)
+            return
+
+        if selected_option == "a":
+            instances.extend([Moonraker(k.suffix) for k in klipper_list])
+        else:
+            klipper_instance: Klipper | None = options.get(selected_option)
+            if klipper_instance is None:
+                raise Exception("Error selecting instance!")
+            instances.append(Moonraker(klipper_instance.suffix))
+
+    create_example_cfg = get_confirm("Create example moonraker.conf?")
+
+    try:
+        check_install_dependencies()
+        setup_moonraker_prerequesites()
+        install_moonraker_polkit()
+
+        used_ports_map = {m.suffix: m.port for m in moonraker_list}
+        for instance in instances:
+            instance.create()
+            cmd_sysctl_service(instance.service_file_path.name, "enable")
+
+            if create_example_cfg:
+                # if a webclient and/or it's config is installed, patch
+                # its update section to the config
+                clients = get_existing_clients()
+                create_example_moonraker_conf(instance, used_ports_map, clients)
+
+            cmd_sysctl_service(instance.service_file_path.name, "start")
+
+        cmd_sysctl_manage("daemon-reload")
+
+        # if mainsail is installed, and we installed
+        # multiple moonraker instances, we enable mainsails remote mode
+        if MainsailData().client_dir.exists() and len(moonraker_list) > 1:
+            enable_mainsail_remotemode()
+
+    except Exception as e:
+        Logger.print_error(f"Error while installing Moonraker: {e}")
+        return
+
+
+def check_moonraker_install_requirements(klipper_list: List[Klipper]) -> bool:
+    def check_klipper_instances() -> bool:
+        if len(klipper_list) >= 1:
+            return True
+
+        Logger.print_warn("Klipper not installed!")
+        Logger.print_warn("Moonraker cannot be installed! Install Klipper first.")
+        return False
+
+    return check_python_version(3, 7) and check_klipper_instances()
+
+
+def setup_moonraker_prerequesites() -> None:
+    settings = KiauhSettings()
+    repo = settings.moonraker.repo_url
+    branch = settings.moonraker.branch
+
+    git_clone_wrapper(repo, MOONRAKER_DIR, branch)
+
+    # install moonraker dependencies and create python virtualenv
+    install_moonraker_packages()
+    if create_python_venv(MOONRAKER_ENV_DIR):
+        install_python_requirements(MOONRAKER_ENV_DIR, MOONRAKER_REQ_FILE)
+        install_python_requirements(MOONRAKER_ENV_DIR, MOONRAKER_SPEEDUPS_REQ_FILE)
+
+
+def install_moonraker_packages() -> None:
+    moonraker_deps = []
+
+    if MOONRAKER_DEPS_JSON_FILE.exists():
+        with open(MOONRAKER_DEPS_JSON_FILE, "r") as deps:
+            moonraker_deps = json.load(deps).get("debian", [])
+    elif MOONRAKER_INSTALL_SCRIPT.exists():
+        moonraker_deps = parse_packages_from_file(MOONRAKER_INSTALL_SCRIPT)
+
+    if not moonraker_deps:
+        raise ValueError("Error reading Moonraker dependencies!")
+
+    check_install_dependencies({*moonraker_deps})
+
+
+def install_moonraker_polkit() -> None:
+    Logger.print_status("Installing Moonraker policykit rules ...")
+
+    legacy_file_exists = check_file_exist(POLKIT_LEGACY_FILE, True)
+    polkit_file_exists = check_file_exist(POLKIT_FILE, True)
+    usr_file_exists = check_file_exist(POLKIT_USR_FILE, True)
+
+    if legacy_file_exists or (polkit_file_exists and usr_file_exists):
+        Logger.print_info("Moonraker policykit rules are already installed.")
+        return
+
+    try:
+        command = [POLKIT_SCRIPT, "--disable-systemctl"]
+        result = subprocess.run(
+            command,
+            stderr=subprocess.PIPE,
+            stdout=subprocess.DEVNULL,
+            text=True,
+        )
+        if result.returncode != 0 or result.stderr:
+            Logger.print_error(f"{result.stderr}", False)
+            Logger.print_error("Installing Moonraker policykit rules failed!")
+            return
+
+        Logger.print_ok("Moonraker policykit rules successfully installed!")
+    except subprocess.CalledProcessError as e:
+        log = f"Error while installing Moonraker policykit rules: {e.stderr.decode()}"
+        Logger.print_error(log)
+
+
+def update_moonraker() -> None:
+    if not get_confirm("Update Moonraker now?"):
+        return
+
+    settings = KiauhSettings()
+    if settings.kiauh.backup_before_update:
+        backup_moonraker_dir()
+
+    instances = get_instances(Moonraker)
+    InstanceManager.stop_all(instances)
+
+    git_pull_wrapper(repo=settings.moonraker.repo_url, target_dir=MOONRAKER_DIR)
+
+    # install possible new system packages
+    install_moonraker_packages()
+    # install possible new python dependencies
+    install_python_requirements(MOONRAKER_ENV_DIR, MOONRAKER_REQ_FILE)
+
+    InstanceManager.start_all(instances)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/moonraker_utils.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/moonraker_utils.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/moonraker/moonraker_utils.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/moonraker/moonraker_utils.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,140 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+import shutil
+from typing import Dict, List, Optional
+
+from components.moonraker import (
+    MODULE_PATH,
+    MOONRAKER_BACKUP_DIR,
+    MOONRAKER_DB_BACKUP_DIR,
+    MOONRAKER_DEFAULT_PORT,
+    MOONRAKER_DIR,
+    MOONRAKER_ENV_DIR,
+)
+from components.moonraker.moonraker import Moonraker
+from components.webui_client.base_data import BaseWebClient
+from core.backup_manager.backup_manager import BackupManager
+from core.logger import Logger
+from core.submodules.simple_config_parser.src.simple_config_parser.simple_config_parser import (
+    SimpleConfigParser,
+)
+from core.types import ComponentStatus
+from utils.common import get_install_status
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    get_ipv4_addr,
+)
+
+
+def get_moonraker_status() -> ComponentStatus:
+    return get_install_status(MOONRAKER_DIR, MOONRAKER_ENV_DIR, Moonraker)
+
+
+def create_example_moonraker_conf(
+    instance: Moonraker,
+    ports_map: Dict[str, int],
+    clients: Optional[List[BaseWebClient]] = None,
+) -> None:
+    Logger.print_status(f"Creating example moonraker.conf in '{instance.base.cfg_dir}'")
+    if instance.cfg_file.is_file():
+        Logger.print_info(f"'{instance.cfg_file}' already exists.")
+        return
+
+    source = MODULE_PATH.joinpath("assets/moonraker.conf")
+    target = instance.cfg_file
+    try:
+        shutil.copy(source, target)
+    except OSError as e:
+        Logger.print_error(f"Unable to create example moonraker.conf:\n{e}")
+        return
+
+    ports = [
+        ports_map.get(instance)
+        for instance in ports_map
+        if ports_map.get(instance) is not None
+    ]
+    if ports_map.get(instance.suffix) is None:
+        # this could be improved to not increment the max value of the ports list and assign it as the port
+        # as it can lead to situation where the port for e.g. instance moonraker-2 becomes 7128 if the port
+        # of moonraker-1 is 7125 and moonraker-3 is 7127 and there are moonraker.conf files for moonraker-1
+        # and moonraker-3 already. though, there does not seem to be a very reliable way of always assigning
+        # the correct port to each instance and the user will likely be required to correct the value manually.
+        port = max(ports) + 1 if ports else MOONRAKER_DEFAULT_PORT
+    else:
+        port = ports_map.get(instance.suffix)
+
+    ports_map[instance.suffix] = port
+
+    ip = get_ipv4_addr().split(".")[:2]
+    ip.extend(["0", "0/16"])
+    uds = instance.base.comms_dir.joinpath("klippy.sock")
+
+    scp = SimpleConfigParser()
+    scp.read_file(target)
+    trusted_clients: List[str] = [
+        f"    {'.'.join(ip)}\n",
+        *scp.getval("authorization", "trusted_clients"),
+    ]
+
+    scp.set_option("server", "port", str(port))
+    scp.set_option("server", "klippy_uds_address", str(uds))
+    scp.set_option("authorization", "trusted_clients", trusted_clients)
+
+    # add existing client and client configs in the update section
+    if clients is not None and len(clients) > 0:
+        for c in clients:
+            # client part
+            c_section = f"update_manager {c.name}"
+            c_options = [
+                ("type", "web"),
+                ("channel", "stable"),
+                ("repo", c.repo_path),
+                ("path", c.client_dir),
+            ]
+            scp.add_section(section=c_section)
+            for option in c_options:
+                scp.set_option(c_section, option[0], option[1])
+
+            # client config part
+            c_config = c.client_config
+            if c_config.config_dir.exists():
+                c_config_section = f"update_manager {c_config.name}"
+                c_config_options = [
+                    ("type", "git_repo"),
+                    ("primary_branch", "master"),
+                    ("path", c_config.config_dir),
+                    ("origin", c_config.repo_url),
+                    ("managed_services", "klipper"),
+                ]
+                scp.add_section(section=c_config_section)
+                for option in c_config_options:
+                    scp.set_option(c_config_section, option[0], option[1])
+
+    scp.write_file(target)
+    Logger.print_ok(f"Example moonraker.conf created in '{instance.base.cfg_dir}'")
+
+
+def backup_moonraker_dir() -> None:
+    bm = BackupManager()
+    bm.backup_directory("moonraker", source=MOONRAKER_DIR, target=MOONRAKER_BACKUP_DIR)
+    bm.backup_directory(
+        "moonraker-env", source=MOONRAKER_ENV_DIR, target=MOONRAKER_BACKUP_DIR
+    )
+
+
+def backup_moonraker_db_dir() -> None:
+    instances: List[Moonraker] = get_instances(Moonraker)
+    bm = BackupManager()
+
+    for instance in instances:
+        name = f"database-{instance.data_dir.name}"
+        bm.backup_directory(
+            name, source=instance.db_dir, target=MOONRAKER_DB_BACKUP_DIR
+        )
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/assets/common_vars.conf /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/assets/common_vars.conf
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/assets/common_vars.conf	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/assets/common_vars.conf	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,6 @@
+# /etc/nginx/conf.d/common_vars.conf
+
+map $http_upgrade $connection_upgrade {
+    default upgrade;
+    '' close;
+}
\ No newline at end of file
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/assets/nginx_cfg /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/assets/nginx_cfg
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/assets/nginx_cfg	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/assets/nginx_cfg	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,95 @@
+server {
+    listen %PORT%;
+    # uncomment the next line to activate IPv6
+    # listen [::]:%PORT%;
+
+    access_log /var/log/nginx/%NAME%-access.log;
+    error_log /var/log/nginx/%NAME%-error.log;
+
+    # disable this section on smaller hardware like a pi zero
+    gzip on;
+    gzip_vary on;
+    gzip_proxied any;
+    gzip_proxied expired no-cache no-store private auth;
+    gzip_comp_level 4;
+    gzip_buffers 16 8k;
+    gzip_http_version 1.1;
+    gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/json application/xml;
+
+    # web_path from %NAME% static files
+    root %ROOT_DIR%;
+
+    index index.html;
+    server_name _;
+
+    # disable max upload size checks
+    client_max_body_size 0;
+
+    # disable proxy request buffering
+    proxy_request_buffering off;
+
+    location / {
+        try_files $uri $uri/ /index.html;
+    }
+
+    location = /index.html {
+        add_header Cache-Control "no-store, no-cache, must-revalidate";
+    }
+
+    location /websocket {
+        proxy_pass http://apiserver/websocket;
+        proxy_http_version 1.1;
+        proxy_set_header Upgrade $http_upgrade;
+        proxy_set_header Connection $connection_upgrade;
+        proxy_set_header Host $http_host;
+        proxy_set_header X-Real-IP $remote_addr;
+        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
+        proxy_read_timeout 86400;
+    }
+
+    location ~ ^/(printer|api|access|machine|server)/ {
+        proxy_pass http://apiserver$request_uri;
+        proxy_http_version 1.1;
+        proxy_set_header Upgrade $http_upgrade;
+        proxy_set_header Host $http_host;
+        proxy_set_header X-Real-IP $remote_addr;
+        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
+        proxy_set_header X-Scheme $scheme;
+    }
+
+    location /webcam/ {
+        postpone_output 0;
+        proxy_buffering off;
+        proxy_ignore_headers X-Accel-Buffering;
+        access_log off;
+        error_log off;
+        proxy_pass http://mjpgstreamer1/;
+    }
+
+    location /webcam2/ {
+        postpone_output 0;
+        proxy_buffering off;
+        proxy_ignore_headers X-Accel-Buffering;
+        access_log off;
+        error_log off;
+        proxy_pass http://mjpgstreamer2/;
+    }
+
+    location /webcam3/ {
+        postpone_output 0;
+        proxy_buffering off;
+        proxy_ignore_headers X-Accel-Buffering;
+        access_log off;
+        error_log off;
+        proxy_pass http://mjpgstreamer3/;
+    }
+
+    location /webcam4/ {
+        postpone_output 0;
+        proxy_buffering off;
+        proxy_ignore_headers X-Accel-Buffering;
+        access_log off;
+        error_log off;
+        proxy_pass http://mjpgstreamer4/;
+    }
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/assets/upstreams.conf /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/assets/upstreams.conf
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/assets/upstreams.conf	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/assets/upstreams.conf	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,25 @@
+# /etc/nginx/conf.d/upstreams.conf
+upstream apiserver {
+    ip_hash;
+    server 127.0.0.1:7125;
+}
+
+upstream mjpgstreamer1 {
+    ip_hash;
+    server 127.0.0.1:8080;
+}
+
+upstream mjpgstreamer2 {
+    ip_hash;
+    server 127.0.0.1:8081;
+}
+
+upstream mjpgstreamer3 {
+    ip_hash;
+    server 127.0.0.1:8082;
+}
+
+upstream mjpgstreamer4 {
+    ip_hash;
+    server 127.0.0.1:8083;
+}
\ No newline at end of file
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/base_data.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/base_data.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/base_data.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/base_data.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,56 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from __future__ import annotations
+
+from abc import ABC
+from dataclasses import dataclass
+from enum import Enum
+from pathlib import Path
+
+
+class WebClientType(Enum):
+    MAINSAIL: str = "mainsail"
+    FLUIDD: str = "fluidd"
+
+
+class WebClientConfigType(Enum):
+    MAINSAIL: str = "mainsail-config"
+    FLUIDD: str = "fluidd-config"
+
+
+@dataclass()
+class BaseWebClient(ABC):
+    """Base class for webclient data"""
+
+    client: WebClientType
+    name: str
+    display_name: str
+    client_dir: Path
+    config_file: Path
+    backup_dir: Path
+    repo_path: str
+    download_url: str
+    nginx_access_log: Path
+    nginx_error_log: Path
+    client_config: BaseWebClientConfig
+
+
+@dataclass()
+class BaseWebClientConfig(ABC):
+    """Base class for webclient config data"""
+
+    client_config: WebClientConfigType
+    name: str
+    display_name: str
+    config_filename: str
+    config_dir: Path
+    backup_dir: Path
+    repo_url: str
+    config_section: str
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/client_config/client_config_remove.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/client_config/client_config_remove.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/client_config/client_config_remove.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/client_config/client_config_remove.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,43 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+
+from typing import List
+
+from components.klipper.klipper import Klipper
+from components.moonraker.moonraker import Moonraker
+from components.webui_client.base_data import BaseWebClientConfig
+from core.logger import Logger
+from utils.config_utils import remove_config_section
+from utils.fs_utils import run_remove_routines
+from utils.instance_utils import get_instances
+
+
+def run_client_config_removal(
+    client_config: BaseWebClientConfig,
+    kl_instances: List[Klipper],
+    mr_instances: List[Moonraker],
+) -> None:
+    remove_client_config_dir(client_config)
+    remove_client_config_symlink(client_config)
+    remove_config_section(f"update_manager {client_config.name}", mr_instances)
+    remove_config_section(client_config.config_section, kl_instances)
+
+
+def remove_client_config_dir(client_config: BaseWebClientConfig) -> None:
+    Logger.print_status(f"Removing {client_config.display_name} ...")
+    run_remove_routines(client_config.config_dir)
+
+
+def remove_client_config_symlink(client_config: BaseWebClientConfig) -> None:
+    instances: List[Klipper] = get_instances(Klipper)
+    for instance in instances:
+        run_remove_routines(
+            instance.base.cfg_dir.joinpath(client_config.config_filename)
+        )
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/client_config/client_config_setup.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/client_config/client_config_setup.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/client_config/client_config_setup.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/client_config/client_config_setup.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,125 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import shutil
+import subprocess
+from pathlib import Path
+from typing import List
+
+from components.klipper.klipper import Klipper
+from components.moonraker.moonraker import Moonraker
+from components.webui_client.base_data import BaseWebClient, BaseWebClientConfig
+from components.webui_client.client_dialogs import (
+    print_client_already_installed_dialog,
+)
+from components.webui_client.client_utils import (
+    backup_client_config_data,
+    detect_client_cfg_conflict,
+)
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import Logger
+from core.settings.kiauh_settings import KiauhSettings
+from utils.common import backup_printer_config_dir
+from utils.config_utils import add_config_section, add_config_section_at_top
+from utils.fs_utils import create_symlink
+from utils.git_utils import git_clone_wrapper, git_pull_wrapper
+from utils.input_utils import get_confirm
+from utils.instance_utils import get_instances
+
+
+def install_client_config(client_data: BaseWebClient) -> None:
+    client_config: BaseWebClientConfig = client_data.client_config
+    display_name = client_config.display_name
+
+    if detect_client_cfg_conflict(client_data):
+        Logger.print_info("Another Client-Config is already installed! Skipped ...")
+        return
+
+    if client_config.config_dir.exists():
+        print_client_already_installed_dialog(display_name)
+        if get_confirm(f"Re-install {display_name}?", allow_go_back=True):
+            shutil.rmtree(client_config.config_dir)
+        else:
+            return
+
+    mr_instances: List[Moonraker] = get_instances(Moonraker)
+    kl_instances = get_instances(Klipper)
+
+    try:
+        download_client_config(client_config)
+        create_client_config_symlink(client_config, kl_instances)
+
+        backup_printer_config_dir()
+
+        add_config_section(
+            section=f"update_manager {client_config.name}",
+            instances=mr_instances,
+            options=[
+                ("type", "git_repo"),
+                ("primary_branch", "master"),
+                ("path", str(client_config.config_dir)),
+                ("origin", str(client_config.repo_url)),
+                ("managed_services", "klipper"),
+            ],
+        )
+        add_config_section_at_top(client_config.config_section, kl_instances)
+        InstanceManager.restart_all(kl_instances)
+
+    except Exception as e:
+        Logger.print_error(f"{display_name} installation failed!\n{e}")
+        return
+
+    Logger.print_ok(f"{display_name} installation complete!", start="\n")
+
+
+def download_client_config(client_config: BaseWebClientConfig) -> None:
+    try:
+        Logger.print_status(f"Downloading {client_config.display_name} ...")
+        repo = client_config.repo_url
+        target_dir = client_config.config_dir
+        git_clone_wrapper(repo, target_dir)
+    except Exception:
+        Logger.print_error(f"Downloading {client_config.display_name} failed!")
+        raise
+
+
+def update_client_config(client: BaseWebClient) -> None:
+    client_config: BaseWebClientConfig = client.client_config
+
+    Logger.print_status(f"Updating {client_config.display_name} ...")
+
+    if not client_config.config_dir.exists():
+        Logger.print_info(
+            f"Unable to update {client_config.display_name}. Directory does not exist! Skipping ..."
+        )
+        return
+
+    settings = KiauhSettings()
+    if settings.kiauh.backup_before_update:
+        backup_client_config_data(client)
+
+    git_pull_wrapper(client_config.repo_url, client_config.config_dir)
+
+    Logger.print_ok(f"Successfully updated {client_config.display_name}.")
+    Logger.print_info("Restart Klipper to reload the configuration!")
+
+
+def create_client_config_symlink(
+    client_config: BaseWebClientConfig, klipper_instances: List[Klipper]
+) -> None:
+    for instance in klipper_instances:
+        Logger.print_status(f"Create symlink for {client_config.config_filename} ...")
+        source = Path(client_config.config_dir, client_config.config_filename)
+        target = instance.base.cfg_dir
+        Logger.print_status(f"Linking {source} to {target}")
+        try:
+            create_symlink(source, target)
+        except subprocess.CalledProcessError:
+            Logger.print_error("Creating symlink failed!")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/client_dialogs.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/client_dialogs.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/client_dialogs.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/client_dialogs.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,88 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from typing import List
+
+from components.webui_client.base_data import BaseWebClient
+from core.logger import DialogType, Logger
+
+
+def print_moonraker_not_found_dialog() -> None:
+    Logger.print_dialog(
+        DialogType.WARNING,
+        [
+            "No local Moonraker installation was found!",
+            "\n\n",
+            "It is possible to install Mainsail without a local Moonraker installation. "
+            "If you continue, you need to make sure, that Moonraker is installed on "
+            "another machine in your network. Otherwise Mainsail will NOT work "
+            "correctly.",
+        ],
+    )
+
+
+def print_client_already_installed_dialog(name: str) -> None:
+    Logger.print_dialog(
+        DialogType.WARNING,
+        [
+            f"{name} seems to be already installed!",
+            f"If you continue, your current {name} installation will be overwritten.",
+        ],
+    )
+
+
+def print_client_port_select_dialog(
+    name: str, port: int, ports_in_use: List[int]
+) -> None:
+    Logger.print_dialog(
+        DialogType.CUSTOM,
+        [
+            f"Please select the port, {name} should be served on. If your are unsure "
+            f"what to select, hit Enter to apply the suggested value of: {port}",
+            "\n\n",
+            f"In case you need {name} to be served on a specific port, you can set it "
+            f"now. Make sure that the port is not already used by another application "
+            f"on your system!",
+            "\n\n",
+            "The following ports were found to be in use already:",
+            *[f"● {port}" for port in ports_in_use],
+        ],
+    )
+
+
+def print_install_client_config_dialog(client: BaseWebClient) -> None:
+    name = client.display_name
+    url = client.client_config.repo_url.replace(".git", "")
+    Logger.print_dialog(
+        DialogType.INFO,
+        [
+            f"It is recommended to use special macros in order to have {name} fully "
+            f"functional and working.",
+            "\n\n",
+            f"The recommended macros for {name} can be seen here:",
+            url,
+            "\n\n",
+            "If you already use these macros skip this step. Otherwise you should "
+            "consider to answer with 'Y' to download the recommended macros.",
+        ],
+    )
+
+
+def print_ipv6_warning_dialog() -> None:
+    Logger.print_dialog(
+        DialogType.WARNING,
+        [
+            "It looks like IPv6 is enabled on this system!",
+            "This may cause issues with the installation of NGINX in the following "
+            "steps! It is recommended to disable IPv6 on your system to avoid this issue.",
+            "\n\n",
+            "If you think this warning is a false alarm, and you are sure that "
+            "IPv6 is disabled, you can continue with the installation.",
+        ],
+    )
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/client_remove.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/client_remove.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/client_remove.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/client_remove.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,85 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from typing import List
+
+from components.klipper.klipper import Klipper
+from components.moonraker.moonraker import Moonraker
+from components.webui_client.base_data import (
+    BaseWebClient,
+)
+from components.webui_client.client_config.client_config_remove import (
+    run_client_config_removal,
+)
+from core.backup_manager.backup_manager import BackupManager
+from core.constants import NGINX_SITES_AVAILABLE, NGINX_SITES_ENABLED
+from core.logger import Logger
+from utils.config_utils import remove_config_section
+from utils.fs_utils import (
+    remove_with_sudo,
+    run_remove_routines,
+)
+from utils.instance_utils import get_instances
+
+
+def run_client_removal(
+    client: BaseWebClient,
+    remove_client: bool,
+    remove_client_cfg: bool,
+    backup_config: bool,
+) -> None:
+    mr_instances: List[Moonraker] = get_instances(Moonraker)
+    kl_instances: List[Klipper] = get_instances(Klipper)
+
+    if backup_config:
+        bm = BackupManager()
+        bm.backup_file(client.config_file)
+
+    if remove_client:
+        client_name = client.name
+        remove_client_dir(client)
+        remove_client_nginx_config(client_name)
+        remove_client_nginx_logs(client, kl_instances)
+
+        section = f"update_manager {client_name}"
+        remove_config_section(section, mr_instances)
+
+    if remove_client_cfg:
+        run_client_config_removal(
+            client.client_config,
+            kl_instances,
+            mr_instances,
+        )
+
+
+def remove_client_dir(client: BaseWebClient) -> None:
+    Logger.print_status(f"Removing {client.display_name} ...")
+    run_remove_routines(client.client_dir)
+
+
+def remove_client_nginx_config(name: str) -> None:
+    Logger.print_status(f"Removing NGINX config for {name.capitalize()} ...")
+
+    remove_with_sudo(NGINX_SITES_AVAILABLE.joinpath(name))
+    remove_with_sudo(NGINX_SITES_ENABLED.joinpath(name))
+
+
+def remove_client_nginx_logs(client: BaseWebClient, instances: List[Klipper]) -> None:
+    Logger.print_status(f"Removing NGINX logs for {client.display_name} ...")
+
+    remove_with_sudo(client.nginx_access_log)
+    remove_with_sudo(client.nginx_error_log)
+
+    if not instances:
+        return
+
+    for instance in instances:
+        run_remove_routines(
+            instance.base.log_dir.joinpath(client.nginx_access_log.name)
+        )
+        run_remove_routines(instance.base.log_dir.joinpath(client.nginx_error_log.name))
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/client_setup.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/client_setup.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/client_setup.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/client_setup.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,190 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+import shutil
+import tempfile
+from pathlib import Path
+from typing import List
+
+from components.klipper.klipper import Klipper
+from components.moonraker.moonraker import Moonraker
+from components.webui_client import MODULE_PATH
+from components.webui_client.base_data import (
+    BaseWebClient,
+    BaseWebClientConfig,
+    WebClientType,
+)
+from components.webui_client.client_config.client_config_setup import (
+    install_client_config,
+)
+from components.webui_client.client_dialogs import (
+    print_client_port_select_dialog,
+    print_install_client_config_dialog,
+    print_moonraker_not_found_dialog,
+)
+from components.webui_client.client_utils import (
+    copy_common_vars_nginx_cfg,
+    copy_upstream_nginx_cfg,
+    create_nginx_cfg,
+    detect_client_cfg_conflict,
+    enable_mainsail_remotemode,
+    get_next_free_port,
+    is_valid_port,
+    read_ports_from_nginx_configs,
+    symlink_webui_nginx_log,
+)
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import Logger
+from core.settings.kiauh_settings import KiauhSettings
+from utils.common import check_install_dependencies
+from utils.config_utils import add_config_section
+from utils.fs_utils import unzip
+from utils.input_utils import get_confirm, get_number_input
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    cmd_sysctl_service,
+    download_file,
+    get_ipv4_addr,
+)
+
+
+def install_client(client: BaseWebClient) -> None:
+    if client is None:
+        raise ValueError("Missing parameter client_data!")
+
+    if client.client_dir.exists():
+        Logger.print_info(
+            f"{client.display_name} seems to be already installed! Skipped ..."
+        )
+        return
+
+    mr_instances: List[Moonraker] = get_instances(Moonraker)
+
+    enable_remotemode = False
+    if not mr_instances:
+        print_moonraker_not_found_dialog()
+        if not get_confirm(f"Continue {client.display_name} installation?"):
+            return
+
+    # if moonraker is not installed or multiple instances
+    # are installed we enable mainsails remote mode
+    if (
+        client.client == WebClientType.MAINSAIL
+        and not mr_instances
+        or len(mr_instances) > 1
+    ):
+        enable_remotemode = True
+
+    kl_instances = get_instances(Klipper)
+    install_client_cfg = False
+    client_config: BaseWebClientConfig = client.client_config
+    if (
+        kl_instances
+        and not client_config.config_dir.exists()
+        and not detect_client_cfg_conflict(client)
+    ):
+        print_install_client_config_dialog(client)
+        question = f"Download the recommended {client_config.display_name}?"
+        install_client_cfg = get_confirm(question, allow_go_back=False)
+
+    settings = KiauhSettings()
+    port: int = settings.get(client.name, "port")
+    ports_in_use: List[int] = read_ports_from_nginx_configs()
+
+    # check if configured port is a valid number and not in use already
+    valid_port = is_valid_port(port, ports_in_use)
+    while not valid_port:
+        next_port = get_next_free_port(ports_in_use)
+        print_client_port_select_dialog(client.display_name, next_port, ports_in_use)
+        port = get_number_input(
+            f"Configure {client.display_name} for port",
+            min_count=int(next_port),
+            default=next_port,
+        )
+        valid_port = is_valid_port(port, ports_in_use)
+
+    check_install_dependencies({"nginx"})
+
+    try:
+        download_client(client)
+        if enable_remotemode and client.client == WebClientType.MAINSAIL:
+            enable_mainsail_remotemode()
+        if mr_instances:
+            add_config_section(
+                section=f"update_manager {client.name}",
+                instances=mr_instances,
+                options=[
+                    ("type", "web"),
+                    ("channel", "stable"),
+                    ("repo", str(client.repo_path)),
+                    ("path", str(client.client_dir)),
+                ],
+            )
+            InstanceManager.restart_all(mr_instances)
+        if install_client_cfg and kl_instances:
+            install_client_config(client)
+
+        copy_upstream_nginx_cfg()
+        copy_common_vars_nginx_cfg()
+        create_nginx_cfg(
+            display_name=client.display_name,
+            cfg_name=client.name,
+            template_src=MODULE_PATH.joinpath("assets/nginx_cfg"),
+            PORT=port,
+            ROOT_DIR=client.client_dir,
+            NAME=client.name,
+        )
+
+        if kl_instances:
+            symlink_webui_nginx_log(client, kl_instances)
+        cmd_sysctl_service("nginx", "restart")
+
+    except Exception as e:
+        Logger.print_error(f"{client.display_name} installation failed!\n{e}")
+        return
+
+    log = f"Open {client.display_name} now on: http://{get_ipv4_addr()}:{port}"
+    Logger.print_ok(f"{client.display_name} installation complete!", start="\n")
+    Logger.print_ok(log, prefix=False, end="\n\n")
+
+
+def download_client(client: BaseWebClient) -> None:
+    zipfile = f"{client.name.lower()}.zip"
+    target = Path().home().joinpath(zipfile)
+    try:
+        Logger.print_status(
+            f"Downloading {client.display_name} from {client.download_url} ..."
+        )
+        download_file(client.download_url, target, True)
+        Logger.print_ok("Download complete!")
+
+        Logger.print_status(f"Extracting {zipfile} ...")
+        unzip(target, client.client_dir)
+        target.unlink(missing_ok=True)
+        Logger.print_ok("OK!")
+
+    except Exception:
+        Logger.print_error(f"Downloading {client.display_name} failed!")
+        raise
+
+
+def update_client(client: BaseWebClient) -> None:
+    Logger.print_status(f"Updating {client.display_name} ...")
+    if not client.client_dir.exists():
+        Logger.print_info(
+            f"Unable to update {client.display_name}. Directory does not exist! Skipping ..."
+        )
+        return
+
+    with tempfile.NamedTemporaryFile(suffix=".json") as tmp_file:
+        Logger.print_status(
+            f"Creating temporary backup of {client.config_file} as {tmp_file.name} ..."
+        )
+        shutil.copy(client.config_file, tmp_file.name)
+        download_client(client)
+        shutil.copy(tmp_file.name, client.config_file)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/client_utils.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/client_utils.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/client_utils.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/client_utils.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,373 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import json
+import re
+import shutil
+from pathlib import Path
+from subprocess import PIPE, CalledProcessError, run
+from typing import List, get_args
+
+from components.klipper.klipper import Klipper
+from components.webui_client import MODULE_PATH
+from components.webui_client.base_data import (
+    BaseWebClient,
+    WebClientType,
+)
+from components.webui_client.fluidd_data import FluiddData
+from components.webui_client.mainsail_data import MainsailData
+from core.backup_manager.backup_manager import BackupManager
+from core.constants import (
+    COLOR_CYAN,
+    COLOR_YELLOW,
+    NGINX_CONFD,
+    NGINX_SITES_AVAILABLE,
+    NGINX_SITES_ENABLED,
+    RESET_FORMAT,
+)
+from core.logger import Logger
+from core.settings.kiauh_settings import KiauhSettings
+from core.submodules.simple_config_parser.src.simple_config_parser.simple_config_parser import (
+    SimpleConfigParser,
+)
+from core.types import ComponentStatus
+from utils.common import get_install_status
+from utils.fs_utils import create_symlink, remove_file
+from utils.git_utils import (
+    get_latest_remote_tag,
+    get_latest_unstable_tag,
+)
+from utils.instance_utils import get_instances
+
+
+def get_client_status(
+    client: BaseWebClient, fetch_remote: bool = False
+) -> ComponentStatus:
+    files = [
+        NGINX_SITES_AVAILABLE.joinpath(client.name),
+        NGINX_CONFD.joinpath("upstreams.conf"),
+        NGINX_CONFD.joinpath("common_vars.conf"),
+    ]
+    comp_status: ComponentStatus = get_install_status(client.client_dir, files=files)
+
+    # if the client dir does not exist, set the status to not
+    # installed even if the other files are present
+    if not client.client_dir.exists():
+        comp_status.status = 0
+
+    comp_status.local = get_local_client_version(client)
+    comp_status.remote = get_remote_client_version(client) if fetch_remote else None
+    return comp_status
+
+
+def get_client_config_status(client: BaseWebClient) -> ComponentStatus:
+    return get_install_status(client.client_config.config_dir)
+
+
+def get_current_client_config() -> str:
+    mainsail, fluidd = MainsailData(), FluiddData()
+    clients: List[BaseWebClient] = [mainsail, fluidd]
+    installed = [c for c in clients if c.client_config.config_dir.exists()]
+
+    if not installed:
+        return f"{COLOR_CYAN}-{RESET_FORMAT}"
+    elif len(installed) == 1:
+        cfg = installed[0].client_config
+        return f"{COLOR_CYAN}{cfg.display_name}{RESET_FORMAT}"
+
+    # at this point, both client config folders exists, so we need to check
+    # which are actually included in the printer.cfg of all klipper instances
+    mainsail_includes, fluidd_includes = [], []
+    klipper_instances: List[Klipper] = get_instances(Klipper)
+    for instance in klipper_instances:
+        scp = SimpleConfigParser()
+        scp.read_file(instance.cfg_file)
+        includes_mainsail = scp.has_section(mainsail.client_config.config_section)
+        includes_fluidd = scp.has_section(fluidd.client_config.config_section)
+
+        if includes_mainsail:
+            mainsail_includes.append(instance)
+        if includes_fluidd:
+            fluidd_includes.append(instance)
+
+        # if both are included in the same file, we have a potential conflict
+        if includes_mainsail and includes_fluidd:
+            return f"{COLOR_YELLOW}Conflict!{RESET_FORMAT}"
+
+    if not mainsail_includes and not fluidd_includes:
+        # there are no includes at all, even though the client config folders exist
+        return f"{COLOR_CYAN}-{RESET_FORMAT}"
+    elif len(fluidd_includes) > len(mainsail_includes):
+        # there are more instances that include fluidd than mainsail
+        return f"{COLOR_CYAN}{fluidd.client_config.display_name}{RESET_FORMAT}"
+    else:
+        # there are the same amount of non-conflicting includes for each config
+        # or more instances include mainsail than fluidd
+        return f"{COLOR_CYAN}{mainsail.client_config.display_name}{RESET_FORMAT}"
+
+
+def enable_mainsail_remotemode() -> None:
+    Logger.print_status("Enable Mainsails remote mode ...")
+    c_json = MainsailData().client_dir.joinpath("config.json")
+    with open(c_json, "r") as f:
+        config_data = json.load(f)
+
+    if config_data["instancesDB"] == "browser":
+        Logger.print_info("Remote mode already configured. Skipped ...")
+        return
+
+    Logger.print_status("Setting instance storage location to 'browser' ...")
+    config_data["instancesDB"] = "browser"
+
+    with open(c_json, "w") as f:
+        json.dump(config_data, f, indent=4)
+    Logger.print_ok("Mainsails remote mode enabled!")
+
+
+def symlink_webui_nginx_log(
+    client: BaseWebClient, klipper_instances: List[Klipper]
+) -> None:
+    Logger.print_status("Link NGINX logs into log directory ...")
+    access_log = client.nginx_access_log
+    error_log = client.nginx_error_log
+
+    for instance in klipper_instances:
+        desti_access = instance.base.log_dir.joinpath(access_log.name)
+        if not desti_access.exists():
+            desti_access.symlink_to(access_log)
+
+        desti_error = instance.base.log_dir.joinpath(error_log.name)
+        if not desti_error.exists():
+            desti_error.symlink_to(error_log)
+
+
+def get_local_client_version(client: BaseWebClient) -> str | None:
+    relinfo_file = client.client_dir.joinpath("release_info.json")
+    version_file = client.client_dir.joinpath(".version")
+
+    if not client.client_dir.exists():
+        return None
+    if not relinfo_file.is_file() and not version_file.is_file():
+        return "n/a"
+
+    if relinfo_file.is_file():
+        with open(relinfo_file, "r") as f:
+            return str(json.load(f)["version"])
+    else:
+        with open(version_file, "r") as f:
+            return f.readlines()[0]
+
+
+def get_remote_client_version(client: BaseWebClient) -> str | None:
+    try:
+        if (tag := get_latest_remote_tag(client.repo_path)) != "":
+            return str(tag)
+        return None
+    except Exception:
+        return None
+
+
+def backup_client_data(client: BaseWebClient) -> None:
+    name = client.name
+    src = client.client_dir
+    dest = client.backup_dir
+
+    with open(src.joinpath(".version"), "r") as v:
+        version = v.readlines()[0]
+
+    bm = BackupManager()
+    bm.backup_directory(f"{name}-{version}", src, dest)
+    bm.backup_file(client.config_file, dest)
+    bm.backup_file(NGINX_SITES_AVAILABLE.joinpath(name), dest)
+
+
+def backup_client_config_data(client: BaseWebClient) -> None:
+    client_config = client.client_config
+    name = client_config.name
+    source = client_config.config_dir
+    target = client_config.backup_dir
+    bm = BackupManager()
+    bm.backup_directory(name, source, target)
+
+
+def get_existing_clients() -> List[BaseWebClient]:
+    clients = list(get_args(WebClientType))
+    installed_clients: List[BaseWebClient] = []
+    for client in clients:
+        if client.client_dir.exists():
+            installed_clients.append(client)
+
+    return installed_clients
+
+
+def detect_client_cfg_conflict(curr_client: BaseWebClient) -> bool:
+    """
+    Check if any other client configs are present on the system.
+    It is usually not harmful, but chances are they can conflict each other.
+    Multiple client configs are, at least, redundant to have them installed
+    :param curr_client: The client name to check for the conflict
+    :return: True, if other client configs were found, else False
+    """
+
+    mainsail_cfg_status: ComponentStatus = get_client_config_status(MainsailData())
+    fluidd_cfg_status: ComponentStatus = get_client_config_status(FluiddData())
+
+    if curr_client.client == WebClientType.MAINSAIL and fluidd_cfg_status.status == 2:
+        return True
+    if curr_client.client == WebClientType.FLUIDD and mainsail_cfg_status.status == 2:
+        return True
+
+    return False
+
+
+def get_download_url(base_url: str, client: BaseWebClient) -> str:
+    settings = KiauhSettings()
+    use_unstable = settings.get(client.name, "unstable_releases")
+    stable_url = f"{base_url}/latest/download/{client.name}.zip"
+
+    if not use_unstable:
+        return stable_url
+
+    try:
+        unstable_tag = get_latest_unstable_tag(client.repo_path)
+        if unstable_tag == "":
+            raise Exception
+        return f"{base_url}/download/{unstable_tag}/{client.name}.zip"
+    except Exception:
+        return stable_url
+
+
+#################################################
+## NGINX RELATED FUNCTIONS
+#################################################
+
+
+def copy_upstream_nginx_cfg() -> None:
+    """
+    Creates an upstream.conf in /etc/nginx/conf.d
+    :return: None
+    """
+    source = MODULE_PATH.joinpath("assets/upstreams.conf")
+    target = NGINX_CONFD.joinpath("upstreams.conf")
+    try:
+        command = ["sudo", "cp", source, target]
+        run(command, stderr=PIPE, check=True)
+    except CalledProcessError as e:
+        log = f"Unable to create upstreams.conf: {e.stderr.decode()}"
+        Logger.print_error(log)
+        raise
+
+
+def copy_common_vars_nginx_cfg() -> None:
+    """
+    Creates a common_vars.conf in /etc/nginx/conf.d
+    :return: None
+    """
+    source = MODULE_PATH.joinpath("assets/common_vars.conf")
+    target = NGINX_CONFD.joinpath("common_vars.conf")
+    try:
+        command = ["sudo", "cp", source, target]
+        run(command, stderr=PIPE, check=True)
+    except CalledProcessError as e:
+        log = f"Unable to create upstreams.conf: {e.stderr.decode()}"
+        Logger.print_error(log)
+        raise
+
+
+def generate_nginx_cfg_from_template(name: str, template_src: Path, **kwargs) -> None:
+    """
+    Creates an NGINX config from a template file and
+    replaces all placeholders passed as kwargs. A placeholder must be defined
+    in the template file as %{placeholder}%.
+    :param name: name of the config to create
+    :param template_src: the path to the template file
+    :return: None
+    """
+    tmp = Path.home().joinpath(f"{name}.tmp")
+    shutil.copy(template_src, tmp)
+    with open(tmp, "r+") as f:
+        content = f.read()
+
+        for key, value in kwargs.items():
+            content = content.replace(f"%{key}%", str(value))
+
+        f.seek(0)
+        f.write(content)
+        f.truncate()
+
+    target = NGINX_SITES_AVAILABLE.joinpath(name)
+    try:
+        command = ["sudo", "mv", tmp, target]
+        run(command, stderr=PIPE, check=True)
+    except CalledProcessError as e:
+        log = f"Unable to create '{target}': {e.stderr.decode()}"
+        Logger.print_error(log)
+        raise
+
+
+def create_nginx_cfg(
+    display_name: str,
+    cfg_name: str,
+    template_src: Path,
+    **kwargs,
+) -> None:
+    from utils.sys_utils import set_nginx_permissions
+
+    try:
+        Logger.print_status(f"Creating NGINX config for {display_name} ...")
+
+        source = NGINX_SITES_AVAILABLE.joinpath(cfg_name)
+        target = NGINX_SITES_ENABLED.joinpath(cfg_name)
+        remove_file(Path("/etc/nginx/sites-enabled/default"), True)
+        generate_nginx_cfg_from_template(cfg_name, template_src=template_src, **kwargs)
+        create_symlink(source, target, True)
+        set_nginx_permissions()
+
+        Logger.print_ok(f"NGINX config for {display_name} successfully created.")
+    except Exception:
+        Logger.print_error(f"Creating NGINX config for {display_name} failed!")
+        raise
+
+
+def read_ports_from_nginx_configs() -> List[int]:
+    """
+    Helper function to iterate over all NGINX configs and read all ports defined for listen
+    :return: A sorted list of listen ports
+    """
+    if not NGINX_SITES_ENABLED.exists():
+        return []
+
+    port_list = []
+    for config in NGINX_SITES_ENABLED.iterdir():
+        if not config.is_file():
+            continue
+
+        with open(config, "r") as cfg:
+            lines = cfg.readlines()
+
+        for line in lines:
+            line = line.replace("default_server", "")
+            line = re.sub(r"[;:\[\]]", "", line.strip())
+            if line.startswith("listen") and line.split()[-1] not in port_list:
+                port_list.append(line.split()[-1])
+
+    ports_to_ints_list = [int(port) for port in port_list]
+    return sorted(ports_to_ints_list, key=lambda x: int(x))
+
+
+def is_valid_port(port: int, ports_in_use: List[int]) -> bool:
+    return port not in ports_in_use
+
+
+def get_next_free_port(ports_in_use: List[int]) -> int:
+    valid_ports = set(range(80, 7125))
+    used_ports = set(map(int, ports_in_use))
+
+    return min(valid_ports - used_ports)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/fluidd_data.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/fluidd_data.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/fluidd_data.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/fluidd_data.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,56 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from __future__ import annotations
+
+from dataclasses import dataclass
+from pathlib import Path
+
+from components.webui_client.base_data import (
+    BaseWebClient,
+    BaseWebClientConfig,
+    WebClientConfigType,
+    WebClientType,
+)
+from core.backup_manager import BACKUP_ROOT_DIR
+
+
+@dataclass()
+class FluiddConfigWeb(BaseWebClientConfig):
+    client_config: WebClientConfigType = WebClientConfigType.FLUIDD
+    name: str = client_config.value
+    display_name: str = name.title()
+    config_dir: Path = Path.home().joinpath("fluidd-config")
+    config_filename: str = "fluidd.cfg"
+    config_section: str = f"include {config_filename}"
+    backup_dir: Path = BACKUP_ROOT_DIR.joinpath("fluidd-config-backups")
+    repo_url: str = "https://github.com/fluidd-core/fluidd-config.git"
+
+
+@dataclass()
+class FluiddData(BaseWebClient):
+    BASE_DL_URL = "https://github.com/fluidd-core/fluidd/releases"
+
+    client: WebClientType = WebClientType.FLUIDD
+    name: str = client.value
+    display_name: str = name.capitalize()
+    client_dir: Path = Path.home().joinpath("fluidd")
+    config_file: Path = client_dir.joinpath("config.json")
+    backup_dir: Path = BACKUP_ROOT_DIR.joinpath("fluidd-backups")
+    repo_path: str = "fluidd-core/fluidd"
+    nginx_access_log: Path = Path("/var/log/nginx/fluidd-access.log")
+    nginx_error_log: Path = Path("/var/log/nginx/fluidd-error.log")
+    client_config: BaseWebClientConfig = None
+    download_url: str | None = None
+
+    def __post_init__(self):
+        from components.webui_client.client_utils import get_download_url
+
+        self.client_config = FluiddConfigWeb()
+        self.download_url = get_download_url(self.BASE_DL_URL, self)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,12 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+MODULE_PATH = Path(__file__).resolve().parent
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/mainsail_data.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/mainsail_data.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/mainsail_data.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/mainsail_data.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,56 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from __future__ import annotations
+
+from dataclasses import dataclass
+from pathlib import Path
+
+from components.webui_client.base_data import (
+    BaseWebClient,
+    BaseWebClientConfig,
+    WebClientConfigType,
+    WebClientType,
+)
+from core.backup_manager import BACKUP_ROOT_DIR
+
+
+@dataclass()
+class MainsailConfigWeb(BaseWebClientConfig):
+    client_config: WebClientConfigType = WebClientConfigType.MAINSAIL
+    name: str = client_config.value
+    display_name: str = name.title()
+    config_dir: Path = Path.home().joinpath("mainsail-config")
+    config_filename: str = "mainsail.cfg"
+    config_section: str = f"include {config_filename}"
+    backup_dir: Path = BACKUP_ROOT_DIR.joinpath("mainsail-config-backups")
+    repo_url: str = "https://github.com/mainsail-crew/mainsail-config.git"
+
+
+@dataclass()
+class MainsailData(BaseWebClient):
+    BASE_DL_URL: str = "https://github.com/mainsail-crew/mainsail/releases"
+
+    client: WebClientType = WebClientType.MAINSAIL
+    name: str = WebClientType.MAINSAIL.value
+    display_name: str = name.capitalize()
+    client_dir: Path = Path.home().joinpath("mainsail")
+    config_file: Path = client_dir.joinpath("config.json")
+    backup_dir: Path = BACKUP_ROOT_DIR.joinpath("mainsail-backups")
+    repo_path: str = "mainsail-crew/mainsail"
+    nginx_access_log: Path = Path("/var/log/nginx/mainsail-access.log")
+    nginx_error_log: Path = Path("/var/log/nginx/mainsail-error.log")
+    client_config: BaseWebClientConfig = None
+    download_url: str | None = None
+
+    def __post_init__(self):
+        from components.webui_client.client_utils import get_download_url
+
+        self.client_config = MainsailConfigWeb()
+        self.download_url = get_download_url(self.BASE_DL_URL, self)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/menus/client_remove_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/menus/client_remove_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/components/webui_client/menus/client_remove_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/components/webui_client/menus/client_remove_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,126 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import Type
+
+from components.webui_client import client_remove
+from components.webui_client.base_data import BaseWebClient
+from core.constants import COLOR_CYAN, COLOR_RED, RESET_FORMAT
+from core.menus import Option
+from core.menus.base_menu import BaseMenu
+
+
+# noinspection PyUnusedLocal
+class ClientRemoveMenu(BaseMenu):
+    def __init__(
+        self, client: BaseWebClient, previous_menu: Type[BaseMenu] | None = None
+    ):
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+        self.client: BaseWebClient = client
+        self.remove_client: bool = False
+        self.remove_client_cfg: bool = False
+        self.backup_config_json: bool = False
+        self.selection_state: bool = False
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.remove_menu import RemoveMenu
+
+        self.previous_menu = previous_menu if previous_menu is not None else RemoveMenu
+
+    def set_options(self) -> None:
+        self.options = {
+            "a": Option(method=self.toggle_all),
+            "1": Option(method=self.toggle_rm_client),
+            "2": Option(method=self.toggle_rm_client_config),
+            "3": Option(method=self.toggle_backup_config_json),
+            "c": Option(method=self.run_removal_process),
+        }
+
+    def print_menu(self) -> None:
+        client_name = self.client.display_name
+        client_config = self.client.client_config
+        client_config_name = client_config.display_name
+
+        header = f" [ Remove {client_name} ] "
+        color = COLOR_RED
+        count = 62 - len(color) - len(RESET_FORMAT)
+        checked = f"[{COLOR_CYAN}x{RESET_FORMAT}]"
+        unchecked = "[ ]"
+        o1 = checked if self.remove_client else unchecked
+        o2 = checked if self.remove_client_cfg else unchecked
+        o3 = checked if self.backup_config_json else unchecked
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ Enter a number and hit enter to select / deselect     ║
+            ║ the specific option for removal.                      ║
+            ╟───────────────────────────────────────────────────────╢
+            ║  a) {self._get_selection_state_str():37}             ║
+            ╟───────────────────────────────────────────────────────╢
+            ║  1) {o1} Remove {client_name:16}                       ║
+            ║  2) {o2} Remove {client_config_name:24}               ║
+            ║  3) {o3} Backup config.json                            ║
+            ╟───────────────────────────────────────────────────────╢
+            ║  C) Continue                                          ║
+            ╟───────────────────────────────────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def toggle_all(self, **kwargs) -> None:
+        self.selection_state = not self.selection_state
+        self.remove_client = self.selection_state
+        self.remove_client_cfg = self.selection_state
+        self.backup_config_json = self.selection_state
+
+    def toggle_rm_client(self, **kwargs) -> None:
+        self.remove_client = not self.remove_client
+
+    def toggle_rm_client_config(self, **kwargs) -> None:
+        self.remove_client_cfg = not self.remove_client_cfg
+
+    def toggle_backup_config_json(self, **kwargs) -> None:
+        self.backup_config_json = not self.backup_config_json
+
+    def run_removal_process(self, **kwargs) -> None:
+        if (
+            not self.remove_client
+            and not self.remove_client_cfg
+            and not self.backup_config_json
+        ):
+            error = f"{COLOR_RED}Nothing selected ...{RESET_FORMAT}"
+            print(error)
+            return
+
+        client_remove.run_client_removal(
+            client=self.client,
+            remove_client=self.remove_client,
+            remove_client_cfg=self.remove_client_cfg,
+            backup_config=self.backup_config_json,
+        )
+
+        self.remove_client = False
+        self.remove_client_cfg = False
+        self.backup_config_json = False
+
+        self._go_back()
+
+    def _get_selection_state_str(self) -> str:
+        return (
+            "Select everything" if not self.selection_state else "Deselect everything"
+        )
+
+    def _go_back(self, **kwargs) -> None:
+        if self.previous_menu is not None:
+            self.previous_menu().run()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/backup_manager/backup_manager.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/backup_manager/backup_manager.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/backup_manager/backup_manager.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/backup_manager/backup_manager.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,98 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import shutil
+from pathlib import Path
+from typing import List
+
+from core.backup_manager import BACKUP_ROOT_DIR
+from core.logger import Logger
+from utils.common import get_current_date
+
+
+class BackupManagerException(Exception):
+    pass
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class BackupManager:
+    def __init__(self, backup_root_dir: Path = BACKUP_ROOT_DIR):
+        self._backup_root_dir: Path = backup_root_dir
+        self._ignore_folders: List[str] = []
+
+    @property
+    def backup_root_dir(self) -> Path:
+        return self._backup_root_dir
+
+    @backup_root_dir.setter
+    def backup_root_dir(self, value: Path):
+        self._backup_root_dir = value
+
+    @property
+    def ignore_folders(self) -> List[str]:
+        return self._ignore_folders
+
+    @ignore_folders.setter
+    def ignore_folders(self, value: List[str]):
+        self._ignore_folders = value
+
+    def backup_file(self, file: Path, target: Path | None = None, custom_filename=None):
+        Logger.print_status(f"Creating backup of {file} ...")
+
+        if not file.exists():
+            Logger.print_info("File does not exist! Skipping ...")
+            return
+
+        target = self.backup_root_dir if target is None else target
+
+        if Path(file).is_file():
+            date = get_current_date().get("date")
+            time = get_current_date().get("time")
+            filename = f"{file.stem}-{date}-{time}{file.suffix}"
+            filename = custom_filename if custom_filename is not None else filename
+            try:
+                Path(target).mkdir(exist_ok=True)
+                shutil.copyfile(file, target.joinpath(filename))
+                Logger.print_ok("Backup successful!")
+            except OSError as e:
+                Logger.print_error(f"Unable to backup '{file}':\n{e}")
+        else:
+            Logger.print_info(f"File '{file}' not found ...")
+
+    def backup_directory(
+        self, name: str, source: Path, target: Path | None = None
+    ) -> Path | None:
+        Logger.print_status(f"Creating backup of {name} in {target} ...")
+
+        if source is None or not Path(source).exists():
+            Logger.print_info("Source directory does not exist! Skipping ...")
+            return
+
+        target = self.backup_root_dir if target is None else target
+        try:
+            date = get_current_date().get("date")
+            time = get_current_date().get("time")
+            backup_target = target.joinpath(f"{name.lower()}-{date}-{time}")
+            shutil.copytree(source, backup_target, ignore=self.ignore_folders_func)
+            Logger.print_ok("Backup successful!")
+
+            return backup_target
+
+        except OSError as e:
+            Logger.print_error(f"Unable to backup directory '{source}':\n{e}")
+            raise BackupManagerException(f"Unable to backup directory '{source}':\n{e}")
+
+    def ignore_folders_func(self, dirpath, filenames) -> List[str]:
+        return (
+            [f for f in filenames if f in self._ignore_folders]
+            if self._ignore_folders
+            else []
+        )
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/backup_manager/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/backup_manager/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/backup_manager/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/backup_manager/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,12 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+BACKUP_ROOT_DIR = Path.home().joinpath("kiauh-backups")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/constants.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/constants.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/constants.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/constants.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,39 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+import os
+import pwd
+from pathlib import Path
+
+from core.backup_manager import BACKUP_ROOT_DIR
+
+# text colors and formats
+COLOR_WHITE = "\033[37m"  # white
+COLOR_MAGENTA = "\033[35m"  # magenta
+COLOR_GREEN = "\033[92m"  # bright green
+COLOR_YELLOW = "\033[93m"  # bright yellow
+COLOR_RED = "\033[91m"  # bright red
+COLOR_CYAN = "\033[96m"  # bright cyan
+RESET_FORMAT = "\033[0m"  # reset format
+
+# global dependencies
+GLOBAL_DEPS = ["git", "wget", "curl", "unzip", "dfu-util", "python3-virtualenv"]
+
+# strings
+INVALID_CHOICE = "Invalid choice. Please select a valid value."
+
+# current user
+CURRENT_USER = pwd.getpwuid(os.getuid())[0]
+
+# dirs
+SYSTEMD = Path("/etc/systemd/system")
+PRINTER_CFG_BACKUP_DIR = BACKUP_ROOT_DIR.joinpath("printer-cfg-backups")
+NGINX_SITES_AVAILABLE = Path("/etc/nginx/sites-available")
+NGINX_SITES_ENABLED = Path("/etc/nginx/sites-enabled")
+NGINX_CONFD = Path("/etc/nginx/conf.d")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/decorators.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/decorators.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/decorators.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/decorators.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,24 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import warnings
+from typing import Callable
+
+
+def deprecated(info: str = "", replaced_by: Callable | None = None) -> Callable:
+    def decorator(func) -> Callable:
+        def wrapper(*args, **kwargs):
+            msg = f"{info}{replaced_by.__name__ if replaced_by else ''}"
+            warnings.warn(msg, category=DeprecationWarning, stacklevel=2)
+            return func(*args, **kwargs)
+
+        return wrapper
+
+    return decorator
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/instance_manager/base_instance.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/instance_manager/base_instance.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/instance_manager/base_instance.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/instance_manager/base_instance.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,58 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from __future__ import annotations
+
+import re
+from dataclasses import dataclass, field
+from pathlib import Path
+from typing import List
+
+from utils.fs_utils import get_data_dir
+
+SUFFIX_BLACKLIST: List[str] = ["None", "mcu", "obico", "bambu", "companion"]
+
+
+@dataclass(repr=True)
+class BaseInstance:
+    instance_type: type
+    suffix: str
+    log_file_name: str | None = None
+    data_dir: Path = field(init=False)
+    base_folders: List[Path] = field(init=False)
+    cfg_dir: Path = field(init=False)
+    log_dir: Path = field(init=False)
+    gcodes_dir: Path = field(init=False)
+    comms_dir: Path = field(init=False)
+    sysd_dir: Path = field(init=False)
+    is_legacy_instance: bool = field(init=False)
+
+    def __post_init__(self):
+        self.data_dir = get_data_dir(self.instance_type, self.suffix)
+        # the following attributes require the data_dir to be set
+        self.cfg_dir = self.data_dir.joinpath("config")
+        self.log_dir = self.data_dir.joinpath("logs")
+        self.gcodes_dir = self.data_dir.joinpath("gcodes")
+        self.comms_dir = self.data_dir.joinpath("comms")
+        self.sysd_dir = self.data_dir.joinpath("systemd")
+        self.is_legacy_instance = self._set_is_legacy_instance()
+        self.base_folders = [
+            self.data_dir,
+            self.cfg_dir,
+            self.log_dir,
+            self.gcodes_dir,
+            self.comms_dir,
+            self.sysd_dir,
+        ]
+
+    def _set_is_legacy_instance(self) -> bool:
+        legacy_pattern = r"^(?!printer)(.+)_data"
+        match = re.search(legacy_pattern, self.data_dir.name)
+
+        return True if (match and self.suffix != "") else False
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/instance_manager/instance_manager.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/instance_manager/instance_manager.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/instance_manager/instance_manager.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/instance_manager/instance_manager.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,108 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from pathlib import Path
+from subprocess import CalledProcessError
+from typing import List
+
+from core.logger import Logger
+from utils.instance_type import InstanceType
+from utils.sys_utils import cmd_sysctl_service
+
+
+class InstanceManager:
+    @staticmethod
+    def enable(instance: InstanceType) -> None:
+        service_name: str = instance.service_file_path.name
+        try:
+            cmd_sysctl_service(service_name, "enable")
+        except CalledProcessError as e:
+            Logger.print_error(f"Error enabling service {service_name}:")
+            Logger.print_error(f"{e}")
+
+    @staticmethod
+    def disable(instance: InstanceType) -> None:
+        service_name: str = instance.service_file_path.name
+        try:
+            cmd_sysctl_service(service_name, "disable")
+        except CalledProcessError as e:
+            Logger.print_error(f"Error disabling {service_name}: {e}")
+            raise
+
+    @staticmethod
+    def start(instance: InstanceType) -> None:
+        service_name: str = instance.service_file_path.name
+        try:
+            cmd_sysctl_service(service_name, "start")
+        except CalledProcessError as e:
+            Logger.print_error(f"Error starting {service_name}: {e}")
+            raise
+
+    @staticmethod
+    def stop(instance: InstanceType) -> None:
+        name: str = instance.service_file_path.name
+        try:
+            cmd_sysctl_service(name, "stop")
+        except CalledProcessError as e:
+            Logger.print_error(f"Error stopping {name}: {e}")
+            raise
+
+    @staticmethod
+    def restart(instance: InstanceType) -> None:
+        name: str = instance.service_file_path.name
+        try:
+            cmd_sysctl_service(name, "restart")
+        except CalledProcessError as e:
+            Logger.print_error(f"Error restarting {name}: {e}")
+            raise
+
+    @staticmethod
+    def start_all(instances: List[InstanceType]) -> None:
+        for instance in instances:
+            InstanceManager.start(instance)
+
+    @staticmethod
+    def stop_all(instances: List[InstanceType]) -> None:
+        for instance in instances:
+            InstanceManager.stop(instance)
+
+    @staticmethod
+    def restart_all(instances: List[InstanceType]) -> None:
+        for instance in instances:
+            InstanceManager.restart(instance)
+
+    @staticmethod
+    def remove(instance: InstanceType) -> None:
+        from utils.fs_utils import run_remove_routines
+        from utils.sys_utils import remove_system_service
+
+        try:
+            # remove the service file
+            service_file_path: Path = instance.service_file_path
+            if service_file_path is not None:
+                remove_system_service(service_file_path.name)
+
+            # then remove all the log files
+            if (
+                not instance.log_file_name
+                or not instance.base.log_dir
+                or not instance.base.log_dir.exists()
+            ):
+                return
+
+            files = instance.base.log_dir.iterdir()
+            logs = [f for f in files if f.name.startswith(instance.log_file_name)]
+            for log in logs:
+                Logger.print_status(f"Remove '{log}'")
+                run_remove_routines(log)
+
+        except Exception as e:
+            Logger.print_error(f"Error removing service: {e}")
+            raise
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/logger.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/logger.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/logger.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/logger.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,194 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from enum import Enum
+from typing import List
+
+from core.constants import (
+    COLOR_CYAN,
+    COLOR_GREEN,
+    COLOR_MAGENTA,
+    COLOR_RED,
+    COLOR_WHITE,
+    COLOR_YELLOW,
+    RESET_FORMAT,
+)
+
+
+class DialogType(Enum):
+    INFO = ("INFO", COLOR_WHITE)
+    SUCCESS = ("SUCCESS", COLOR_GREEN)
+    ATTENTION = ("ATTENTION", COLOR_YELLOW)
+    WARNING = ("WARNING", COLOR_YELLOW)
+    ERROR = ("ERROR", COLOR_RED)
+    CUSTOM = (None, None)
+
+
+class DialogCustomColor(Enum):
+    WHITE = COLOR_WHITE
+    GREEN = COLOR_GREEN
+    YELLOW = COLOR_YELLOW
+    RED = COLOR_RED
+    CYAN = COLOR_CYAN
+    MAGENTA = COLOR_MAGENTA
+
+
+LINE_WIDTH = 53
+
+
+class Logger:
+    @staticmethod
+    def info(msg) -> None:
+        # log to kiauh.log
+        pass
+
+    @staticmethod
+    def warn(msg) -> None:
+        # log to kiauh.log
+        pass
+
+    @staticmethod
+    def error(msg) -> None:
+        # log to kiauh.log
+        pass
+
+    @staticmethod
+    def print_info(msg, prefix=True, start="", end="\n") -> None:
+        message = f"[INFO] {msg}" if prefix else msg
+        print(f"{COLOR_WHITE}{start}{message}{RESET_FORMAT}", end=end)
+
+    @staticmethod
+    def print_ok(msg: str = "Success!", prefix=True, start="", end="\n") -> None:
+        message = f"[OK] {msg}" if prefix else msg
+        print(f"{COLOR_GREEN}{start}{message}{RESET_FORMAT}", end=end)
+
+    @staticmethod
+    def print_warn(msg, prefix=True, start="", end="\n") -> None:
+        message = f"[WARN] {msg}" if prefix else msg
+        print(f"{COLOR_YELLOW}{start}{message}{RESET_FORMAT}", end=end)
+
+    @staticmethod
+    def print_error(msg, prefix=True, start="", end="\n") -> None:
+        message = f"[ERROR] {msg}" if prefix else msg
+        print(f"{COLOR_RED}{start}{message}{RESET_FORMAT}", end=end)
+
+    @staticmethod
+    def print_status(msg, prefix=True, start="", end="\n") -> None:
+        message = f"\n###### {msg}" if prefix else msg
+        print(f"{COLOR_MAGENTA}{start}{message}{RESET_FORMAT}", end=end)
+
+    @staticmethod
+    def print_dialog(
+        title: DialogType,
+        content: List[str],
+        center_content: bool = False,
+        custom_title: str | None = None,
+        custom_color: DialogCustomColor | None = None,
+        margin_top: int = 0,
+        margin_bottom: int = 0,
+    ) -> None:
+        """
+        Prints a dialog with the given title and content.
+        Those dialogs should be used to display verbose messages to the user which
+        require simple interaction like confirmation or input. Do not use this for
+        navigating through the application.
+
+        :param title: The type of the dialog.
+        :param content: The content of the dialog.
+        :param center_content: Whether to center the content or not.
+        :param custom_title: A custom title for the dialog.
+        :param custom_color: A custom color for the dialog.
+        :param margin_top: The number of empty lines to print before the dialog.
+        :param margin_bottom: The number of empty lines to print after the dialog.
+        """
+        dialog_color = Logger._get_dialog_color(title, custom_color)
+        dialog_title = Logger._get_dialog_title(title, custom_title)
+        dialog_title_formatted = Logger._format_dialog_title(dialog_title)
+        dialog_content = Logger.format_content(content, LINE_WIDTH, center_content)
+        top = Logger._format_top_border(dialog_color)
+        bottom = Logger._format_bottom_border()
+
+        print("\n" * margin_top)
+        print(
+            f"{top}{dialog_title_formatted}{dialog_content}{bottom}",
+            end="",
+        )
+        print("\n" * margin_bottom)
+
+    @staticmethod
+    def _get_dialog_title(
+        title: DialogType, custom_title: str | None = None
+    ) -> str | None:
+        if title == DialogType.CUSTOM and custom_title:
+            return f"[ {custom_title} ]"
+        return f"[ {title.value[0]} ]" if title.value[0] else None
+
+    @staticmethod
+    def _get_dialog_color(
+        title: DialogType, custom_color: DialogCustomColor | None = None
+    ) -> str:
+        if title == DialogType.CUSTOM and custom_color:
+            return str(custom_color.value)
+
+        color: str = title.value[1] if title.value[1] else DialogCustomColor.WHITE.value
+
+        return color
+
+    @staticmethod
+    def _format_top_border(color: str) -> str:
+        return f"{color}┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"
+
+    @staticmethod
+    def _format_bottom_border() -> str:
+        return (
+            f"\n┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛{RESET_FORMAT}"
+        )
+
+    @staticmethod
+    def _format_dialog_title(title: str | None) -> str:
+        if title is not None:
+            return textwrap.dedent(f"""
+                ┃ {title:^{LINE_WIDTH}} ┃
+                ┠───────────────────────────────────────────────────────┨
+                """)
+        else:
+            return "\n"
+
+    @staticmethod
+    def format_content(
+        content: List[str],
+        line_width: int,
+        center_content: bool = False,
+        border_left: str = "┃",
+        border_right: str = "┃",
+    ) -> str:
+        wrapper = textwrap.TextWrapper(line_width)
+
+        lines = []
+        for i, c in enumerate(content):
+            paragraph = wrapper.wrap(c)
+            lines.extend(paragraph)
+
+            # add a full blank line if we have a double newline
+            # character unless we are at the end of the list
+            if c == "\n\n" and i < len(content) - 1:
+                lines.append(" " * line_width)
+
+        if not center_content:
+            formatted_lines = [
+                f"{border_left} {line:<{line_width}} {border_right}" for line in lines
+            ]
+        else:
+            formatted_lines = [
+                f"{border_left} {line:^{line_width}} {border_right}" for line in lines
+            ]
+
+        return "\n".join(formatted_lines)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/advanced_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/advanced_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/advanced_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/advanced_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,98 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import Type
+
+from components.klipper import KLIPPER_DIR
+from components.klipper.klipper import Klipper
+from components.klipper_firmware.menus.klipper_build_menu import (
+    KlipperBuildFirmwareMenu,
+)
+from components.klipper_firmware.menus.klipper_flash_menu import (
+    KlipperFlashMethodMenu,
+    KlipperSelectMcuConnectionMenu,
+)
+from components.moonraker import MOONRAKER_DIR
+from components.moonraker.moonraker import Moonraker
+from core.constants import COLOR_YELLOW, RESET_FORMAT
+from core.menus import Option
+from core.menus.base_menu import BaseMenu
+from procedures.system import change_system_hostname
+from utils.git_utils import rollback_repository
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class AdvancedMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None) -> None:
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.main_menu import MainMenu
+
+        self.previous_menu = previous_menu if previous_menu is not None else MainMenu
+
+    def set_options(self) -> None:
+        self.options = {
+            "1": Option(method=self.build),
+            "2": Option(method=self.flash),
+            "3": Option(method=self.build_flash),
+            "4": Option(method=self.get_id),
+            "5": Option(method=self.klipper_rollback),
+            "6": Option(method=self.moonraker_rollback),
+            "7": Option(method=self.change_hostname),
+        }
+
+    def print_menu(self) -> None:
+        header = " [ Advanced Menu ] "
+        color = COLOR_YELLOW
+        count = 62 - len(color) - len(RESET_FORMAT)
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────┬───────────────────────────╢
+            ║ Klipper Firmware:         │ Repository Rollback:      ║
+            ║  1) [Build]               │  5) [Klipper]             ║
+            ║  2) [Flash]               │  6) [Moonraker]           ║
+            ║  3) [Build + Flash]       │                           ║
+            ║  4) [Get MCU ID]          │ System:                   ║
+            ║                           │  7) [Change hostname]     ║
+            ╟───────────────────────────┴───────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def klipper_rollback(self, **kwargs) -> None:
+        rollback_repository(KLIPPER_DIR, Klipper)
+
+    def moonraker_rollback(self, **kwargs) -> None:
+        rollback_repository(MOONRAKER_DIR, Moonraker)
+
+    def build(self, **kwargs) -> None:
+        KlipperBuildFirmwareMenu(previous_menu=self.__class__).run()
+
+    def flash(self, **kwargs) -> None:
+        KlipperFlashMethodMenu(previous_menu=self.__class__).run()
+
+    def build_flash(self, **kwargs) -> None:
+        KlipperBuildFirmwareMenu(previous_menu=KlipperFlashMethodMenu).run()
+        KlipperFlashMethodMenu(previous_menu=self.__class__).run()
+
+    def get_id(self, **kwargs) -> None:
+        KlipperSelectMcuConnectionMenu(
+            previous_menu=self.__class__,
+            standalone=True,
+        ).run()
+
+    def change_hostname(self, **kwargs) -> None:
+        change_system_hostname()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/backup_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/backup_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/backup_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/backup_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,108 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import Type
+
+from components.klipper.klipper_utils import backup_klipper_dir
+from components.klipperscreen.klipperscreen import backup_klipperscreen_dir
+from components.moonraker.moonraker_utils import (
+    backup_moonraker_db_dir,
+    backup_moonraker_dir,
+)
+from components.webui_client.client_utils import (
+    backup_client_config_data,
+    backup_client_data,
+)
+from components.webui_client.fluidd_data import FluiddData
+from components.webui_client.mainsail_data import MainsailData
+from core.constants import COLOR_CYAN, COLOR_YELLOW, RESET_FORMAT
+from core.menus import Option
+from core.menus.base_menu import BaseMenu
+from utils.common import backup_printer_config_dir
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class BackupMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None) -> None:
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.main_menu import MainMenu
+
+        self.previous_menu = previous_menu if previous_menu is not None else MainMenu
+
+    def set_options(self) -> None:
+        self.options = {
+            "1": Option(method=self.backup_klipper),
+            "2": Option(method=self.backup_moonraker),
+            "3": Option(method=self.backup_printer_config),
+            "4": Option(method=self.backup_moonraker_db),
+            "5": Option(method=self.backup_mainsail),
+            "6": Option(method=self.backup_fluidd),
+            "7": Option(method=self.backup_mainsail_config),
+            "8": Option(method=self.backup_fluidd_config),
+            "9": Option(method=self.backup_klipperscreen),
+        }
+
+    def print_menu(self) -> None:
+        header = " [ Backup Menu ] "
+        line1 = f"{COLOR_YELLOW}INFO: Backups are located in '~/kiauh-backups'{RESET_FORMAT}"
+        color = COLOR_CYAN
+        count = 62 - len(color) - len(RESET_FORMAT)
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ {line1:^62} ║
+            ╟───────────────────────────┬───────────────────────────╢
+            ║ Klipper & Moonraker API:  │ Client-Config:            ║
+            ║  1) [Klipper]             │  7) [Mainsail-Config]     ║
+            ║  2) [Moonraker]           │  8) [Fluidd-Config]       ║
+            ║  3) [Config Folder]       │                           ║
+            ║  4) [Moonraker Database]  │ Touchscreen GUI:          ║
+            ║                           │  9) [KlipperScreen]       ║
+            ║ Webinterface:             │                           ║
+            ║  5) [Mainsail]            │                           ║
+            ║  6) [Fluidd]              │                           ║
+            ╟───────────────────────────┴───────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def backup_klipper(self, **kwargs) -> None:
+        backup_klipper_dir()
+
+    def backup_moonraker(self, **kwargs) -> None:
+        backup_moonraker_dir()
+
+    def backup_printer_config(self, **kwargs) -> None:
+        backup_printer_config_dir()
+
+    def backup_moonraker_db(self, **kwargs) -> None:
+        backup_moonraker_db_dir()
+
+    def backup_mainsail(self, **kwargs) -> None:
+        backup_client_data(MainsailData())
+
+    def backup_fluidd(self, **kwargs) -> None:
+        backup_client_data(FluiddData())
+
+    def backup_mainsail_config(self, **kwargs) -> None:
+        backup_client_config_data(MainsailData())
+
+    def backup_fluidd_config(self, **kwargs) -> None:
+        backup_client_config_data(FluiddData())
+
+    def backup_klipperscreen(self, **kwargs) -> None:
+        backup_klipperscreen_dir()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/base_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/base_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/base_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/base_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,198 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from __future__ import annotations
+
+import subprocess
+import sys
+import textwrap
+import traceback
+from abc import abstractmethod
+from typing import Dict, Type
+
+from core.constants import (
+    COLOR_CYAN,
+    COLOR_GREEN,
+    COLOR_RED,
+    COLOR_YELLOW,
+    RESET_FORMAT,
+)
+from core.logger import Logger
+from core.menus import FooterType, Option
+from utils.input_utils import get_selection_input
+
+
+def clear() -> None:
+    subprocess.call("clear", shell=True)
+
+
+def print_header() -> None:
+    line1 = " [ KIAUH ] "
+    line2 = "Klipper Installation And Update Helper"
+    line3 = ""
+    color = COLOR_CYAN
+    count = 62 - len(color) - len(RESET_FORMAT)
+    header = textwrap.dedent(
+        f"""
+        ╔═══════════════════════════════════════════════════════╗
+        ║ {color}{line1:~^{count}}{RESET_FORMAT} ║
+        ║ {color}{line2:^{count}}{RESET_FORMAT} ║
+        ║ {color}{line3:~^{count}}{RESET_FORMAT} ║
+        ╚═══════════════════════════════════════════════════════╝
+        """
+    )[1:]
+    print(header, end="")
+
+
+def print_quit_footer() -> None:
+    text = "Q) Quit"
+    color = COLOR_RED
+    count = 62 - len(color) - len(RESET_FORMAT)
+    footer = textwrap.dedent(
+        f"""
+        ║ {color}{text:^{count}}{RESET_FORMAT} ║
+        ╚═══════════════════════════════════════════════════════╝
+        """
+    )[1:]
+    print(footer, end="")
+
+
+def print_back_footer() -> None:
+    text = "B) « Back"
+    color = COLOR_GREEN
+    count = 62 - len(color) - len(RESET_FORMAT)
+    footer = textwrap.dedent(
+        f"""
+        ║ {color}{text:^{count}}{RESET_FORMAT} ║
+        ╚═══════════════════════════════════════════════════════╝
+        """
+    )[1:]
+    print(footer, end="")
+
+
+def print_back_help_footer() -> None:
+    text1 = "B) « Back"
+    text2 = "H) Help [?]"
+    color1 = COLOR_GREEN
+    color2 = COLOR_YELLOW
+    count = 34 - len(color1) - len(RESET_FORMAT)
+    footer = textwrap.dedent(
+        f"""
+        ║ {color1}{text1:^{count}}{RESET_FORMAT} │ {color2}{text2:^{count}}{RESET_FORMAT} ║
+        ╚═══════════════════════════╧═══════════════════════════╝
+        """
+    )[1:]
+    print(footer, end="")
+
+
+def print_blank_footer() -> None:
+    print("╚═══════════════════════════════════════════════════════╝")
+
+
+class PostInitCaller(type):
+    def __call__(cls, *args, **kwargs):
+        obj = type.__call__(cls, *args, **kwargs)
+        obj.__post_init__()
+        return obj
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class BaseMenu(metaclass=PostInitCaller):
+    options: Dict[str, Option] = {}
+    options_offset: int = 0
+    default_option: Option = None
+    input_label_txt: str = "Perform action"
+    header: bool = False
+    previous_menu: Type[BaseMenu] | None = None
+    help_menu: Type[BaseMenu] | None = None
+    footer_type: FooterType = FooterType.BACK
+
+    def __init__(self, **kwargs) -> None:
+        if type(self) is BaseMenu:
+            raise NotImplementedError("BaseMenu cannot be instantiated directly.")
+
+    def __post_init__(self) -> None:
+        self.set_previous_menu(self.previous_menu)
+        self.set_options()
+
+        # conditionally add options based on footer type
+        if self.footer_type is FooterType.QUIT:
+            self.options["q"] = Option(method=self.__exit)
+        if self.footer_type is FooterType.BACK:
+            self.options["b"] = Option(method=self.__go_back)
+        if self.footer_type is FooterType.BACK_HELP:
+            self.options["b"] = Option(method=self.__go_back)
+            self.options["h"] = Option(method=self.__go_to_help)
+        # if defined, add the default option to the options dict
+        if self.default_option is not None:
+            self.options[""] = self.default_option
+
+    def __go_back(self, **kwargs) -> None:
+        if self.previous_menu is None:
+            return
+        self.previous_menu().run()
+
+    def __go_to_help(self, **kwargs) -> None:
+        if self.help_menu is None:
+            return
+        self.help_menu(previous_menu=self.__class__).run()
+
+    def __exit(self, **kwargs) -> None:
+        Logger.print_ok("###### Happy printing!", False)
+        sys.exit(0)
+
+    @abstractmethod
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        raise NotImplementedError
+
+    @abstractmethod
+    def set_options(self) -> None:
+        raise NotImplementedError
+
+    @abstractmethod
+    def print_menu(self) -> None:
+        raise NotImplementedError
+
+    def print_footer(self) -> None:
+        if self.footer_type is FooterType.QUIT:
+            print_quit_footer()
+        elif self.footer_type is FooterType.BACK:
+            print_back_footer()
+        elif self.footer_type is FooterType.BACK_HELP:
+            print_back_help_footer()
+        elif self.footer_type is FooterType.BLANK:
+            print_blank_footer()
+        else:
+            raise NotImplementedError("FooterType not correctly implemented!")
+
+    def display_menu(self) -> None:
+        if self.header:
+            print_header()
+        self.print_menu()
+        self.print_footer()
+
+    def run(self) -> None:
+        """Start the menu lifecycle. When this function returns, the lifecycle of the menu ends."""
+        try:
+            self.display_menu()
+            option = get_selection_input(self.input_label_txt, self.options)
+            selected_option: Option = self.options.get(option)
+
+            selected_option.method(
+                opt_index=selected_option.opt_index,
+                opt_data=selected_option.opt_data,
+            )
+
+            self.run()
+
+        except Exception as e:
+            Logger.print_error(
+                f"An unexpected error occured:\n{e}\n{traceback.format_exc()}"
+            )
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,37 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from dataclasses import dataclass
+from enum import Enum
+from typing import Any, Callable, Type
+
+
+@dataclass
+class Option:
+    """
+    Represents a menu option.
+    :param method: Method that will be used to call the menu option
+    :param opt_index: Can be used to pass the user input to the menu option
+    :param opt_data: Can be used to pass any additional data to the menu option
+    """
+
+    def __repr__(self):
+        return f"Option(method={self.method.__name__}, opt_index={self.opt_index}, opt_data={self.opt_data})"
+
+    method: Type[Callable]
+    opt_index: str = ""
+    opt_data: Any = None
+
+
+class FooterType(Enum):
+    QUIT = "QUIT"
+    BACK = "BACK"
+    BACK_HELP = "BACK_HELP"
+    BLANK = "BLANK"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/install_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/install_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/install_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/install_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,98 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import Type
+
+from components.crowsnest.crowsnest import install_crowsnest
+from components.klipper import klipper_setup
+from components.klipperscreen.klipperscreen import install_klipperscreen
+from components.moonraker import moonraker_setup
+from components.webui_client import client_setup
+from components.webui_client.client_config import client_config_setup
+from components.webui_client.fluidd_data import FluiddData
+from components.webui_client.mainsail_data import MainsailData
+from core.constants import COLOR_GREEN, RESET_FORMAT
+from core.menus import Option
+from core.menus.base_menu import BaseMenu
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class InstallMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None) -> None:
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.main_menu import MainMenu
+
+        self.previous_menu = previous_menu if previous_menu is not None else MainMenu
+
+    def set_options(self) -> None:
+        self.options = {
+            "1": Option(method=self.install_klipper),
+            "2": Option(method=self.install_moonraker),
+            "3": Option(method=self.install_mainsail),
+            "4": Option(method=self.install_fluidd),
+            "5": Option(method=self.install_mainsail_config),
+            "6": Option(method=self.install_fluidd_config),
+            "7": Option(method=self.install_klipperscreen),
+            "8": Option(method=self.install_crowsnest),
+        }
+
+    def print_menu(self) -> None:
+        header = " [ Installation Menu ] "
+        color = COLOR_GREEN
+        count = 62 - len(color) - len(RESET_FORMAT)
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────┬───────────────────────────╢
+            ║ Firmware & API:           │ Touchscreen GUI:          ║
+            ║  1) [Klipper]             │  7) [KlipperScreen]       ║
+            ║  2) [Moonraker]           │                           ║
+            ║                           │ Webcam Streamer:          ║
+            ║ Webinterface:             │  8) [Crowsnest]           ║
+            ║  3) [Mainsail]            │                           ║
+            ║  4) [Fluidd]              │                           ║
+            ║                           │                           ║
+            ║ Client-Config:            │                           ║
+            ║  5) [Mainsail-Config]     │                           ║
+            ║  6) [Fluidd-Config]       │                           ║
+            ╟───────────────────────────┴───────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def install_klipper(self, **kwargs) -> None:
+        klipper_setup.install_klipper()
+
+    def install_moonraker(self, **kwargs) -> None:
+        moonraker_setup.install_moonraker()
+
+    def install_mainsail(self, **kwargs) -> None:
+        client_setup.install_client(MainsailData())
+
+    def install_mainsail_config(self, **kwargs) -> None:
+        client_config_setup.install_client_config(MainsailData())
+
+    def install_fluidd(self, **kwargs) -> None:
+        client_setup.install_client(FluiddData())
+
+    def install_fluidd_config(self, **kwargs) -> None:
+        client_config_setup.install_client_config(FluiddData())
+
+    def install_klipperscreen(self, **kwargs) -> None:
+        install_klipperscreen()
+
+    def install_crowsnest(self, **kwargs) -> None:
+        install_crowsnest()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/main_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/main_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/main_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/main_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,188 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import sys
+import textwrap
+from typing import Callable, Type
+
+from components.crowsnest.crowsnest import get_crowsnest_status
+from components.klipper.klipper_utils import get_klipper_status
+from components.klipperscreen.klipperscreen import get_klipperscreen_status
+from components.log_uploads.menus.log_upload_menu import LogUploadMenu
+from components.moonraker.moonraker_utils import get_moonraker_status
+from components.webui_client.client_utils import (
+    get_client_status,
+    get_current_client_config,
+)
+from components.webui_client.fluidd_data import FluiddData
+from components.webui_client.mainsail_data import MainsailData
+from core.constants import (
+    COLOR_CYAN,
+    COLOR_GREEN,
+    COLOR_MAGENTA,
+    COLOR_RED,
+    COLOR_YELLOW,
+    RESET_FORMAT,
+)
+from core.logger import Logger
+from core.menus import FooterType
+from core.menus.advanced_menu import AdvancedMenu
+from core.menus.backup_menu import BackupMenu
+from core.menus.base_menu import BaseMenu, Option
+from core.menus.install_menu import InstallMenu
+from core.menus.remove_menu import RemoveMenu
+from core.menus.settings_menu import SettingsMenu
+from core.menus.update_menu import UpdateMenu
+from core.types import ComponentStatus, StatusMap, StatusText
+from extensions.extensions_menu import ExtensionsMenu
+from utils.common import get_kiauh_version, trunc_string
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class MainMenu(BaseMenu):
+    def __init__(self) -> None:
+        super().__init__()
+
+        self.header: bool = True
+        self.footer_type: FooterType = FooterType.QUIT
+
+        self.version = ""
+        self.kl_status, self.kl_owner, self.kl_repo = "", "", ""
+        self.mr_status, self.mr_owner, self.mr_repo = "", "", ""
+        self.ms_status, self.fl_status, self.ks_status = "", "", ""
+        self.cn_status, self.cc_status = "", ""
+        self._init_status()
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        """MainMenu does not have a previous menu"""
+        pass
+
+    def set_options(self) -> None:
+        self.options = {
+            "0": Option(method=self.log_upload_menu),
+            "1": Option(method=self.install_menu),
+            "2": Option(method=self.update_menu),
+            "3": Option(method=self.remove_menu),
+            "4": Option(method=self.advanced_menu),
+            "5": Option(method=self.backup_menu),
+            "e": Option(method=self.extension_menu),
+            "s": Option(method=self.settings_menu),
+        }
+
+    def _init_status(self) -> None:
+        status_vars = ["kl", "mr", "ms", "fl", "ks", "cn"]
+        for var in status_vars:
+            setattr(
+                self,
+                f"{var}_status",
+                f"{COLOR_RED}Not installed{RESET_FORMAT}",
+            )
+
+    def _fetch_status(self) -> None:
+        self.version = get_kiauh_version()
+        self._get_component_status("kl", get_klipper_status)
+        self._get_component_status("mr", get_moonraker_status)
+        self._get_component_status("ms", get_client_status, MainsailData())
+        self._get_component_status("fl", get_client_status, FluiddData())
+        self._get_component_status("ks", get_klipperscreen_status)
+        self._get_component_status("cn", get_crowsnest_status)
+        self.cc_status = get_current_client_config()
+
+    def _get_component_status(self, name: str, status_fn: Callable, *args) -> None:
+        status_data: ComponentStatus = status_fn(*args)
+        code: int = status_data.status
+        status: StatusText = StatusMap[code]
+        owner: str = trunc_string(status_data.owner, 23)
+        repo: str = trunc_string(status_data.repo, 23)
+        instance_count: int = status_data.instances
+
+        count_txt: str = ""
+        if instance_count > 0 and code == 2:
+            count_txt = f": {instance_count}"
+
+        setattr(self, f"{name}_status", self._format_by_code(code, status, count_txt))
+        setattr(self, f"{name}_owner", f"{COLOR_CYAN}{owner}{RESET_FORMAT}")
+        setattr(self, f"{name}_repo", f"{COLOR_CYAN}{repo}{RESET_FORMAT}")
+
+    def _format_by_code(self, code: int, status: str, count: str) -> str:
+        color = COLOR_RED
+        if code == 0:
+            color = COLOR_RED
+        elif code == 1:
+            color = COLOR_YELLOW
+        elif code == 2:
+            color = COLOR_GREEN
+
+        return f"{color}{status}{count}{RESET_FORMAT}"
+
+    def print_menu(self) -> None:
+        self._fetch_status()
+
+        header = " [ Main Menu ] "
+        footer1 = f"{COLOR_CYAN}{self.version}{RESET_FORMAT}"
+        footer2 = f"Changelog: {COLOR_MAGENTA}https://git.io/JnmlX{RESET_FORMAT}"
+        color = COLOR_CYAN
+        count = 62 - len(color) - len(RESET_FORMAT)
+        pad1 = 32
+        pad2 = 26
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟──────────────────┬────────────────────────────────────╢
+            ║  0) [Log-Upload] │   Klipper: {self.kl_status:<{pad1}} ║
+            ║                  │     Owner: {self.kl_owner:<{pad1}} ║
+            ║  1) [Install]    │      Repo: {self.kl_repo:<{pad1}} ║
+            ║  2) [Update]     ├────────────────────────────────────╢
+            ║  3) [Remove]     │ Moonraker: {self.mr_status:<{pad1}} ║
+            ║  4) [Advanced]   │     Owner: {self.mr_owner:<{pad1}} ║
+            ║  5) [Backup]     │      Repo: {self.mr_repo:<{pad1}} ║
+            ║                  ├────────────────────────────────────╢
+            ║  S) [Settings]   │        Mainsail: {self.ms_status:<{pad2}} ║
+            ║                  │          Fluidd: {self.fl_status:<{pad2}} ║
+            ║ Community:       │   Client-Config: {self.cc_status:<{pad2}} ║
+            ║  E) [Extensions] │                                    ║
+            ║                  │   KlipperScreen: {self.ks_status:<{pad2}} ║
+            ║                  │       Crowsnest: {self.cn_status:<{pad2}} ║
+            ╟──────────────────┼────────────────────────────────────╢
+            ║ {footer1:^25} │ {footer2:^43} ║
+            ╟──────────────────┴────────────────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def exit(self, **kwargs) -> None:
+        Logger.print_ok("###### Happy printing!", False)
+        sys.exit(0)
+
+    def log_upload_menu(self, **kwargs) -> None:
+        LogUploadMenu().run()
+
+    def install_menu(self, **kwargs) -> None:
+        InstallMenu(previous_menu=self.__class__).run()
+
+    def update_menu(self, **kwargs) -> None:
+        UpdateMenu(previous_menu=self.__class__).run()
+
+    def remove_menu(self, **kwargs) -> None:
+        RemoveMenu(previous_menu=self.__class__).run()
+
+    def advanced_menu(self, **kwargs) -> None:
+        AdvancedMenu(previous_menu=self.__class__).run()
+
+    def backup_menu(self, **kwargs) -> None:
+        BackupMenu(previous_menu=self.__class__).run()
+
+    def settings_menu(self, **kwargs) -> None:
+        SettingsMenu(previous_menu=self.__class__).run()
+
+    def extension_menu(self, **kwargs) -> None:
+        ExtensionsMenu(previous_menu=self.__class__).run()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/remove_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/remove_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/remove_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/remove_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,89 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import Type
+
+from components.crowsnest.crowsnest import remove_crowsnest
+from components.klipper.menus.klipper_remove_menu import KlipperRemoveMenu
+from components.klipperscreen.klipperscreen import remove_klipperscreen
+from components.moonraker.menus.moonraker_remove_menu import (
+    MoonrakerRemoveMenu,
+)
+from components.webui_client.fluidd_data import FluiddData
+from components.webui_client.mainsail_data import MainsailData
+from components.webui_client.menus.client_remove_menu import ClientRemoveMenu
+from core.constants import COLOR_RED, RESET_FORMAT
+from core.menus import Option
+from core.menus.base_menu import BaseMenu
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class RemoveMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None) -> None:
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.main_menu import MainMenu
+
+        self.previous_menu = previous_menu if previous_menu is not None else MainMenu
+
+    def set_options(self) -> None:
+        self.options = {
+            "1": Option(method=self.remove_klipper),
+            "2": Option(method=self.remove_moonraker),
+            "3": Option(method=self.remove_mainsail),
+            "4": Option(method=self.remove_fluidd),
+            "5": Option(method=self.remove_klipperscreen),
+            "6": Option(method=self.remove_crowsnest),
+        }
+
+    def print_menu(self) -> None:
+        header = " [ Remove Menu ] "
+        color = COLOR_RED
+        count = 62 - len(color) - len(RESET_FORMAT)
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ INFO: Configurations and/or any backups will be kept! ║
+            ╟───────────────────────────┬───────────────────────────╢
+            ║ Firmware & API:           │ Touchscreen GUI:          ║
+            ║  1) [Klipper]             │  5) [KlipperScreen]       ║
+            ║  2) [Moonraker]           │                           ║
+            ║                           │ Webcam Streamer:          ║
+            ║ Klipper Webinterface:     │  6) [Crowsnest]           ║
+            ║  3) [Mainsail]            │                           ║
+            ║  4) [Fluidd]              │                           ║
+            ╟───────────────────────────┴───────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def remove_klipper(self, **kwargs) -> None:
+        KlipperRemoveMenu(previous_menu=self.__class__).run()
+
+    def remove_moonraker(self, **kwargs) -> None:
+        MoonrakerRemoveMenu(previous_menu=self.__class__).run()
+
+    def remove_mainsail(self, **kwargs) -> None:
+        ClientRemoveMenu(previous_menu=self.__class__, client=MainsailData()).run()
+
+    def remove_fluidd(self, **kwargs) -> None:
+        ClientRemoveMenu(previous_menu=self.__class__, client=FluiddData()).run()
+
+    def remove_klipperscreen(self, **kwargs) -> None:
+        remove_klipperscreen()
+
+    def remove_crowsnest(self, **kwargs) -> None:
+        remove_crowsnest()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/settings_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/settings_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/settings_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/settings_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,189 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import Literal, Tuple, Type
+
+from core.constants import COLOR_CYAN, COLOR_GREEN, RESET_FORMAT
+from core.logger import DialogType, Logger
+from core.menus import Option
+from core.menus.base_menu import BaseMenu
+from core.settings.kiauh_settings import KiauhSettings, RepoSettings
+from procedures.switch_repo import run_switch_repo_routine
+from utils.input_utils import get_confirm, get_string_input
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class SettingsMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None) -> None:
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+        self.klipper_repo: str | None = None
+        self.moonraker_repo: str | None = None
+        self.mainsail_unstable: bool | None = None
+        self.fluidd_unstable: bool | None = None
+        self.auto_backups_enabled: bool | None = None
+        self._load_settings()
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.main_menu import MainMenu
+
+        self.previous_menu = previous_menu if previous_menu is not None else MainMenu
+
+    def set_options(self) -> None:
+        self.options = {
+            "1": Option(method=self.set_klipper_repo),
+            "2": Option(method=self.set_moonraker_repo),
+            "3": Option(method=self.toggle_mainsail_release),
+            "4": Option(method=self.toggle_fluidd_release),
+            "5": Option(method=self.toggle_backup_before_update),
+        }
+
+    def print_menu(self) -> None:
+        header = " [ KIAUH Settings ] "
+        color = COLOR_CYAN
+        count = 62 - len(color) - len(RESET_FORMAT)
+        checked = f"[{COLOR_GREEN}x{RESET_FORMAT}]"
+        unchecked = "[ ]"
+        o1 = checked if self.mainsail_unstable else unchecked
+        o2 = checked if self.fluidd_unstable else unchecked
+        o3 = checked if self.auto_backups_enabled else unchecked
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ Klipper source repository:                            ║
+            ║   ● {self.klipper_repo:<67} ║
+            ║                                                       ║
+            ║ Moonraker source repository:                          ║
+            ║   ● {self.moonraker_repo:<67} ║
+            ║                                                       ║
+            ║ Install unstable Webinterface releases:               ║
+            ║  {o1} Mainsail                                         ║
+            ║  {o2} Fluidd                                           ║
+            ║                                                       ║
+            ║ Auto-Backup:                                          ║
+            ║  {o3} Automatic backup before update                   ║
+            ║                                                       ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ 1) Set Klipper source repository                      ║
+            ║ 2) Set Moonraker source repository                    ║
+            ║                                                       ║
+            ║ 3) Toggle unstable Mainsail releases                  ║
+            ║ 4) Toggle unstable Fluidd releases                    ║
+            ║                                                       ║
+            ║ 5) Toggle automatic backups before updates            ║
+            ╟───────────────────────────────────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def _load_settings(self) -> None:
+        self.settings = KiauhSettings()
+
+        self._format_repo_str("klipper")
+        self._format_repo_str("moonraker")
+
+        self.auto_backups_enabled = self.settings.kiauh.backup_before_update
+        self.mainsail_unstable = self.settings.mainsail.unstable_releases
+        self.fluidd_unstable = self.settings.fluidd.unstable_releases
+
+    def _format_repo_str(self, repo_name: Literal["klipper", "moonraker"]) -> None:
+        repo: RepoSettings = self.settings[repo_name]
+        repo_str = f"{'/'.join(repo.repo_url.rsplit('/', 2)[-2:])}"
+        branch_str = f"({COLOR_CYAN}@ {repo.branch}{RESET_FORMAT})"
+
+        setattr(
+            self,
+            f"{repo_name}_repo",
+            f"{COLOR_CYAN}{repo_str}{RESET_FORMAT} {branch_str}",
+        )
+
+    def _gather_input(self) -> Tuple[str, str]:
+        Logger.print_dialog(
+            DialogType.ATTENTION,
+            [
+                "There is no input validation in place! Make sure your the input is "
+                "valid and has no typos or invalid characters! For the change to take "
+                "effect, the new repository will be cloned. A backup of the old "
+                "repository will be created.",
+                "\n\n",
+                "Make sure you don't have any ongoing prints running, as the services "
+                "will be restarted during this process! You will loose any ongoing print!",
+            ],
+        )
+        repo = get_string_input(
+            "Enter new repository URL",
+            allow_special_chars=True,
+        )
+        branch = get_string_input(
+            "Enter new branch name",
+            allow_special_chars=True,
+        )
+
+        return repo, branch
+
+    def _set_repo(self, repo_name: Literal["klipper", "moonraker"]) -> None:
+        repo_url, branch = self._gather_input()
+        display_name = repo_name.capitalize()
+        Logger.print_dialog(
+            DialogType.CUSTOM,
+            [
+                f"New {display_name} repository URL:",
+                f"● {repo_url}",
+                f"New {display_name} repository branch:",
+                f"● {branch}",
+            ],
+        )
+
+        if get_confirm("Apply changes?", allow_go_back=True):
+            repo: RepoSettings = self.settings[repo_name]
+            repo.repo_url = repo_url
+            repo.branch = branch
+
+            self.settings.save()
+            self._load_settings()
+
+            Logger.print_ok("Changes saved!")
+        else:
+            Logger.print_info(
+                f"Skipping change of {display_name} source repository  ..."
+            )
+            return
+
+        Logger.print_status(f"Switching to {display_name}'s new source repository ...")
+        self._switch_repo(repo_name)
+
+    def _switch_repo(self, name: Literal["klipper", "moonraker"]) -> None:
+        repo: RepoSettings = self.settings[name]
+        run_switch_repo_routine(name, repo)
+
+    def set_klipper_repo(self, **kwargs) -> None:
+        self._set_repo("klipper")
+
+    def set_moonraker_repo(self, **kwargs) -> None:
+        self._set_repo("moonraker")
+
+    def toggle_mainsail_release(self, **kwargs) -> None:
+        self.mainsail_unstable = not self.mainsail_unstable
+        self.settings.mainsail.unstable_releases = self.mainsail_unstable
+        self.settings.save()
+
+    def toggle_fluidd_release(self, **kwargs) -> None:
+        self.fluidd_unstable = not self.fluidd_unstable
+        self.settings.fluidd.unstable_releases = self.fluidd_unstable
+        self.settings.save()
+
+    def toggle_backup_before_update(self, **kwargs) -> None:
+        self.auto_backups_enabled = not self.auto_backups_enabled
+        self.settings.kiauh.backup_before_update = self.auto_backups_enabled
+        self.settings.save()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/update_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/update_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/menus/update_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/menus/update_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,336 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import textwrap
+from typing import Callable, List, Type
+
+from components.crowsnest.crowsnest import get_crowsnest_status, update_crowsnest
+from components.klipper.klipper_setup import update_klipper
+from components.klipper.klipper_utils import (
+    get_klipper_status,
+)
+from components.klipperscreen.klipperscreen import (
+    get_klipperscreen_status,
+    update_klipperscreen,
+)
+from components.moonraker.moonraker_setup import update_moonraker
+from components.moonraker.moonraker_utils import get_moonraker_status
+from components.webui_client.client_config.client_config_setup import (
+    update_client_config,
+)
+from components.webui_client.client_setup import update_client
+from components.webui_client.client_utils import (
+    get_client_config_status,
+    get_client_status,
+)
+from components.webui_client.fluidd_data import FluiddData
+from components.webui_client.mainsail_data import MainsailData
+from core.constants import (
+    COLOR_GREEN,
+    COLOR_RED,
+    COLOR_YELLOW,
+    RESET_FORMAT,
+)
+from core.logger import DialogType, Logger
+from core.menus import Option
+from core.menus.base_menu import BaseMenu
+from core.spinner import Spinner
+from core.types import ComponentStatus
+from utils.input_utils import get_confirm
+from utils.sys_utils import (
+    get_upgradable_packages,
+    update_system_package_lists,
+    upgrade_system_packages,
+)
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class UpdateMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None) -> None:
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+
+        self.packages: List[str] = []
+        self.package_count: int = 0
+
+        self.klipper_local = self.klipper_remote = ""
+        self.moonraker_local = self.moonraker_remote = ""
+        self.mainsail_local = self.mainsail_remote = ""
+        self.mainsail_config_local = self.mainsail_config_remote = ""
+        self.fluidd_local = self.fluidd_remote = ""
+        self.fluidd_config_local = self.fluidd_config_remote = ""
+        self.klipperscreen_local = self.klipperscreen_remote = ""
+        self.crowsnest_local = self.crowsnest_remote = ""
+
+        self.mainsail_data = MainsailData()
+        self.fluidd_data = FluiddData()
+        self.status_data = {
+            "klipper": {
+                "display_name": "Klipper",
+                "installed": False,
+                "local": None,
+                "remote": None,
+            },
+            "moonraker": {
+                "display_name": "Moonraker",
+                "installed": False,
+                "local": None,
+                "remote": None,
+            },
+            "mainsail": {
+                "display_name": "Mainsail",
+                "installed": False,
+                "local": None,
+                "remote": None,
+            },
+            "mainsail_config": {
+                "display_name": "Mainsail-Config",
+                "installed": False,
+                "local": None,
+                "remote": None,
+            },
+            "fluidd": {
+                "display_name": "Fluidd",
+                "installed": False,
+                "local": None,
+                "remote": None,
+            },
+            "fluidd_config": {
+                "display_name": "Fluidd-Config",
+                "installed": False,
+                "local": None,
+                "remote": None,
+            },
+            "klipperscreen": {
+                "display_name": "KlipperScreen",
+                "installed": False,
+                "local": None,
+                "remote": None,
+            },
+            "crowsnest": {
+                "display_name": "Crowsnest",
+                "installed": False,
+                "local": None,
+                "remote": None,
+            },
+        }
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.main_menu import MainMenu
+
+        self.previous_menu = previous_menu if previous_menu is not None else MainMenu
+
+    def set_options(self) -> None:
+        self.options = {
+            "a": Option(self.update_all),
+            "1": Option(self.update_klipper),
+            "2": Option(self.update_moonraker),
+            "3": Option(self.update_mainsail),
+            "4": Option(self.update_fluidd),
+            "5": Option(self.update_mainsail_config),
+            "6": Option(self.update_fluidd_config),
+            "7": Option(self.update_klipperscreen),
+            "8": Option(self.update_crowsnest),
+            "9": Option(self.upgrade_system_packages),
+        }
+
+    def print_menu(self) -> None:
+        spinner = Spinner("Loading update menu, please wait", color="green")
+        spinner.start()
+
+        self._fetch_update_status()
+
+        spinner.stop()
+
+        header = " [ Update Menu ] "
+        color = COLOR_GREEN
+        count = 62 - len(color) - len(RESET_FORMAT)
+
+        sysupgrades: str = "No upgrades available."
+        padding = 29
+        if self.package_count > 0:
+            sysupgrades = (
+                f"{COLOR_GREEN}{self.package_count} upgrades available!{RESET_FORMAT}"
+            )
+            padding = 38
+
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────┬───────────────┬───────────────╢
+            ║  a) Update all        │               │               ║
+            ║                       │ Current:      │ Latest:       ║
+            ║ Klipper & API:        ├───────────────┼───────────────╢
+            ║  1) Klipper           │ {self.klipper_local:<22} │ {self.klipper_remote:<22} ║
+            ║  2) Moonraker         │ {self.moonraker_local:<22} │ {self.moonraker_remote:<22} ║
+            ║                       │               │               ║
+            ║ Webinterface:         ├───────────────┼───────────────╢
+            ║  3) Mainsail          │ {self.mainsail_local:<22} │ {self.mainsail_remote:<22} ║
+            ║  4) Fluidd            │ {self.fluidd_local:<22} │ {self.fluidd_remote:<22} ║
+            ║                       │               │               ║
+            ║ Client-Config:        ├───────────────┼───────────────╢
+            ║  5) Mainsail-Config   │ {self.mainsail_config_local:<22} │ {self.mainsail_config_remote:<22} ║
+            ║  6) Fluidd-Config     │ {self.fluidd_config_local:<22} │ {self.fluidd_config_remote:<22} ║
+            ║                       │               │               ║
+            ║ Other:                ├───────────────┼───────────────╢
+            ║  7) KlipperScreen     │ {self.klipperscreen_local:<22} │ {self.klipperscreen_remote:<22} ║
+            ║  8) Crowsnest         │ {self.crowsnest_local:<22} │ {self.crowsnest_remote:<22} ║
+            ║                       ├───────────────┴───────────────╢
+            ║  9) System            │ {sysupgrades:^{padding}} ║
+            ╟───────────────────────┴───────────────────────────────╢
+            """
+        )[1:]
+        print(menu, end="")
+
+    def update_all(self, **kwargs) -> None:
+        Logger.print_status("Updating all components ...")
+        self.update_klipper()
+        self.update_moonraker()
+        self.update_mainsail()
+        self.update_mainsail_config()
+        self.update_fluidd()
+        self.update_fluidd_config()
+        self.update_klipperscreen()
+        self.update_crowsnest()
+        self.upgrade_system_packages()
+
+    def update_klipper(self, **kwargs) -> None:
+        self._run_update_routine("klipper", update_klipper)
+
+    def update_moonraker(self, **kwargs) -> None:
+        self._run_update_routine("moonraker", update_moonraker)
+
+    def update_mainsail(self, **kwargs) -> None:
+        self._run_update_routine(
+            "mainsail",
+            update_client,
+            self.mainsail_data,
+        )
+
+    def update_mainsail_config(self, **kwargs) -> None:
+        self._run_update_routine(
+            "mainsail_config",
+            update_client_config,
+            self.mainsail_data,
+        )
+
+    def update_fluidd(self, **kwargs) -> None:
+        self._run_update_routine(
+            "fluidd",
+            update_client,
+            self.fluidd_data,
+        )
+
+    def update_fluidd_config(self, **kwargs) -> None:
+        self._run_update_routine(
+            "fluidd_config",
+            update_client_config,
+            self.fluidd_data,
+        )
+
+    def update_klipperscreen(self, **kwargs) -> None:
+        self._run_update_routine("klipperscreen", update_klipperscreen)
+
+    def update_crowsnest(self, **kwargs) -> None:
+        self._run_update_routine("crowsnest", update_crowsnest)
+
+    def upgrade_system_packages(self, **kwargs) -> None:
+        self._run_system_updates()
+
+    def _fetch_update_status(self) -> None:
+        self._set_status_data("klipper", get_klipper_status)
+        self._set_status_data("moonraker", get_moonraker_status)
+        self._set_status_data("mainsail", get_client_status, self.mainsail_data, True)
+        self._set_status_data(
+            "mainsail_config", get_client_config_status, self.mainsail_data
+        )
+        self._set_status_data("fluidd", get_client_status, self.fluidd_data, True)
+        self._set_status_data(
+            "fluidd_config", get_client_config_status, self.fluidd_data
+        )
+        self._set_status_data("klipperscreen", get_klipperscreen_status)
+        self._set_status_data("crowsnest", get_crowsnest_status)
+
+        update_system_package_lists(silent=True)
+        self.packages = get_upgradable_packages()
+        self.package_count = len(self.packages)
+
+    def _format_local_status(self, local_version, remote_version) -> str:
+        color = COLOR_RED
+        if not local_version:
+            color = COLOR_RED
+        elif local_version == remote_version:
+            color = COLOR_GREEN
+        elif local_version != remote_version:
+            color = COLOR_YELLOW
+
+        return f"{color}{local_version or '-'}{RESET_FORMAT}"
+
+    def _set_status_data(self, name: str, status_fn: Callable, *args) -> None:
+        comp_status: ComponentStatus = status_fn(*args)
+
+        self.status_data[name]["installed"] = True if comp_status.status == 2 else False
+        self.status_data[name]["local"] = comp_status.local
+        self.status_data[name]["remote"] = comp_status.remote
+
+        self._set_status_string(name)
+
+    def _set_status_string(self, name: str) -> None:
+        local_status = self.status_data[name].get("local", None)
+        remote_status = self.status_data[name].get("remote", None)
+
+        color = COLOR_GREEN if remote_status else COLOR_RED
+        local_txt = self._format_local_status(local_status, remote_status)
+        remote_txt = f"{color}{remote_status or '-'}{RESET_FORMAT}"
+
+        setattr(self, f"{name}_local", local_txt)
+        setattr(self, f"{name}_remote", remote_txt)
+
+    def _check_is_installed(self, name: str) -> bool:
+        return self.status_data[name]["installed"]
+
+    def _is_update_available(self, name: str) -> bool:
+        return self.status_data[name]["local"] != self.status_data[name]["remote"]
+
+    def _run_update_routine(self, name: str, update_fn: Callable, *args) -> None:
+        display_name = self.status_data[name]["display_name"]
+        is_installed = self._check_is_installed(name)
+        is_update_available = self._is_update_available(name)
+
+        if not is_installed:
+            Logger.print_info(f"{display_name} is not installed! Skipped ...")
+            return
+        elif not is_update_available:
+            Logger.print_info(f"{display_name} is already up to date! Skipped ...")
+            return
+
+        update_fn(*args)
+
+    def _run_system_updates(self) -> None:
+        if not self.packages:
+            Logger.print_info("No system upgrades available!")
+            return
+
+        try:
+            pkgs: str = ", ".join(self.packages)
+            Logger.print_dialog(
+                DialogType.CUSTOM,
+                ["The following packages will be upgraded:", "\n\n", pkgs],
+                custom_title="UPGRADABLE SYSTEM UPDATES",
+            )
+            if not get_confirm("Continue?"):
+                return
+            Logger.print_status("Upgrading system packages ...")
+            upgrade_system_packages(self.packages)
+        except Exception as e:
+            Logger.print_error(f"Error upgrading system packages:\n{e}")
+            raise
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/settings/kiauh_settings.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/settings/kiauh_settings.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/settings/kiauh_settings.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/settings/kiauh_settings.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,199 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from dataclasses import dataclass, field
+from typing import Any
+
+from core.logger import DialogType, Logger
+from core.submodules.simple_config_parser.src.simple_config_parser.simple_config_parser import (
+    NoOptionError,
+    NoSectionError,
+    SimpleConfigParser,
+)
+from utils.sys_utils import kill
+
+from kiauh import PROJECT_ROOT
+
+DEFAULT_CFG = PROJECT_ROOT.joinpath("default.kiauh.cfg")
+CUSTOM_CFG = PROJECT_ROOT.joinpath("kiauh.cfg")
+
+
+@dataclass
+class AppSettings:
+    backup_before_update: bool | None = field(default=None)
+
+
+@dataclass
+class RepoSettings:
+    repo_url: str | None = field(default=None)
+    branch: str | None = field(default=None)
+
+
+@dataclass
+class WebUiSettings:
+    port: str | None = field(default=None)
+    unstable_releases: bool | None = field(default=None)
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class KiauhSettings:
+    _instance = None
+
+    def __new__(cls, *args, **kwargs) -> "KiauhSettings":
+        if cls._instance is None:
+            cls._instance = super(KiauhSettings, cls).__new__(cls, *args, **kwargs)
+        return cls._instance
+
+    def __repr__(self) -> str:
+        return (
+            f"KiauhSettings(kiauh={self.kiauh}, klipper={self.klipper},"
+            f" moonraker={self.moonraker}, mainsail={self.mainsail},"
+            f" fluidd={self.fluidd})"
+        )
+
+    def __getitem__(self, item: str) -> Any:
+        return getattr(self, item)
+
+    def __init__(self) -> None:
+        if not hasattr(self, "__initialized"):
+            self.__initialized = False
+        if self.__initialized:
+            return
+        self.__initialized = True
+        self.config = SimpleConfigParser()
+        self.kiauh = AppSettings()
+        self.klipper = RepoSettings()
+        self.moonraker = RepoSettings()
+        self.mainsail = WebUiSettings()
+        self.fluidd = WebUiSettings()
+
+        self._load_config()
+
+    def get(self, section: str, option: str) -> str | int | bool:
+        """
+        Get a value from the settings state by providing the section and option name as
+        strings. Prefer direct access to the properties, as it is usually safer!
+        :param section: The section name as string.
+        :param option: The option name as string.
+        :return: The value of the option as string, int or bool.
+        """
+
+        try:
+            section = getattr(self, section)
+            value = getattr(section, option)
+            return value  # type: ignore
+        except AttributeError:
+            raise
+
+    def save(self) -> None:
+        self._set_config_options_state()
+        self.config.write_file(CUSTOM_CFG)
+        self._load_config()
+
+    def _load_config(self) -> None:
+        if not CUSTOM_CFG.exists() and not DEFAULT_CFG.exists():
+            self._kill()
+
+        cfg = CUSTOM_CFG if CUSTOM_CFG.exists() else DEFAULT_CFG
+        self.config.read_file(cfg)
+
+        self._validate_cfg()
+        self._apply_settings_from_file()
+
+    def _validate_cfg(self) -> None:
+        try:
+            self._validate_bool("kiauh", "backup_before_update")
+
+            self._validate_str("klipper", "repo_url")
+            self._validate_str("klipper", "branch")
+
+            self._validate_int("mainsail", "port")
+            self._validate_bool("mainsail", "unstable_releases")
+
+            self._validate_int("fluidd", "port")
+            self._validate_bool("fluidd", "unstable_releases")
+
+        except ValueError:
+            err = f"Invalid value for option '{self._v_option}' in section '{self._v_section}'"
+            Logger.print_error(err)
+            kill()
+        except NoSectionError:
+            err = f"Missing section '{self._v_section}' in config file"
+            Logger.print_error(err)
+            kill()
+        except NoOptionError:
+            err = f"Missing option '{self._v_option}' in section '{self._v_section}'"
+            Logger.print_error(err)
+            kill()
+
+    def _validate_bool(self, section: str, option: str) -> None:
+        self._v_section, self._v_option = (section, option)
+        (bool(self.config.getboolean(section, option)))
+
+    def _validate_int(self, section: str, option: str) -> None:
+        self._v_section, self._v_option = (section, option)
+        int(self.config.getint(section, option))
+
+    def _validate_str(self, section: str, option: str) -> None:
+        self._v_section, self._v_option = (section, option)
+        v = self.config.getval(section, option)
+        if v.isdigit() or v.lower() == "true" or v.lower() == "false":
+            raise ValueError
+
+    def _apply_settings_from_file(self) -> None:
+        self.kiauh.backup_before_update = self.config.getboolean(
+            "kiauh", "backup_before_update"
+        )
+        self.klipper.repo_url = self.config.getval("klipper", "repo_url")
+        self.klipper.branch = self.config.getval("klipper", "branch")
+        self.moonraker.repo_url = self.config.getval("moonraker", "repo_url")
+        self.moonraker.branch = self.config.getval("moonraker", "branch")
+        self.mainsail.port = self.config.getint("mainsail", "port")
+        self.mainsail.unstable_releases = self.config.getboolean(
+            "mainsail", "unstable_releases"
+        )
+        self.fluidd.port = self.config.getint("fluidd", "port")
+        self.fluidd.unstable_releases = self.config.getboolean(
+            "fluidd", "unstable_releases"
+        )
+
+    def _set_config_options_state(self) -> None:
+        self.config.set_option(
+            "kiauh",
+            "backup_before_update",
+            str(self.kiauh.backup_before_update),
+        )
+        self.config.set_option("klipper", "repo_url", self.klipper.repo_url)
+        self.config.set_option("klipper", "branch", self.klipper.branch)
+        self.config.set_option("moonraker", "repo_url", self.moonraker.repo_url)
+        self.config.set_option("moonraker", "branch", self.moonraker.branch)
+        self.config.set_option("mainsail", "port", str(self.mainsail.port))
+        self.config.set_option(
+            "mainsail",
+            "unstable_releases",
+            str(self.mainsail.unstable_releases),
+        )
+        self.config.set_option("fluidd", "port", str(self.fluidd.port))
+        self.config.set_option(
+            "fluidd", "unstable_releases", str(self.fluidd.unstable_releases)
+        )
+
+    def _kill(self) -> None:
+        Logger.print_dialog(
+            DialogType.ERROR,
+            [
+                "No KIAUH configuration file found! Please make sure you have at least "
+                "one of the following configuration files in KIAUH's root directory:",
+                "● default.kiauh.cfg",
+                "● kiauh.cfg",
+            ],
+        )
+        kill()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/spinner.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/spinner.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/spinner.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/spinner.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,61 @@
+import sys
+import threading
+import time
+from typing import List, Literal
+
+from core.constants import (
+    COLOR_GREEN,
+    COLOR_RED,
+    COLOR_WHITE,
+    COLOR_YELLOW,
+    RESET_FORMAT,
+)
+
+SpinnerColor = Literal["white", "red", "green", "yellow"]
+
+
+class Spinner:
+    def __init__(
+        self,
+        message: str = "Loading",
+        color: SpinnerColor = "white",
+        interval: float = 0.2,
+    ) -> None:
+        self.message = f"{message} ..."
+        self.interval = interval
+        self._stop_event = threading.Event()
+        self._thread = threading.Thread(target=self._animate)
+        self._color = ""
+        self._set_color(color)
+
+    def _animate(self) -> None:
+        animation: List[str] = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
+        while not self._stop_event.is_set():
+            for char in animation:
+                sys.stdout.write(f"\r{self._color}{char}{RESET_FORMAT} {self.message}")
+                sys.stdout.flush()
+                time.sleep(self.interval)
+                if self._stop_event.is_set():
+                    break
+        sys.stdout.write("\r" + " " * (len(self.message) + 1) + "\r")
+        sys.stdout.flush()
+
+    def _set_color(self, color: SpinnerColor) -> None:
+        if color == "white":
+            self._color = COLOR_WHITE
+        elif color == "red":
+            self._color = COLOR_RED
+        elif color == "green":
+            self._color = COLOR_GREEN
+        elif color == "yellow":
+            self._color = COLOR_YELLOW
+
+    def start(self) -> None:
+        self._stop_event.clear()
+        if not self._thread.is_alive():
+            self._thread = threading.Thread(target=self._animate)
+            self._thread.start()
+
+    def stop(self) -> None:
+        self._stop_event.set()
+        self._thread.join()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/.editorconfig /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/.editorconfig
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/.editorconfig	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/.editorconfig	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,13 @@
+# see https://editorconfig.org/
+root = true
+
+[*]
+end_of_line = lf
+trim_trailing_whitespace = true
+indent_style = space
+insert_final_newline = true
+indent_size = 4
+charset = utf-8
+
+[*.py]
+max_line_length = 88
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/.gitignore /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/.gitignore
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/.gitignore	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/.gitignore	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,13 @@
+*.py[cod]
+*.pyc
+__pycache__
+.pytest_cache/
+
+.idea/
+.vscode/
+
+.venv*/
+venv*/
+
+.coverage
+htmlcov/
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/LICENSE /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/LICENSE
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/LICENSE	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/LICENSE	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,674 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 3, 29 June 2007
+
+ Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The GNU General Public License is a free, copyleft license for
+software and other kinds of works.
+
+  The licenses for most software and other practical works are designed
+to take away your freedom to share and change the works.  By contrast,
+the GNU General Public License is intended to guarantee your freedom to
+share and change all versions of a program--to make sure it remains free
+software for all its users.  We, the Free Software Foundation, use the
+GNU General Public License for most of our software; it applies also to
+any other work released this way by its authors.  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+them if you wish), that you receive source code or can get it if you
+want it, that you can change the software or use pieces of it in new
+free programs, and that you know you can do these things.
+
+  To protect your rights, we need to prevent others from denying you
+these rights or asking you to surrender the rights.  Therefore, you have
+certain responsibilities if you distribute copies of the software, or if
+you modify it: responsibilities to respect the freedom of others.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must pass on to the recipients the same
+freedoms that you received.  You must make sure that they, too, receive
+or can get the source code.  And you must show them these terms so they
+know their rights.
+
+  Developers that use the GNU GPL protect your rights with two steps:
+(1) assert copyright on the software, and (2) offer you this License
+giving you legal permission to copy, distribute and/or modify it.
+
+  For the developers' and authors' protection, the GPL clearly explains
+that there is no warranty for this free software.  For both users' and
+authors' sake, the GPL requires that modified versions be marked as
+changed, so that their problems will not be attributed erroneously to
+authors of previous versions.
+
+  Some devices are designed to deny users access to install or run
+modified versions of the software inside them, although the manufacturer
+can do so.  This is fundamentally incompatible with the aim of
+protecting users' freedom to change the software.  The systematic
+pattern of such abuse occurs in the area of products for individuals to
+use, which is precisely where it is most unacceptable.  Therefore, we
+have designed this version of the GPL to prohibit the practice for those
+products.  If such problems arise substantially in other domains, we
+stand ready to extend this provision to those domains in future versions
+of the GPL, as needed to protect the freedom of users.
+
+  Finally, every program is threatened constantly by software patents.
+States should not allow patents to restrict development and use of
+software on general-purpose computers, but in those that do, we wish to
+avoid the special danger that patents applied to a free program could
+make it effectively proprietary.  To prevent this, the GPL assures that
+patents cannot be used to render the program non-free.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                       TERMS AND CONDITIONS
+
+  0. Definitions.
+
+  "This License" refers to version 3 of the GNU General Public License.
+
+  "Copyright" also means copyright-like laws that apply to other kinds of
+works, such as semiconductor masks.
+
+  "The Program" refers to any copyrightable work licensed under this
+License.  Each licensee is addressed as "you".  "Licensees" and
+"recipients" may be individuals or organizations.
+
+  To "modify" a work means to copy from or adapt all or part of the work
+in a fashion requiring copyright permission, other than the making of an
+exact copy.  The resulting work is called a "modified version" of the
+earlier work or a work "based on" the earlier work.
+
+  A "covered work" means either the unmodified Program or a work based
+on the Program.
+
+  To "propagate" a work means to do anything with it that, without
+permission, would make you directly or secondarily liable for
+infringement under applicable copyright law, except executing it on a
+computer or modifying a private copy.  Propagation includes copying,
+distribution (with or without modification), making available to the
+public, and in some countries other activities as well.
+
+  To "convey" a work means any kind of propagation that enables other
+parties to make or receive copies.  Mere interaction with a user through
+a computer network, with no transfer of a copy, is not conveying.
+
+  An interactive user interface displays "Appropriate Legal Notices"
+to the extent that it includes a convenient and prominently visible
+feature that (1) displays an appropriate copyright notice, and (2)
+tells the user that there is no warranty for the work (except to the
+extent that warranties are provided), that licensees may convey the
+work under this License, and how to view a copy of this License.  If
+the interface presents a list of user commands or options, such as a
+menu, a prominent item in the list meets this criterion.
+
+  1. Source Code.
+
+  The "source code" for a work means the preferred form of the work
+for making modifications to it.  "Object code" means any non-source
+form of a work.
+
+  A "Standard Interface" means an interface that either is an official
+standard defined by a recognized standards body, or, in the case of
+interfaces specified for a particular programming language, one that
+is widely used among developers working in that language.
+
+  The "System Libraries" of an executable work include anything, other
+than the work as a whole, that (a) is included in the normal form of
+packaging a Major Component, but which is not part of that Major
+Component, and (b) serves only to enable use of the work with that
+Major Component, or to implement a Standard Interface for which an
+implementation is available to the public in source code form.  A
+"Major Component", in this context, means a major essential component
+(kernel, window system, and so on) of the specific operating system
+(if any) on which the executable work runs, or a compiler used to
+produce the work, or an object code interpreter used to run it.
+
+  The "Corresponding Source" for a work in object code form means all
+the source code needed to generate, install, and (for an executable
+work) run the object code and to modify the work, including scripts to
+control those activities.  However, it does not include the work's
+System Libraries, or general-purpose tools or generally available free
+programs which are used unmodified in performing those activities but
+which are not part of the work.  For example, Corresponding Source
+includes interface definition files associated with source files for
+the work, and the source code for shared libraries and dynamically
+linked subprograms that the work is specifically designed to require,
+such as by intimate data communication or control flow between those
+subprograms and other parts of the work.
+
+  The Corresponding Source need not include anything that users
+can regenerate automatically from other parts of the Corresponding
+Source.
+
+  The Corresponding Source for a work in source code form is that
+same work.
+
+  2. Basic Permissions.
+
+  All rights granted under this License are granted for the term of
+copyright on the Program, and are irrevocable provided the stated
+conditions are met.  This License explicitly affirms your unlimited
+permission to run the unmodified Program.  The output from running a
+covered work is covered by this License only if the output, given its
+content, constitutes a covered work.  This License acknowledges your
+rights of fair use or other equivalent, as provided by copyright law.
+
+  You may make, run and propagate covered works that you do not
+convey, without conditions so long as your license otherwise remains
+in force.  You may convey covered works to others for the sole purpose
+of having them make modifications exclusively for you, or provide you
+with facilities for running those works, provided that you comply with
+the terms of this License in conveying all material for which you do
+not control copyright.  Those thus making or running the covered works
+for you must do so exclusively on your behalf, under your direction
+and control, on terms that prohibit them from making any copies of
+your copyrighted material outside their relationship with you.
+
+  Conveying under any other circumstances is permitted solely under
+the conditions stated below.  Sublicensing is not allowed; section 10
+makes it unnecessary.
+
+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
+
+  No covered work shall be deemed part of an effective technological
+measure under any applicable law fulfilling obligations under article
+11 of the WIPO copyright treaty adopted on 20 December 1996, or
+similar laws prohibiting or restricting circumvention of such
+measures.
+
+  When you convey a covered work, you waive any legal power to forbid
+circumvention of technological measures to the extent such circumvention
+is effected by exercising rights under this License with respect to
+the covered work, and you disclaim any intention to limit operation or
+modification of the work as a means of enforcing, against the work's
+users, your or third parties' legal rights to forbid circumvention of
+technological measures.
+
+  4. Conveying Verbatim Copies.
+
+  You may convey verbatim copies of the Program's source code as you
+receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice;
+keep intact all notices stating that this License and any
+non-permissive terms added in accord with section 7 apply to the code;
+keep intact all notices of the absence of any warranty; and give all
+recipients a copy of this License along with the Program.
+
+  You may charge any price or no price for each copy that you convey,
+and you may offer support or warranty protection for a fee.
+
+  5. Conveying Modified Source Versions.
+
+  You may convey a work based on the Program, or the modifications to
+produce it from the Program, in the form of source code under the
+terms of section 4, provided that you also meet all of these conditions:
+
+    a) The work must carry prominent notices stating that you modified
+    it, and giving a relevant date.
+
+    b) The work must carry prominent notices stating that it is
+    released under this License and any conditions added under section
+    7.  This requirement modifies the requirement in section 4 to
+    "keep intact all notices".
+
+    c) You must license the entire work, as a whole, under this
+    License to anyone who comes into possession of a copy.  This
+    License will therefore apply, along with any applicable section 7
+    additional terms, to the whole of the work, and all its parts,
+    regardless of how they are packaged.  This License gives no
+    permission to license the work in any other way, but it does not
+    invalidate such permission if you have separately received it.
+
+    d) If the work has interactive user interfaces, each must display
+    Appropriate Legal Notices; however, if the Program has interactive
+    interfaces that do not display Appropriate Legal Notices, your
+    work need not make them do so.
+
+  A compilation of a covered work with other separate and independent
+works, which are not by their nature extensions of the covered work,
+and which are not combined with it such as to form a larger program,
+in or on a volume of a storage or distribution medium, is called an
+"aggregate" if the compilation and its resulting copyright are not
+used to limit the access or legal rights of the compilation's users
+beyond what the individual works permit.  Inclusion of a covered work
+in an aggregate does not cause this License to apply to the other
+parts of the aggregate.
+
+  6. Conveying Non-Source Forms.
+
+  You may convey a covered work in object code form under the terms
+of sections 4 and 5, provided that you also convey the
+machine-readable Corresponding Source under the terms of this License,
+in one of these ways:
+
+    a) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by the
+    Corresponding Source fixed on a durable physical medium
+    customarily used for software interchange.
+
+    b) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by a
+    written offer, valid for at least three years and valid for as
+    long as you offer spare parts or customer support for that product
+    model, to give anyone who possesses the object code either (1) a
+    copy of the Corresponding Source for all the software in the
+    product that is covered by this License, on a durable physical
+    medium customarily used for software interchange, for a price no
+    more than your reasonable cost of physically performing this
+    conveying of source, or (2) access to copy the
+    Corresponding Source from a network server at no charge.
+
+    c) Convey individual copies of the object code with a copy of the
+    written offer to provide the Corresponding Source.  This
+    alternative is allowed only occasionally and noncommercially, and
+    only if you received the object code with such an offer, in accord
+    with subsection 6b.
+
+    d) Convey the object code by offering access from a designated
+    place (gratis or for a charge), and offer equivalent access to the
+    Corresponding Source in the same way through the same place at no
+    further charge.  You need not require recipients to copy the
+    Corresponding Source along with the object code.  If the place to
+    copy the object code is a network server, the Corresponding Source
+    may be on a different server (operated by you or a third party)
+    that supports equivalent copying facilities, provided you maintain
+    clear directions next to the object code saying where to find the
+    Corresponding Source.  Regardless of what server hosts the
+    Corresponding Source, you remain obligated to ensure that it is
+    available for as long as needed to satisfy these requirements.
+
+    e) Convey the object code using peer-to-peer transmission, provided
+    you inform other peers where the object code and Corresponding
+    Source of the work are being offered to the general public at no
+    charge under subsection 6d.
+
+  A separable portion of the object code, whose source code is excluded
+from the Corresponding Source as a System Library, need not be
+included in conveying the object code work.
+
+  A "User Product" is either (1) a "consumer product", which means any
+tangible personal property which is normally used for personal, family,
+or household purposes, or (2) anything designed or sold for incorporation
+into a dwelling.  In determining whether a product is a consumer product,
+doubtful cases shall be resolved in favor of coverage.  For a particular
+product received by a particular user, "normally used" refers to a
+typical or common use of that class of product, regardless of the status
+of the particular user or of the way in which the particular user
+actually uses, or expects or is expected to use, the product.  A product
+is a consumer product regardless of whether the product has substantial
+commercial, industrial or non-consumer uses, unless such uses represent
+the only significant mode of use of the product.
+
+  "Installation Information" for a User Product means any methods,
+procedures, authorization keys, or other information required to install
+and execute modified versions of a covered work in that User Product from
+a modified version of its Corresponding Source.  The information must
+suffice to ensure that the continued functioning of the modified object
+code is in no case prevented or interfered with solely because
+modification has been made.
+
+  If you convey an object code work under this section in, or with, or
+specifically for use in, a User Product, and the conveying occurs as
+part of a transaction in which the right of possession and use of the
+User Product is transferred to the recipient in perpetuity or for a
+fixed term (regardless of how the transaction is characterized), the
+Corresponding Source conveyed under this section must be accompanied
+by the Installation Information.  But this requirement does not apply
+if neither you nor any third party retains the ability to install
+modified object code on the User Product (for example, the work has
+been installed in ROM).
+
+  The requirement to provide Installation Information does not include a
+requirement to continue to provide support service, warranty, or updates
+for a work that has been modified or installed by the recipient, or for
+the User Product in which it has been modified or installed.  Access to a
+network may be denied when the modification itself materially and
+adversely affects the operation of the network or violates the rules and
+protocols for communication across the network.
+
+  Corresponding Source conveyed, and Installation Information provided,
+in accord with this section must be in a format that is publicly
+documented (and with an implementation available to the public in
+source code form), and must require no special password or key for
+unpacking, reading or copying.
+
+  7. Additional Terms.
+
+  "Additional permissions" are terms that supplement the terms of this
+License by making exceptions from one or more of its conditions.
+Additional permissions that are applicable to the entire Program shall
+be treated as though they were included in this License, to the extent
+that they are valid under applicable law.  If additional permissions
+apply only to part of the Program, that part may be used separately
+under those permissions, but the entire Program remains governed by
+this License without regard to the additional permissions.
+
+  When you convey a copy of a covered work, you may at your option
+remove any additional permissions from that copy, or from any part of
+it.  (Additional permissions may be written to require their own
+removal in certain cases when you modify the work.)  You may place
+additional permissions on material, added by you to a covered work,
+for which you have or can give appropriate copyright permission.
+
+  Notwithstanding any other provision of this License, for material you
+add to a covered work, you may (if authorized by the copyright holders of
+that material) supplement the terms of this License with terms:
+
+    a) Disclaiming warranty or limiting liability differently from the
+    terms of sections 15 and 16 of this License; or
+
+    b) Requiring preservation of specified reasonable legal notices or
+    author attributions in that material or in the Appropriate Legal
+    Notices displayed by works containing it; or
+
+    c) Prohibiting misrepresentation of the origin of that material, or
+    requiring that modified versions of such material be marked in
+    reasonable ways as different from the original version; or
+
+    d) Limiting the use for publicity purposes of names of licensors or
+    authors of the material; or
+
+    e) Declining to grant rights under trademark law for use of some
+    trade names, trademarks, or service marks; or
+
+    f) Requiring indemnification of licensors and authors of that
+    material by anyone who conveys the material (or modified versions of
+    it) with contractual assumptions of liability to the recipient, for
+    any liability that these contractual assumptions directly impose on
+    those licensors and authors.
+
+  All other non-permissive additional terms are considered "further
+restrictions" within the meaning of section 10.  If the Program as you
+received it, or any part of it, contains a notice stating that it is
+governed by this License along with a term that is a further
+restriction, you may remove that term.  If a license document contains
+a further restriction but permits relicensing or conveying under this
+License, you may add to a covered work material governed by the terms
+of that license document, provided that the further restriction does
+not survive such relicensing or conveying.
+
+  If you add terms to a covered work in accord with this section, you
+must place, in the relevant source files, a statement of the
+additional terms that apply to those files, or a notice indicating
+where to find the applicable terms.
+
+  Additional terms, permissive or non-permissive, may be stated in the
+form of a separately written license, or stated as exceptions;
+the above requirements apply either way.
+
+  8. Termination.
+
+  You may not propagate or modify a covered work except as expressly
+provided under this License.  Any attempt otherwise to propagate or
+modify it is void, and will automatically terminate your rights under
+this License (including any patent licenses granted under the third
+paragraph of section 11).
+
+  However, if you cease all violation of this License, then your
+license from a particular copyright holder is reinstated (a)
+provisionally, unless and until the copyright holder explicitly and
+finally terminates your license, and (b) permanently, if the copyright
+holder fails to notify you of the violation by some reasonable means
+prior to 60 days after the cessation.
+
+  Moreover, your license from a particular copyright holder is
+reinstated permanently if the copyright holder notifies you of the
+violation by some reasonable means, this is the first time you have
+received notice of violation of this License (for any work) from that
+copyright holder, and you cure the violation prior to 30 days after
+your receipt of the notice.
+
+  Termination of your rights under this section does not terminate the
+licenses of parties who have received copies or rights from you under
+this License.  If your rights have been terminated and not permanently
+reinstated, you do not qualify to receive new licenses for the same
+material under section 10.
+
+  9. Acceptance Not Required for Having Copies.
+
+  You are not required to accept this License in order to receive or
+run a copy of the Program.  Ancillary propagation of a covered work
+occurring solely as a consequence of using peer-to-peer transmission
+to receive a copy likewise does not require acceptance.  However,
+nothing other than this License grants you permission to propagate or
+modify any covered work.  These actions infringe copyright if you do
+not accept this License.  Therefore, by modifying or propagating a
+covered work, you indicate your acceptance of this License to do so.
+
+  10. Automatic Licensing of Downstream Recipients.
+
+  Each time you convey a covered work, the recipient automatically
+receives a license from the original licensors, to run, modify and
+propagate that work, subject to this License.  You are not responsible
+for enforcing compliance by third parties with this License.
+
+  An "entity transaction" is a transaction transferring control of an
+organization, or substantially all assets of one, or subdividing an
+organization, or merging organizations.  If propagation of a covered
+work results from an entity transaction, each party to that
+transaction who receives a copy of the work also receives whatever
+licenses to the work the party's predecessor in interest had or could
+give under the previous paragraph, plus a right to possession of the
+Corresponding Source of the work from the predecessor in interest, if
+the predecessor has it or can get it with reasonable efforts.
+
+  You may not impose any further restrictions on the exercise of the
+rights granted or affirmed under this License.  For example, you may
+not impose a license fee, royalty, or other charge for exercise of
+rights granted under this License, and you may not initiate litigation
+(including a cross-claim or counterclaim in a lawsuit) alleging that
+any patent claim is infringed by making, using, selling, offering for
+sale, or importing the Program or any portion of it.
+
+  11. Patents.
+
+  A "contributor" is a copyright holder who authorizes use under this
+License of the Program or a work on which the Program is based.  The
+work thus licensed is called the contributor's "contributor version".
+
+  A contributor's "essential patent claims" are all patent claims
+owned or controlled by the contributor, whether already acquired or
+hereafter acquired, that would be infringed by some manner, permitted
+by this License, of making, using, or selling its contributor version,
+but do not include claims that would be infringed only as a
+consequence of further modification of the contributor version.  For
+purposes of this definition, "control" includes the right to grant
+patent sublicenses in a manner consistent with the requirements of
+this License.
+
+  Each contributor grants you a non-exclusive, worldwide, royalty-free
+patent license under the contributor's essential patent claims, to
+make, use, sell, offer for sale, import and otherwise run, modify and
+propagate the contents of its contributor version.
+
+  In the following three paragraphs, a "patent license" is any express
+agreement or commitment, however denominated, not to enforce a patent
+(such as an express permission to practice a patent or covenant not to
+sue for patent infringement).  To "grant" such a patent license to a
+party means to make such an agreement or commitment not to enforce a
+patent against the party.
+
+  If you convey a covered work, knowingly relying on a patent license,
+and the Corresponding Source of the work is not available for anyone
+to copy, free of charge and under the terms of this License, through a
+publicly available network server or other readily accessible means,
+then you must either (1) cause the Corresponding Source to be so
+available, or (2) arrange to deprive yourself of the benefit of the
+patent license for this particular work, or (3) arrange, in a manner
+consistent with the requirements of this License, to extend the patent
+license to downstream recipients.  "Knowingly relying" means you have
+actual knowledge that, but for the patent license, your conveying the
+covered work in a country, or your recipient's use of the covered work
+in a country, would infringe one or more identifiable patents in that
+country that you have reason to believe are valid.
+
+  If, pursuant to or in connection with a single transaction or
+arrangement, you convey, or propagate by procuring conveyance of, a
+covered work, and grant a patent license to some of the parties
+receiving the covered work authorizing them to use, propagate, modify
+or convey a specific copy of the covered work, then the patent license
+you grant is automatically extended to all recipients of the covered
+work and works based on it.
+
+  A patent license is "discriminatory" if it does not include within
+the scope of its coverage, prohibits the exercise of, or is
+conditioned on the non-exercise of one or more of the rights that are
+specifically granted under this License.  You may not convey a covered
+work if you are a party to an arrangement with a third party that is
+in the business of distributing software, under which you make payment
+to the third party based on the extent of your activity of conveying
+the work, and under which the third party grants, to any of the
+parties who would receive the covered work from you, a discriminatory
+patent license (a) in connection with copies of the covered work
+conveyed by you (or copies made from those copies), or (b) primarily
+for and in connection with specific products or compilations that
+contain the covered work, unless you entered into that arrangement,
+or that patent license was granted, prior to 28 March 2007.
+
+  Nothing in this License shall be construed as excluding or limiting
+any implied license or other defenses to infringement that may
+otherwise be available to you under applicable patent law.
+
+  12. No Surrender of Others' Freedom.
+
+  If conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot convey a
+covered work so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you may
+not convey it at all.  For example, if you agree to terms that obligate you
+to collect a royalty for further conveying from those to whom you convey
+the Program, the only way you could satisfy both those terms and this
+License would be to refrain entirely from conveying the Program.
+
+  13. Use with the GNU Affero General Public License.
+
+  Notwithstanding any other provision of this License, you have
+permission to link or combine any covered work with a work licensed
+under version 3 of the GNU Affero General Public License into a single
+combined work, and to convey the resulting work.  The terms of this
+License will continue to apply to the part which is the covered work,
+but the special requirements of the GNU Affero General Public License,
+section 13, concerning interaction through a network will apply to the
+combination as such.
+
+  14. Revised Versions of this License.
+
+  The Free Software Foundation may publish revised and/or new versions of
+the GNU General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+  Each version is given a distinguishing version number.  If the
+Program specifies that a certain numbered version of the GNU General
+Public License "or any later version" applies to it, you have the
+option of following the terms and conditions either of that numbered
+version or of any later version published by the Free Software
+Foundation.  If the Program does not specify a version number of the
+GNU General Public License, you may choose any version ever published
+by the Free Software Foundation.
+
+  If the Program specifies that a proxy can decide which future
+versions of the GNU General Public License can be used, that proxy's
+public statement of acceptance of a version permanently authorizes you
+to choose that version for the Program.
+
+  Later license versions may give you additional or different
+permissions.  However, no additional obligations are imposed on any
+author or copyright holder as a result of your choosing to follow a
+later version.
+
+  15. Disclaimer of Warranty.
+
+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. Limitation of Liability.
+
+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGES.
+
+  17. Interpretation of Sections 15 and 16.
+
+  If the disclaimer of warranty and limitation of liability provided
+above cannot be given local legal effect according to their terms,
+reviewing courts shall apply local law that most closely approximates
+an absolute waiver of all civil liability in connection with the
+Program, unless a warranty or assumption of liability accompanies a
+copy of the Program in return for a fee.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+state the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <https://www.gnu.org/licenses/>.
+
+Also add information on how to contact you by electronic and paper mail.
+
+  If the program does terminal interaction, make it output a short
+notice like this when it starts in an interactive mode:
+
+    <program>  Copyright (C) <year>  <name of author>
+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, your program's commands
+might be different; for a GUI interface, you would use an "about box".
+
+  You should also get your employer (if you work as a programmer) or school,
+if any, to sign a "copyright disclaimer" for the program, if necessary.
+For more information on this, and how to apply and follow the GNU GPL, see
+<https://www.gnu.org/licenses/>.
+
+  The GNU General Public License does not permit incorporating your program
+into proprietary programs.  If your program is a subroutine library, you
+may consider it more useful to permit linking proprietary applications with
+the library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.  But first, please read
+<https://www.gnu.org/licenses/why-not-lgpl.html>.
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/pyproject.toml /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/pyproject.toml
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/pyproject.toml	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/pyproject.toml	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,66 @@
+[project]
+name = "simple-config-parser"
+version = "0.0.1"
+description = "A simple config parser for Python"
+authors = [
+    {name = "Dominik Willner", email = "th33xitus@gmail.com"},
+]
+readme = "README.md"
+license = {text = "GPL-3.0-only"}
+requires-python = ">=3.8"
+
+[project.urls]
+homepage = "https://github.com/dw-0/simple-config-parser"
+repository = "https://github.com/dw-0/simple-config-parser"
+documentation = "https://github.com/dw-0/simple-config-parser"
+
+[project.optional-dependencies]
+dev=["ruff"]
+
+[tool.ruff]
+required-version = ">=0.3.4"
+respect-gitignore = true
+exclude = [".git",".github", "./docs"]
+line-length = 88
+indent-width = 4
+output-format = "full"
+
+[tool.ruff.format]
+indent-style = "space"
+line-ending = "lf"
+quote-style = "double"
+
+[tool.ruff.lint]
+extend-select = ["I"]
+
+[tool.pytest.ini_options]
+minversion = "8.2.1"
+testpaths = ["tests/**/*.py"]
+addopts = "--cov --cov-config=pyproject.toml --cov-report=html"
+
+[tool.coverage.run]
+branch = true
+source = ["src.simple_config_parser"]
+
+[tool.coverage.report]
+# Regexes for lines to exclude from consideration
+exclude_also = [
+    # Don't complain about missing debug-only code:
+    "def __repr__",
+    "if self\\.debug",
+
+    # Don't complain if tests don't hit defensive assertion code:
+    "raise AssertionError",
+    "raise NotImplementedError",
+
+    # Don't complain if non-runnable code isn't run:
+    "if 0:",
+    "if __name__ == .__main__.:",
+
+    # Don't complain about abstract methods, they aren't run:
+    "@(abc\\.)?abstractmethod",
+    ]
+
+[tool.coverage.html]
+title = "SimpleConfigParser Coverage Report"
+directory = "htmlcov"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/README.md /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/README.md
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/README.md	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/README.md	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,6 @@
+# Simple Config Parser
+
+A custom config parser inspired by Python's configparser module.
+Specialized for handling Klipper style config files.
+
+
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/requirements-dev.txt /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/requirements-dev.txt
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/requirements-dev.txt	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/requirements-dev.txt	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,3 @@
+ruff >= 0.3.4
+pytest >= 8.2.1
+pytest-cov >= 5.0.0
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/src/simple_config_parser/constants.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/src/simple_config_parser/constants.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/src/simple_config_parser/constants.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/src/simple_config_parser/constants.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,62 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+import re
+
+# definition of section line:
+#  - then line MUST start with an opening square bracket - it is the first section marker
+#  - the section marker MUST be followed by at least one character - it is the section name
+#  - the section name MUST be followed by a closing square bracket - it is the second section marker
+#  - the second section marker MAY be followed by any amount of whitespace characters
+#  - the second section marker MAY be followed by a # or ; - it is the comment marker
+#  - the inline comment MAY be of any length and character
+SECTION_RE = re.compile(r"^\[(\S.*\S|\S)]\s*([#;].*)?$")
+
+# definition of option line:
+#  - the line MUST start with a word - it is the option name
+#  - the option name MUST be followed by a colon or an equal sign - it is the separator
+#  - the separator MUST be followed by a value
+#    - the separator MAY have any amount of leading or trailing whitespaces
+#    - the separator MUST NOT be directly followed by a colon or equal sign
+#  - the value MAY be of any length and character
+#    - the value MAY contain any amount of trailing whitespaces
+#    - the value MAY be followed by a # or ; - it is the comment marker
+#  - the inline comment MAY be of any length and character
+OPTION_RE = re.compile(r"^([^;#:=\s]+)\s?[:=]\s*([^;#:=\s][^;#]*?)\s*([#;].*)?$")
+# definition of options block start line:
+#  - the line MUST start with a word - it is the option name
+#  - the option name MUST be followed by a colon or an equal sign - it is the separator
+#  - the separator MUST NOT be followed by a value
+#    - the separator MAY have any amount of leading or trailing whitespaces
+#    - the separator MUST NOT be directly followed by a colon or equal sign
+#    - the separator MAY be followed by a # or ; - it is the comment marker
+#  - the inline comment MAY be of any length and character
+OPTIONS_BLOCK_START_RE = re.compile(r"^([^;#:=\s]+)\s*[:=]\s*([#;].*)?$")
+
+# definition of comment line:
+#  - the line MAY start with any amount of whitespace characters
+#  - the line MUST contain a # or ; - it is the comment marker
+#  - the comment marker MAY be followed by any amount of whitespace characters
+#  - the comment MAY be of any length and character
+LINE_COMMENT_RE = re.compile(r"^\s*[#;].*")
+
+# definition of empty line:
+#  - the line MUST contain only whitespace characters
+EMPTY_LINE_RE = re.compile(r"^\s*$")
+
+BOOLEAN_STATES = {
+    "1": True,
+    "yes": True,
+    "true": True,
+    "on": True,
+    "0": False,
+    "no": False,
+    "false": False,
+    "off": False,
+}
+
+HEADER_IDENT = "#_header"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/src/simple_config_parser/simple_config_parser.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/src/simple_config_parser/simple_config_parser.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/src/simple_config_parser/simple_config_parser.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/src/simple_config_parser/simple_config_parser.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,325 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from __future__ import annotations
+
+import secrets
+import string
+from pathlib import Path
+from typing import Callable, Dict, List
+
+from ..simple_config_parser.constants import (
+    BOOLEAN_STATES,
+    EMPTY_LINE_RE,
+    HEADER_IDENT,
+    LINE_COMMENT_RE,
+    OPTION_RE,
+    OPTIONS_BLOCK_START_RE,
+    SECTION_RE,
+)
+
+_UNSET = object()
+
+
+class NoSectionError(Exception):
+    """Raised when a section is not defined"""
+
+    def __init__(self, section: str):
+        msg = f"Section '{section}' is not defined"
+        super().__init__(msg)
+
+
+class DuplicateSectionError(Exception):
+    """Raised when a section is defined more than once"""
+
+    def __init__(self, section: str):
+        msg = f"Section '{section}' is defined more than once"
+        super().__init__(msg)
+
+
+class NoOptionError(Exception):
+    """Raised when an option is not defined in a section"""
+
+    def __init__(self, option: str, section: str):
+        msg = f"Option '{option}' in section '{section}' is not defined"
+        super().__init__(msg)
+
+
+# noinspection PyMethodMayBeStatic
+class SimpleConfigParser:
+    """A customized config parser targeted at handling Klipper style config files"""
+
+    def __init__(self) -> None:
+        self.header: List[str] = []
+        self.config: Dict = {}
+        self.current_section: str | None = None
+        self.current_opt_block: str | None = None
+        self.current_collector: str | None = None
+        self.in_option_block: bool = False
+
+    def _match_section(self, line: str) -> bool:
+        """Wheter or not the given line matches the definition of a section"""
+        return SECTION_RE.match(line) is not None
+
+    def _match_option(self, line: str) -> bool:
+        """Wheter or not the given line matches the definition of an option"""
+        return OPTION_RE.match(line) is not None
+
+    def _match_options_block_start(self, line: str) -> bool:
+        """Wheter or not the given line matches the definition of a multiline option"""
+        return OPTIONS_BLOCK_START_RE.match(line) is not None
+
+    def _match_line_comment(self, line: str) -> bool:
+        """Wheter or not the given line matches the definition of a comment"""
+        return LINE_COMMENT_RE.match(line) is not None
+
+    def _match_empty_line(self, line: str) -> bool:
+        """Wheter or not the given line matches the definition of an empty line"""
+        return EMPTY_LINE_RE.match(line) is not None
+
+    def _parse_line(self, line: str) -> None:
+        """Parses a line and determines its type"""
+        if self._match_section(line):
+            self.current_collector = None
+            self.current_opt_block = None
+            self.current_section = SECTION_RE.match(line).group(1)
+            self.config[self.current_section] = {"_raw": line}
+
+        elif self._match_option(line):
+            self.current_collector = None
+            self.current_opt_block = None
+            option = OPTION_RE.match(line).group(1)
+            value = OPTION_RE.match(line).group(2)
+            self.config[self.current_section][option] = {"_raw": line, "value": value}
+
+        elif self._match_options_block_start(line):
+            self.current_collector = None
+            option = OPTIONS_BLOCK_START_RE.match(line).group(1)
+            self.current_opt_block = option
+            self.config[self.current_section][option] = {"_raw": line, "value": []}
+
+        elif self.current_opt_block is not None:
+            self.config[self.current_section][self.current_opt_block]["value"].append(
+                line
+            )
+
+        elif self._match_empty_line(line) or self._match_line_comment(line):
+            self.current_opt_block = None
+
+            # if current_section is None, we are at the beginning of the file,
+            # so we consider the part up to the first section as the file header
+            if not self.current_section:
+                self.config.setdefault(HEADER_IDENT, []).append(line)
+            else:
+                section = self.config[self.current_section]
+
+                # set the current collector to a new value, so that continuous
+                # empty lines or comments are collected into the same collector
+                if not self.current_collector:
+                    self.current_collector = self._generate_rand_id()
+                    section[self.current_collector] = []
+
+                section[self.current_collector].append(line)
+
+    def read_file(self, file: Path) -> None:
+        """Read and parse a config file"""
+        with open(file, "r") as file:
+            for line in file:
+                self._parse_line(line)
+
+        # print(json.dumps(self.config, indent=4))
+
+    def write_file(self, file: Path) -> None:
+        """Write the current config to the config file"""
+        if not file:
+            raise ValueError("No config file specified")
+
+        with open(file, "w") as file:
+            self._write_header(file)
+            self._write_sections(file)
+
+    def _write_header(self, file) -> None:
+        """Write the header to the config file"""
+        for line in self.config.get(HEADER_IDENT, []):
+            file.write(line)
+
+    def _write_sections(self, file) -> None:
+        """Write the sections to the config file"""
+        for section in self.get_sections():
+            for key, value in self.config[section].items():
+                self._write_section_content(file, key, value)
+
+    def _write_section_content(self, file, key, value) -> None:
+        """Write the content of a section to the config file"""
+        if key == "_raw":
+            file.write(value)
+        elif key.startswith("#_"):
+            for line in value:
+                file.write(line)
+        elif isinstance(value["value"], list):
+            file.write(value["_raw"])
+            for line in value["value"]:
+                file.write(line)
+        else:
+            file.write(value["_raw"])
+
+    def get_sections(self) -> List[str]:
+        """Return a list of all section names, but exclude any section starting with '#_'"""
+        return list(
+            filter(
+                lambda section: not section.startswith("#_"),
+                self.config.keys(),
+            )
+        )
+
+    def has_section(self, section: str) -> bool:
+        """Check if a section exists"""
+        return section in self.get_sections()
+
+    def add_section(self, section: str) -> None:
+        """Add a new section to the config"""
+        if section in self.get_sections():
+            raise DuplicateSectionError(section)
+
+        if len(self.get_sections()) >= 1:
+            self._check_set_section_spacing()
+
+        self.config[section] = {"_raw": f"[{section}]\n"}
+
+    def _check_set_section_spacing(self):
+        prev_section_name: str = self.get_sections()[-1]
+        prev_section_content: Dict = self.config[prev_section_name]
+        last_option_name: str = list(prev_section_content.keys())[-1]
+
+        if last_option_name.startswith("#_"):
+            last_elem_value: str = prev_section_content[last_option_name][-1]
+
+            # if the last section is a collector, we first check if the last element
+            # in the collector ends with a newline. if it does not, we append a newline.
+            # this can happen if the config file does not end with a newline.
+            if not last_elem_value.endswith("\n"):
+                prev_section_content[last_option_name][-1] = f"{last_elem_value}\n"
+
+            # if the last item in a collector is not a newline, we append a newline, so
+            # that the new section is seperated from the options of the previous section
+            # by a newline
+            if last_elem_value != "\n":
+                prev_section_content[last_option_name].append("\n")
+        else:
+            prev_section_content[self._generate_rand_id()] = ["\n"]
+
+    def remove_section(self, section: str) -> None:
+        """Remove a section from the config"""
+        self.config.pop(section, None)
+
+    def get_options(self, section: str) -> List[str]:
+        """Return a list of all option names for a given section"""
+        return list(
+            filter(
+                lambda option: option != "_raw" and not option.startswith("#_"),
+                self.config[section].keys(),
+            )
+        )
+
+    def has_option(self, section: str, option: str) -> bool:
+        """Check if an option exists in a section"""
+        return self.has_section(section) and option in self.get_options(section)
+
+    def set_option(self, section: str, option: str, value: str | List[str]) -> None:
+        """
+        Set the value of an option in a section. If the section does not exist,
+        it is created. If the option does not exist, it is created.
+        """
+        if not self.has_section(section):
+            self.add_section(section)
+
+        if not self.has_option(section, option):
+            self.config[section][option] = {
+                "_raw": f"{option}:\n"
+                if isinstance(value, list)
+                else f"{option}: {value}\n",
+                "value": value,
+            }
+        else:
+            opt = self.config[section][option]
+            if not isinstance(value, list):
+                opt["_raw"] = opt["_raw"].replace(opt["value"], value)
+            opt["value"] = value
+
+    def remove_option(self, section: str, option: str) -> None:
+        """Remove an option from a section"""
+        self.config[section].pop(option, None)
+
+    def getval(
+        self, section: str, option: str, fallback: str | _UNSET = _UNSET
+    ) -> str | List[str]:
+        """
+        Return the value of the given option in the given section
+
+        If the key is not found and 'fallback' is provided, it is used as
+        a fallback value.
+        """
+        try:
+            if section not in self.get_sections():
+                raise NoSectionError(section)
+            if option not in self.get_options(section):
+                raise NoOptionError(option, section)
+            return self.config[section][option]["value"]
+        except (NoSectionError, NoOptionError):
+            if fallback is _UNSET:
+                raise
+            return fallback
+
+    def getint(self, section: str, option: str, fallback: int | _UNSET = _UNSET) -> int:
+        """Return the value of the given option in the given section as an int"""
+        return self._get_conv(section, option, int, fallback=fallback)
+
+    def getfloat(
+        self, section: str, option: str, fallback: float | _UNSET = _UNSET
+    ) -> float:
+        """Return the value of the given option in the given section as a float"""
+        return self._get_conv(section, option, float, fallback=fallback)
+
+    def getboolean(
+        self, section: str, option: str, fallback: bool | _UNSET = _UNSET
+    ) -> bool:
+        """Return the value of the given option in the given section as a boolean"""
+        return self._get_conv(
+            section, option, self._convert_to_boolean, fallback=fallback
+        )
+
+    def _convert_to_boolean(self, value: str) -> bool:
+        """Convert a string to a boolean"""
+        if isinstance(value, bool):
+            return value
+        if value.lower() not in BOOLEAN_STATES:
+            raise ValueError("Not a boolean: %s" % value)
+        return BOOLEAN_STATES[value.lower()]
+
+    def _get_conv(
+        self,
+        section: str,
+        option: str,
+        conv: Callable[[str], int | float | bool],
+        fallback: _UNSET = _UNSET,
+    ) -> int | float | bool:
+        """Return the value of the given option in the given section as a converted value"""
+        try:
+            return conv(self.getval(section, option, fallback))
+        except (ValueError, TypeError, AttributeError) as e:
+            if fallback is not _UNSET:
+                return fallback
+            raise ValueError(
+                f"Cannot convert {self.getval(section, option)} to {conv.__name__}"
+            ) from e
+
+    def _generate_rand_id(self) -> str:
+        """Generate a random id with 6 characters"""
+        chars = string.ascii_letters + string.digits
+        rand_string = "".join(secrets.choice(chars) for _ in range(12))
+        return f"#_{rand_string}"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/klipper_config.txt /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/klipper_config.txt
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/klipper_config.txt	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/klipper_config.txt	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,1337 @@
+[mcu]
+serial:
+baud: 250000
+canbus_uuid:
+canbus_interface:
+restart_method:
+[printer]
+kinematics:
+max_velocity:
+max_accel:
+minimum_cruise_ratio: 0.5
+square_corner_velocity: 5.0
+max_accel_to_decel:
+[stepper_x]
+step_pin:
+dir_pin:
+enable_pin:
+rotation_distance:
+microsteps:
+full_steps_per_rotation: 200
+gear_ratio:
+step_pulse_duration:
+endstop_pin:
+position_min: 0
+position_endstop:
+position_max:
+homing_speed: 5.0
+homing_retract_dist: 5.0
+homing_retract_speed:
+second_homing_speed:
+homing_positive_dir:
+[printer]
+kinematics: cartesian
+max_z_velocity:
+max_z_accel:
+[stepper_x]
+[stepper_y]
+[stepper_z]
+[printer]
+kinematics: delta
+max_z_velocity:
+max_z_accel:
+minimum_z_position: 0
+delta_radius:
+print_radius:
+[stepper_a]
+position_endstop:
+arm_length:
+angle:
+[stepper_b]
+[stepper_c]
+[delta_calibrate]
+radius:
+speed: 50
+horizontal_move_z: 5
+[printer]
+kinematics: deltesian
+max_z_velocity:
+max_z_accel:
+minimum_z_position: 0
+min_angle: 5
+print_width:
+slow_ratio: 3
+[stepper_left]
+position_endstop:
+arm_length:
+arm_x_length:
+[stepper_right]
+[stepper_y]
+[printer]
+kinematics: corexy
+max_z_velocity:
+max_z_accel:
+[stepper_x]
+[stepper_y]
+[stepper_z]
+[printer]
+kinematics: corexz
+max_z_velocity:
+max_z_accel:
+[stepper_x]
+[stepper_y]
+[stepper_z]
+[printer]
+kinematics: hybrid_corexy
+max_z_velocity:
+max_z_accel:
+[stepper_x]
+[stepper_y]
+[stepper_z]
+[printer]
+kinematics: hybrid_corexz
+max_z_velocity:
+max_z_accel:
+[stepper_x]
+[stepper_y]
+[stepper_z]
+[printer]
+kinematics: polar
+max_z_velocity:
+max_z_accel:
+[stepper_bed]
+gear_ratio:
+[stepper_arm]
+[stepper_z]
+[printer]
+kinematics: rotary_delta
+max_z_velocity:
+minimum_z_position: 0
+shoulder_radius:
+shoulder_height:
+[stepper_a]
+gear_ratio:
+position_endstop:
+upper_arm_length:
+lower_arm_length:
+angle:
+[stepper_b]
+[stepper_c]
+[delta_calibrate]
+radius:
+speed: 50
+horizontal_move_z: 5
+[printer]
+kinematics: winch
+[stepper_a]
+rotation_distance:
+anchor_x:
+anchor_y:
+anchor_z:
+[printer]
+kinematics: none
+max_velocity: 1
+max_accel: 1
+[extruder]
+step_pin:
+dir_pin:
+enable_pin:
+microsteps:
+rotation_distance:
+full_steps_per_rotation:
+gear_ratio:
+nozzle_diameter:
+filament_diameter:
+max_extrude_cross_section:
+instantaneous_corner_velocity: 1.000
+max_extrude_only_distance: 50.0
+max_extrude_only_velocity:
+max_extrude_only_accel:
+pressure_advance: 0.0
+pressure_advance_smooth_time: 0.040
+heater_pin:
+max_power: 1.0
+sensor_type:
+sensor_pin:
+pullup_resistor: 4700
+smooth_time: 1.0
+control:
+pid_Kp:
+pid_Ki:
+pid_Kd:
+max_delta: 2.0
+pwm_cycle_time: 0.100
+min_extrude_temp: 170
+min_temp:
+max_temp:
+[heater_bed]
+heater_pin:
+sensor_type:
+sensor_pin:
+control:
+min_temp:
+max_temp:
+[bed_mesh]
+speed: 50
+horizontal_move_z: 5
+mesh_radius:
+mesh_origin:
+mesh_min:
+mesh_max:
+probe_count: 3, 3
+round_probe_count: 5
+fade_start: 1.0
+fade_end: 0.0
+fade_target:
+split_delta_z: .025
+move_check_distance: 5.0
+mesh_pps: 2, 2
+algorithm: lagrange
+bicubic_tension: .2
+zero_reference_position:
+faulty_region_1_min:
+faulty_region_1_max:
+adaptive_margin:
+scan_overshoot:
+[bed_tilt]
+x_adjust: 0
+y_adjust: 0
+z_adjust: 0
+points:
+speed: 50
+horizontal_move_z: 5
+[bed_screws]
+screw1:
+screw1_name:
+screw1_fine_adjust:
+screw2:
+screw2_name:
+screw2_fine_adjust:
+horizontal_move_z: 5
+probe_height: 0
+speed: 50
+probe_speed: 5
+[screws_tilt_adjust]
+screw1:
+screw1_name:
+screw2:
+screw2_name:
+speed: 50
+horizontal_move_z: 5
+screw_thread: CW-M3
+[z_tilt]
+z_positions:
+points:
+speed: 50
+horizontal_move_z: 5
+retries: 0
+retry_tolerance: 0
+[quad_gantry_level]
+gantry_corners:
+points:
+speed: 50
+horizontal_move_z: 5
+max_adjust: 4
+retries: 0
+retry_tolerance: 0
+[skew_correction]
+[z_thermal_adjust]
+temp_coeff:
+smooth_time:
+z_adjust_off_above:
+max_z_adjustment:
+sensor_type:
+sensor_pin:
+min_temp:
+max_temp:
+gcode_id:
+[safe_z_home]
+home_xy_position:
+speed: 50.0
+z_hop:
+z_hop_speed: 15.0
+move_to_previous: False
+[homing_override]
+gcode:
+axes: xyz
+set_position_x:
+set_position_y:
+set_position_z:
+[endstop_phase stepper_z]
+endstop_accuracy:
+trigger_phase:
+endstop_align_zero: False
+[gcode_macro my_cmd]
+gcode:
+variable_<name>:
+rename_existing:
+description: G-Code macro
+[delayed_gcode my_delayed_gcode]
+gcode:
+initial_duration: 0.0
+[save_variables]
+filename:
+[idle_timeout]
+gcode:
+timeout: 600
+[virtual_sdcard]
+path:
+on_error_gcode:
+[sdcard_loop]
+[force_move]
+enable_force_move: False
+[pause_resume]
+recover_velocity: 50.
+[firmware_retraction]
+retract_length: 0
+retract_speed: 20
+unretract_extra_length: 0
+unretract_speed: 10
+[gcode_arcs]
+resolution: 1.0
+[respond]
+default_type: echo
+default_prefix: echo:
+[exclude_object]
+[input_shaper]
+shaper_freq_x: 0
+shaper_freq_y: 0
+shaper_type: mzv
+shaper_type_x:
+shaper_type_y:
+damping_ratio_x: 0.1
+damping_ratio_y: 0.1
+[adxl345]
+cs_pin:
+spi_speed: 5000000
+spi_bus:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+axes_map: x, y, z
+rate: 3200
+[lis2dw]
+cs_pin:
+spi_speed: 5000000
+spi_bus:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+axes_map: x, y, z
+[mpu9250 my_accelerometer]
+i2c_address:
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed: 400000
+axes_map: x, y, z
+[resonance_tester]
+probe_points:
+accel_chip:
+accel_chip_x:
+accel_chip_y:
+max_smoothing:
+min_freq: 5
+max_freq: 133.33
+accel_per_hz: 75
+hz_per_sec: 1
+[board_pins my_aliases]
+mcu: mcu
+aliases:
+aliases_<name>:
+[duplicate_pin_override]
+pins:
+[probe]
+pin:
+deactivate_on_each_sample: True
+x_offset: 0.0
+y_offset: 0.0
+z_offset:
+speed: 5.0
+samples: 1
+sampleretract_dist: 2.0
+lift_speed:
+samples_result: average
+samples_tolerance: 0.100
+samples_toleranceretries: 0
+activate_gcode:
+deactivate_gcode:
+[bltouch]
+sensor_pin:
+control_pin:
+pin_move_time: 0.680
+stow_on_each_sample: True
+probe_with_touch_mode: False
+pin_up_reports_not_triggered: True
+pin_up_touch_modereports_triggered: True
+set_output_mode:
+x_offset:
+y_offset:
+z_offset:
+speed:
+lift_speed:
+samples:
+sampleretract_dist:
+samples_result:
+samples_tolerance:
+samples_toleranceretries:
+[smart_effector]
+pin:
+control_pin:
+probe_accel:
+recovery_time: 0.4
+x_offset:
+y_offset:
+z_offset:
+speed:
+samples:
+sampleretract_dist:
+samples_result:
+samples_tolerance:
+samples_toleranceretries:
+activate_gcode:
+deactivate_gcode:
+deactivate_on_each_sample:
+[probe_eddy_current my_eddy_probe]
+sensor_type: ldc1612
+intb_pin:
+z_offset:
+i2c_address:
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed:
+x_offset:
+y_offset:
+speed:
+lift_speed:
+samples:
+sampleretract_dist:
+samples_result:
+samples_tolerance:
+samples_toleranceretries:
+[axis_twist_compensation]
+speed: 50
+horizontal_move_z: 5
+calibrate_start_x: 20
+calibrate_end_x: 200
+calibrate_y: 112.5
+[stepper_z1]
+step_pin:
+dir_pin:
+enable_pin:
+microsteps:
+rotation_distance:
+endstop_pin:
+[extruder1]
+step_pin:
+dir_pin:
+shared_heater:
+[dual_carriage]
+axis:
+safe_distance:
+step_pin:
+dir_pin:
+enable_pin:
+microsteps:
+rotation_distance:
+endstop_pin:
+position_endstop:
+position_min:
+position_max:
+[extruder_stepper my_extra_stepper]
+extruder:
+step_pin:
+dir_pin:
+enable_pin:
+microsteps:
+rotation_distance:
+[manual_stepper my_stepper]
+step_pin:
+dir_pin:
+enable_pin:
+microsteps:
+rotation_distance:
+velocity:
+accel:
+endstop_pin:
+[verify_heater heater_config_name]
+max_error: 120
+check_gain_time:
+hysteresis: 5
+heating_gain: 2
+[homing_heaters]
+steppers:
+heaters:
+[thermistor my_thermistor]
+temperature1:
+resistance1:
+temperature2:
+resistance2:
+temperature3:
+resistance3:
+beta:
+[adc_temperature my_sensor]
+temperature1:
+voltage1:
+temperature2:
+voltage2:
+temperature1:
+resistance1:
+temperature2:
+resistance2:
+[heater_generic my_generic_heater]
+gcode_id:
+heater_pin:
+max_power:
+sensor_type:
+sensor_pin:
+smooth_time:
+control:
+pid_Kp:
+pid_Ki:
+pid_Kd:
+pwm_cycle_time:
+min_temp:
+max_temp:
+[temperature_sensor my_sensor]
+sensor_type:
+sensor_pin:
+min_temp:
+max_temp:
+gcode_id:
+[temperature_probe my_probe]
+sensor_type:
+sensor_pin:
+min_temp:
+max_temp:
+smooth_time:
+gcode_id:
+speed:
+horizontal_move_z:
+resting_z:
+calibration_position:
+calibration_bed_temp:
+calibration_extruder_temp:
+extruder_heating_z: 50.
+max_validation_temp: 60.
+sensor_type:
+sensor_pin:
+pullup_resistor: 4700
+inlineresistor: 0
+sensor_type:
+sensor_pin:
+adc_voltage: 5.0
+voltage_offset: 0
+sensor_type: PT1000
+sensor_pin:
+pullup_resistor: 4700
+sensor_type:
+sensor_pin:
+spi_speed: 4000000
+spi_bus:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+tc_type: K
+tc_use_50Hz_filter: False
+tc_averaging_count: 1
+rtd_nominal_r: 100
+rtd_referencer: 430
+rtd_num_of_wires: 2
+rtd_use_50Hz_filter: False
+sensor_type: BME280
+i2c_address:
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed:
+sensor_type: AHT10
+i2c_address:
+i2c_mcu:
+i2c_bus:
+i2c_speed:
+aht10_report_time:
+sensor_type:
+i2c_address:
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed:
+htu21d_hold_master:
+htu21d_resolution:
+htu21d_report_time:
+i2c_address:
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed:
+i2c_address:
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed:
+lm75_report_time:
+sensor_type: temperature_mcu
+sensor_mcu: mcu
+sensor_temperature1:
+sensor_adc1:
+sensor_temperature2:
+sensor_adc2:
+sensor_type: temperature_host
+sensor_path:
+sensor_type: DS18B20
+serial_no:
+ds18_report_time:
+sensor_mcu:
+sensor_type: temperature_combined
+sensor_list:
+combination_method:
+maximum_deviation:
+[fan]
+pin:
+max_power: 1.0
+shutdown_speed: 0
+cycle_time: 0.010
+hardware_pwm: False
+kick_start_time: 0.100
+off_below: 0.0
+tachometer_pin:
+tachometer_ppr: 2
+tachometer_poll_interval: 0.0015
+enable_pin:
+[heater_fan heatbreak_cooling_fan]
+pin:
+max_power:
+shutdown_speed:
+cycle_time:
+hardware_pwm:
+kick_start_time:
+off_below:
+tachometer_pin:
+tachometer_ppr:
+tachometer_poll_interval:
+enable_pin:
+heater: extruder
+heater_temp: 50.0
+fan_speed: 1.0
+[controller_fan my_controller_fan]
+pin:
+max_power:
+shutdown_speed:
+cycle_time:
+hardware_pwm:
+kick_start_time:
+off_below:
+tachometer_pin:
+tachometer_ppr:
+tachometer_poll_interval:
+enable_pin:
+fan_speed: 1.0
+idle_timeout:
+idle_speed:
+heater:
+stepper:
+[temperature_fan my_temp_fan]
+pin:
+max_power:
+shutdown_speed:
+cycle_time:
+hardware_pwm:
+kick_start_time:
+off_below:
+tachometer_pin:
+tachometer_ppr:
+tachometer_poll_interval:
+enable_pin:
+sensor_type:
+sensor_pin:
+control:
+max_delta:
+min_temp:
+max_temp:
+pid_Kp:
+pid_Ki:
+pid_Kd:
+pid_deriv_time: 2.0
+target_temp: 40.0
+max_speed: 1.0
+min_speed: 0.3
+gcode_id:
+[fan_generic extruder_partfan]
+pin:
+max_power:
+shutdown_speed:
+cycle_time:
+hardware_pwm:
+kick_start_time:
+off_below:
+tachometer_pin:
+tachometer_ppr:
+tachometer_poll_interval:
+enable_pin:
+[led my_led]
+red_pin:
+green_pin:
+blue_pin:
+white_pin:
+cycle_time: 0.010
+hardware_pwm: False
+initial_RED: 0.0
+initial_GREEN: 0.0
+initial_BLUE: 0.0
+initial_WHITE: 0.0
+[neopixel my_neopixel]
+pin:
+chain_count:
+color_order: GRB
+initial_RED: 0.0
+initial_GREEN: 0.0
+initial_BLUE: 0.0
+initial_WHITE: 0.0
+[dotstar my_dotstar]
+data_pin:
+clock_pin:
+chain_count:
+initial_RED: 0.0
+initial_GREEN: 0.0
+initial_BLUE: 0.0
+[pca9533 my_pca9533]
+i2c_address: 98
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed:
+initial_RED: 0.0
+initial_GREEN: 0.0
+initial_BLUE: 0.0
+initial_WHITE: 0.0
+[pca9632 my_pca9632]
+i2c_address: 98
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed:
+scl_pin:
+sda_pin:
+color_order: RGBW
+initial_RED: 0.0
+initial_GREEN: 0.0
+initial_BLUE: 0.0
+initial_WHITE: 0.0
+[servo my_servo]
+pin:
+maximum_servo_angle: 180
+minimum_pulse_width: 0.001
+maximum_pulse_width: 0.002
+initial_angle:
+initial_pulse_width:
+[gcode_button my_gcode_button]
+pin:
+analog_range:
+analog_pullup_resistor:
+press_gcode:
+release_gcode:
+[output_pin my_pin]
+pin:
+pwm: False
+value:
+shutdown_value:
+cycle_time: 0.100
+hardware_pwm: False
+scale:
+maximum_mcu_duration:
+static_value:
+[pwm_tool my_tool]
+pin:
+maximum_mcu_duration:
+value:
+shutdown_value:
+cycle_time: 0.100
+hardware_pwm: False
+scale:
+[pwm_cycle_time my_pin]
+pin:
+value:
+shutdown_value:
+cycle_time: 0.100
+scale:
+[static_digital_output my_output_pins]
+pins:
+[multi_pin my_multi_pin]
+pins:
+[tmc2130 stepper_x]
+cs_pin:
+spi_speed:
+spi_bus:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+chain_position:
+chain_length:
+interpolate: True
+run_current:
+hold_current:
+senseresistor: 0.110
+stealthchop_threshold: 0
+coolstep_threshold:
+high_velocity_threshold:
+driver_MSLUT0: 2863314260
+driver_MSLUT1: 1251300522
+driver_MSLUT2: 608774441
+driver_MSLUT3: 269500962
+driver_MSLUT4: 4227858431
+driver_MSLUT5: 3048961917
+driver_MSLUT6: 1227445590
+driver_MSLUT7: 4211234
+driver_W0: 2
+driver_W1: 1
+driver_W2: 1
+driver_W3: 1
+driver_X1: 128
+driver_X2: 255
+driver_X3: 255
+driver_START_SIN: 0
+driver_START_SIN90: 247
+driver_IHOLDDELAY: 8
+driver_TPOWERDOWN: 0
+driver_TBL: 1
+driver_TOFF: 4
+driver_HEND: 7
+driver_HSTRT: 0
+driver_VHIGHFS: 0
+driver_VHIGHCHM: 0
+driver_PWM_AUTOSCALE: True
+driver_PWM_FREQ: 1
+driver_PWM_GRAD: 4
+driver_PWM_AMPL: 128
+driver_SGT: 0
+driver_SEMIN: 0
+driver_SEUP: 0
+driver_SEMAX: 0
+driver_SEDN: 0
+driver_SEIMIN: 0
+driver_SFILT: 0
+diag0_pin:
+diag1_pin:
+[tmc2208 stepper_x]
+uart_pin:
+tx_pin:
+select_pins:
+interpolate: True
+run_current:
+hold_current:
+sense_resistor: 0.110
+stealthchop_threshold: 0
+driver_MULTISTEP_FILT: True
+driver_IHOLDDELAY: 8
+driver_TPOWERDOWN: 20
+driver_TBL: 2
+driver_TOFF: 3
+driver_HEND: 0
+driver_HSTRT: 5
+driver_PWM_AUTOGRAD: True
+driver_PWM_AUTOSCALE: True
+driver_PWM_LIM: 12
+driver_PWM_REG: 8
+driver_PWM_FREQ: 1
+driver_PWM_GRAD: 14
+driver_PWM_OFS: 36
+[tmc2209 stepper_x]
+uart_pin:
+tx_pin:
+select_pins:
+interpolate: True
+run_current:
+hold_current:
+sense_resistor: 0.110
+stealthchop_threshold: 0
+coolstep_threshold:
+uart_address:
+driver_MULTISTEP_FILT: True
+driver_IHOLDDELAY: 8
+driver_TPOWERDOWN: 20
+driver_TBL: 2
+driver_TOFF: 3
+driver_HEND: 0
+driver_HSTRT: 5
+driver_PWM_AUTOGRAD: True
+driver_PWM_AUTOSCALE: True
+driver_PWM_LIM: 12
+driver_PWM_REG: 8
+driver_PWM_FREQ: 1
+driver_PWM_GRAD: 14
+driver_PWM_OFS: 36
+driver_SGTHRS: 0
+driver_SEMIN: 0
+driver_SEUP: 0
+driver_SEMAX: 0
+driver_SEDN: 0
+driver_SEIMIN: 0
+diag_pin:
+[tmc2660 stepper_x]
+cs_pin:
+spi_speed: 4000000
+spi_bus:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+interpolate: True
+run_current:
+sense_resistor:
+idle_current_percent: 100
+driver_TBL: 2
+driver_RNDTF: 0
+driver_HDEC: 0
+driver_CHM: 0
+driver_HEND: 3
+driver_HSTRT: 3
+driver_TOFF: 4
+driver_SEIMIN: 0
+driver_SEDN: 0
+driver_SEMAX: 0
+driver_SEUP: 0
+driver_SEMIN: 0
+driver_SFILT: 0
+driver_SGT: 0
+driver_SLPH: 0
+driver_SLPL: 0
+driver_DISS2G: 0
+driver_TS2G: 3
+[tmc2240 stepper_x]
+cs_pin:
+spi_speed:
+spi_bus:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+uart_pin:
+chain_position:
+chain_length:
+interpolate: True
+run_current:
+hold_current:
+rref: 12000
+stealthchop_threshold: 0
+coolstep_threshold:
+high_velocity_threshold:
+driver_MSLUT0: 2863314260
+driver_MSLUT1: 1251300522
+driver_MSLUT2: 608774441
+driver_MSLUT3: 269500962
+driver_MSLUT4: 4227858431
+driver_MSLUT5: 3048961917
+driver_MSLUT6: 1227445590
+driver_MSLUT7: 4211234
+driver_W0: 2
+driver_W1: 1
+driver_W2: 1
+driver_W3: 1
+driver_X1: 128
+driver_X2: 255
+driver_X3: 255
+driver_START_SIN: 0
+driver_START_SIN90: 247
+driver_OFFSET_SIN90: 0
+driver_MULTISTEP_FILT: True
+driver_IHOLDDELAY: 6
+driver_IRUNDELAY: 4
+driver_TPOWERDOWN: 10
+driver_TBL: 2
+driver_TOFF: 3
+driver_HEND: 2
+driver_HSTRT: 5
+driver_FD3: 0
+driver_TPFD: 4
+driver_CHM: 0
+driver_VHIGHFS: 0
+driver_VHIGHCHM: 0
+driver_DISS2G: 0
+driver_DISS2VS: 0
+driver_PWM_AUTOSCALE: True
+driver_PWM_AUTOGRAD: True
+driver_PWM_FREQ: 0
+driver_FREEWHEEL: 0
+driver_PWM_GRAD: 0
+driver_PWM_OFS: 29
+driver_PWM_REG: 4
+driver_PWM_LIM: 12
+driver_SGT: 0
+driver_SEMIN: 0
+driver_SEUP: 0
+driver_SEMAX: 0
+driver_SEDN: 0
+driver_SEIMIN: 0
+driver_SFILT: 0
+driver_SG4_ANGLE_OFFSET: 1
+diag0_pin:
+diag1_pin:
+[tmc5160 stepper_x]
+cs_pin:
+spi_speed:
+spi_bus:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+chain_position:
+chain_length:
+interpolate: True
+run_current:
+hold_current:
+sense_resistor: 0.075
+stealthchop_threshold: 0
+coolstep_threshold:
+high_velocity_threshold:
+driver_MSLUT0: 2863314260
+driver_MSLUT1: 1251300522
+driver_MSLUT2: 608774441
+driver_MSLUT3: 269500962
+driver_MSLUT4: 4227858431
+driver_MSLUT5: 3048961917
+driver_MSLUT6: 1227445590
+driver_MSLUT7: 4211234
+driver_W0: 2
+driver_W1: 1
+driver_W2: 1
+driver_W3: 1
+driver_X1: 128
+driver_X2: 255
+driver_X3: 255
+driver_START_SIN: 0
+driver_START_SIN90: 247
+driver_MULTISTEP_FILT: True
+driver_IHOLDDELAY: 6
+driver_TPOWERDOWN: 10
+driver_TBL: 2
+driver_TOFF: 3
+driver_HEND: 2
+driver_HSTRT: 5
+driver_FD3: 0
+driver_TPFD: 4
+driver_CHM: 0
+driver_VHIGHFS: 0
+driver_VHIGHCHM: 0
+driver_DISS2G: 0
+driver_DISS2VS: 0
+driver_PWM_AUTOSCALE: True
+driver_PWM_AUTOGRAD: True
+driver_PWM_FREQ: 0
+driver_FREEWHEEL: 0
+driver_PWM_GRAD: 0
+driver_PWM_OFS: 30
+driver_PWM_REG: 4
+driver_PWM_LIM: 12
+driver_SGT: 0
+driver_SEMIN: 0
+driver_SEUP: 0
+driver_SEMAX: 0
+driver_SEDN: 0
+driver_SEIMIN: 0
+driver_SFILT: 0
+driver_DRVSTRENGTH: 0
+driver_BBMCLKS: 4
+driver_BBMTIME: 0
+driver_FILT_ISENSE: 0
+diag0_pin:
+diag1_pin:
+[ad5206 my_digipot]
+enable_pin:
+spi_speed:
+spi_bus:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+channel_1:
+channel_2:
+channel_3:
+channel_4:
+channel_5:
+channel_6:
+scale:
+[mcp4451 my_digipot]
+i2c_address:
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed:
+wiper_0:
+wiper_1:
+wiper_2:
+wiper_3:
+scale:
+[mcp4728 my_dac]
+i2c_address: 96
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed:
+channel_a:
+channel_b:
+channel_c:
+channel_d:
+scale:
+[mcp4018 my_digipot]
+scl_pin:
+sda_pin:
+wiper:
+scale:
+[display]
+lcd_type:
+display_group:
+menu_timeout:
+menu_root:
+menu_reverse_navigation:
+encoder_pins:
+encoder_steps_per_detent:
+click_pin:
+back_pin:
+up_pin:
+down_pin:
+kill_pin:
+analog_pullup_resistor: 4700
+analog_range_click_pin:
+analog_range_back_pin:
+analog_range_up_pin:
+analog_range_down_pin:
+analog_range_kill_pin:
+[display]
+lcd_type: hd44780
+rs_pin:
+e_pin:
+d4_pin:
+d5_pin:
+d6_pin:
+d7_pin:
+hd44780_protocol_init: True
+line_length:
+[display]
+lcd_type: hd44780_spi
+latch_pin:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+hd44780_protocol_init: True
+line_length:
+[display]
+lcd_type: st7920
+cs_pin:
+sclk_pin:
+sid_pin:
+[display]
+lcd_type: emulated_st7920
+en_pin:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+[display]
+lcd_type: uc1701
+cs_pin:
+a0_pin:
+rst_pin:
+contrast:
+[display]
+lcd_type:
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed:
+cs_pin:
+dc_pin:
+spi_speed:
+spi_bus:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+reset_pin:
+contrast:
+vcomh: 0
+invert: False
+x_offset: 0
+[display_data my_group_name my_data_name]
+position:
+text:
+[display_template my_template_name]
+param_<name>:
+text:
+[display_glyph my_display_glyph]
+data:
+hd44780_data:
+hd44780_slot:
+[menu __some_list __some_name]
+type: disabled
+[menu some_name]
+type:
+name:
+enable:
+index:
+[menu some_list]
+type: list
+name:
+enable:
+[menu some_list some_command]
+type: command
+name:
+enable:
+gcode:
+[menu some_list some_input]
+type: input
+name:
+enable:
+input:
+input_min:
+input_max:
+input_step:
+realtime:
+gcode:
+[filament_switch_sensor my_sensor]
+pause_on_runout: True
+runout_gcode:
+insert_gcode:
+event_delay: 3.0
+pause_delay: 0.5
+switch_pin:
+[filament_motion_sensor my_sensor]
+detection_length: 7.0
+extruder:
+switch_pin:
+pause_on_runout:
+runout_gcode:
+insert_gcode:
+event_delay:
+pause_delay:
+[tsl1401cl_filament_width_sensor]
+pin:
+default_nominal_filament_diameter: 1.75
+max_difference: 0.2
+measurement_delay: 100
+[hall_filament_width_sensor]
+adc1:
+adc2:
+cal_dia1: 1.50
+cal_dia2: 2.00
+raw_dia1: 9500
+raw_dia2: 10500
+default_nominal_filament_diameter: 1.75
+max_difference: 0.200
+measurement_delay: 70
+enable: False
+measurement_interval: 10
+logging: False
+min_diameter: 1.0
+max_diameter:
+use_current_dia_while_delay: False
+pause_on_runout:
+runout_gcode:
+insert_gcode:
+event_delay:
+pause_delay:
+[load_cell]
+sensor_type:
+[load_cell]
+sensor_type: hx711
+sclk_pin:
+dout_pin:
+gain: A-128
+sample_rate: 80
+[load_cell]
+sensor_type: hx717
+sclk_pin:
+dout_pin:
+gain: A-128
+sample_rate: 320
+[load_cell]
+sensor_type: ads1220
+cs_pin:
+spi_speed: 512000
+spi_bus:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+data_ready_pin:
+gain: 128
+sample_rate: 660
+[sx1509 my_sx1509]
+i2c_address:
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed:
+[samd_sercom my_sercom]
+sercom:
+tx_pin:
+rx_pin:
+clk_pin:
+[adc_scaled my_name]
+vref_pin:
+vssa_pin:
+smooth_time: 2.0
+[replicape]
+revision:
+enable_pin: !gpio0_20
+host_mcu:
+standstill_power_down: False
+stepper_x_microstep_mode:
+stepper_y_microstep_mode:
+stepper_z_microstep_mode:
+stepper_e_microstep_mode:
+stepper_h_microstep_mode:
+stepper_x_current:
+stepper_y_current:
+stepper_z_current:
+stepper_e_current:
+stepper_h_current:
+stepper_x_chopper_off_time_high:
+stepper_y_chopper_off_time_high:
+stepper_z_chopper_off_time_high:
+stepper_e_chopper_off_time_high:
+stepper_h_chopper_off_time_high:
+stepper_x_chopper_hysteresis_high:
+stepper_y_chopper_hysteresis_high:
+stepper_z_chopper_hysteresis_high:
+stepper_e_chopper_hysteresis_high:
+stepper_h_chopper_hysteresis_high:
+stepper_x_chopper_blank_time_high:
+stepper_y_chopper_blank_time_high:
+stepper_z_chopper_blank_time_high:
+stepper_e_chopper_blank_time_high:
+stepper_h_chopper_blank_time_high:
+[palette2]
+serial:
+baud: 115200
+feedrate_splice: 0.8
+feedrate_normal: 1.0
+auto_load_speed: 2
+auto_cancel_variation: 0.1
+[angle my_angle_sensor]
+sensor_type:
+sample_period: 0.000400
+stepper:
+cs_pin:
+spi_speed:
+spi_bus:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+spi_speed:
+spi_bus:
+spi_software_sclk_pin:
+spi_software_mosi_pin:
+spi_software_miso_pin:
+i2c_address:
+i2c_mcu:
+i2c_bus:
+i2c_software_scl_pin:
+i2c_software_sda_pin:
+i2c_speed:
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/test_config_1.cfg /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/test_config_1.cfg
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/test_config_1.cfg	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/test_config_1.cfg	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,32 @@
+# a comment at the very top
+# should be treated as the file header
+
+# up to the first section, including all blank lines
+
+[section_1]
+option_1: value_1
+option_1_1: True # this is a boolean
+option_1_2: 5 ; this is an integer
+option_1_3: 1.123 #;this is a float
+
+[section_2] ; comment
+option_2: value_2
+
+; comment
+
+[section_3]
+option_3: value_3 # comment
+
+[section_4]
+# comment
+option_4: value_4
+
+[section number 5]
+#option_5: value_5
+option_5 = this.is.value-5
+multi_option:
+  # these are multi-line values
+  value_5_1
+  value_5_2 ; here is a comment
+  value_5_3
+option_5_1: value_5_1
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/test_config_2.cfg /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/test_config_2.cfg
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/test_config_2.cfg	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/test_config_2.cfg	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,33 @@
+# a comment at the very top
+# should be treated as the file header
+
+# up to the first section, including all blank lines
+
+[section_1]
+option_1: value_1
+option_1_1: True # this is a boolean
+option_1_2: 5 ; this is an integer
+option_1_3: 1.123 #;this is a float
+
+[section_2] ; comment
+option_2: value_2
+
+; comment
+
+[section_3]
+option_3: value_3 # comment
+
+[section_4]
+# comment
+option_4: value_4
+
+[section number 5]
+#option_5: value_5
+option_5 = this.is.value-5
+multi_option:
+  # these are multi-line values
+  value_5_1
+  value_5_2 ; here is a comment
+  value_5_3
+option_5_1: value_5_1
+# config ending with a comment
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/test_config_3.cfg /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/test_config_3.cfg
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/test_config_3.cfg	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/assets/test_config_3.cfg	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,94 @@
+# a comment at the very top
+# should be treated as the file header
+
+# up to the first section, including all blank lines
+
+[section_1]
+option_1: value_1
+option_1_1: True # this is a boolean
+option_1_2: 5 ; this is an integer
+option_1_3: 1.123 #;this is a float
+
+[section_2] ; comment
+option_2: value_2
+
+; comment
+
+[section_3]
+option_3: value_3 # comment
+
+[section_4]
+# comment
+option_4: value_4
+
+[section number 5]
+#option_5: value_5
+option_5 = this.is.value-5
+multi_option:
+  # these are multi-line values
+  value_5_1
+  value_5_2 ; here is a comment
+  value_5_3
+option_5_1: value_5_1
+
+[gcode_macro M117]
+rename_existing: M117.1
+gcode:
+  {% if rawparams %}
+    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
+    SET_DISPLAY_TEXT MSG="{escaped_msg}"
+    RESPOND TYPE=command MSG="{escaped_msg}"
+  {% else %}
+    SET_DISPLAY_TEXT
+  {% endif %}
+
+# SDCard 'looping' (aka Marlin M808 commands) support
+#
+# Support SDCard looping
+[sdcard_loop]
+[gcode_macro M486]
+gcode:
+  # Parameters known to M486 are as follows:
+  #   [C<flag>] Cancel the current object
+  #   [P<index>] Cancel the object with the given index
+  #   [S<index>] Set the index of the current object.
+  #       If the object with the given index has been canceled, this will cause
+  #       the firmware to skip to the next object. The value -1 is used to
+  #       indicate something that isn’t an object and shouldn’t be skipped.
+  #   [T<count>] Reset the state and set the number of objects
+  #   [U<index>] Un-cancel the object with the given index. This command will be
+  #       ignored if the object has already been skipped
+
+  {% if 'exclude_object' not in printer %}
+    {action_raise_error("[exclude_object] is not enabled")}
+  {% endif %}
+
+  {% if 'T' in params %}
+    EXCLUDE_OBJECT RESET=1
+
+    {% for i in range(params.T | int) %}
+      EXCLUDE_OBJECT_DEFINE NAME={i}
+    {% endfor %}
+  {% endif %}
+
+  {% if 'C' in params %}
+    EXCLUDE_OBJECT CURRENT=1
+  {% endif %}
+
+  {% if 'P' in params %}
+    EXCLUDE_OBJECT NAME={params.P}
+  {% endif %}
+
+  {% if 'S' in params %}
+    {% if params.S == '-1' %}
+      {% if printer.exclude_object.current_object %}
+        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
+      {% endif %}
+    {% else %}
+      EXCLUDE_OBJECT_START NAME={params.S}
+    {% endif %}
+  {% endif %}
+
+  {% if 'U' in params %}
+    EXCLUDE_OBJECT RESET=1 NAME={params.U}
+  {% endif %}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_empty_line/test_data/matching_data.txt /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_empty_line/test_data/matching_data.txt
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_empty_line/test_data/matching_data.txt	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_empty_line/test_data/matching_data.txt	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,6 @@
+
+
+
+
+
+
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_empty_line/test_data/non_matching_data.txt /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_empty_line/test_data/non_matching_data.txt
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_empty_line/test_data/non_matching_data.txt	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_empty_line/test_data/non_matching_data.txt	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,7 @@
+not_empty
+[also_not_empty]
+#
+;
+ ;
+  #
+option: value
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_empty_line/test_match_empty_line.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_empty_line/test_match_empty_line.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_empty_line/test_match_empty_line.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_empty_line/test_match_empty_line.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,39 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+import pytest
+
+from src.simple_config_parser.simple_config_parser import SimpleConfigParser
+from tests.utils import load_testdata_from_file
+
+BASE_DIR = Path(__file__).parent.joinpath("test_data")
+MATCHING_TEST_DATA_PATH = BASE_DIR.joinpath("matching_data.txt")
+NON_MATCHING_TEST_DATA_PATH = BASE_DIR.joinpath("non_matching_data.txt")
+
+
+@pytest.fixture
+def parser():
+    return SimpleConfigParser()
+
+
+@pytest.mark.parametrize("line", load_testdata_from_file(MATCHING_TEST_DATA_PATH))
+def test_match_line_comment(parser, line):
+    """Test that a line matches the definition of a line comment"""
+    assert (
+        parser._match_empty_line(line) is True
+    ), f"Expected line '{line}' to match line comment definition!"
+
+
+@pytest.mark.parametrize("line", load_testdata_from_file(NON_MATCHING_TEST_DATA_PATH))
+def test_non_matching_line_comment(parser, line):
+    """Test that a line does not match the definition of a line comment"""
+    assert (
+        parser._match_empty_line(line) is False
+    ), f"Expected line '{line}' to not match line comment definition!"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_line_comment/test_data/matching_data.txt /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_line_comment/test_data/matching_data.txt
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_line_comment/test_data/matching_data.txt	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_line_comment/test_data/matching_data.txt	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,28 @@
+;[example_section]
+#[example_section]
+# [example_section]
+; [example_section]
+;[gcode_macro CANCEL_PRINT]
+#[gcode_macro CANCEL_PRINT]
+# [gcode_macro CANCEL_PRINT]
+; [gcode_macro CANCEL_PRINT]
+;[gcode_macro SET_PAUSE_NEXT_LAYER]
+#[gcode_macro SET_PAUSE_NEXT_LAYER]
+# [gcode_macro SET_PAUSE_NEXT_LAYER]
+; [gcode_macro SET_PAUSE_NEXT_LAYER]
+;[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+#[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+# [gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+; [gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+ ;[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+ #[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+ # [gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+ ; [gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+  ;[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+  #[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+  # [gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+  ; [gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+   ;[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+   #[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+   # [gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+   ; [gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_line_comment/test_data/non_matching_data.txt /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_line_comment/test_data/non_matching_data.txt
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_line_comment/test_data/non_matching_data.txt	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_line_comment/test_data/non_matching_data.txt	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,5 @@
+not_a_comment: nono
+
+[also not a comment]
+not_a_comment: ; comment
+not_a_comment: # comment
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_line_comment/test_match_line_comment.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_line_comment/test_match_line_comment.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_line_comment/test_match_line_comment.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_line_comment/test_match_line_comment.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,39 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+import pytest
+
+from src.simple_config_parser.simple_config_parser import SimpleConfigParser
+from tests.utils import load_testdata_from_file
+
+BASE_DIR = Path(__file__).parent.joinpath("test_data")
+MATCHING_TEST_DATA_PATH = BASE_DIR.joinpath("matching_data.txt")
+NON_MATCHING_TEST_DATA_PATH = BASE_DIR.joinpath("non_matching_data.txt")
+
+
+@pytest.fixture
+def parser():
+    return SimpleConfigParser()
+
+
+@pytest.mark.parametrize("line", load_testdata_from_file(MATCHING_TEST_DATA_PATH))
+def test_match_line_comment(parser, line):
+    """Test that a line matches the definition of a line comment"""
+    assert (
+        parser._match_line_comment(line) is True
+    ), f"Expected line '{line}' to match line comment definition!"
+
+
+@pytest.mark.parametrize("line", load_testdata_from_file(NON_MATCHING_TEST_DATA_PATH))
+def test_non_matching_line_comment(parser, line):
+    """Test that a line does not match the definition of a line comment"""
+    assert (
+        parser._match_line_comment(line) is False
+    ), f"Expected line '{line}' to not match line comment definition!"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option/test_data/matching_data.txt /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option/test_data/matching_data.txt
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option/test_data/matching_data.txt	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option/test_data/matching_data.txt	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,461 @@
+baud: 250000
+minimum_cruise_ratio: 0.5
+square_corner_velocity: 5.0
+full_steps_per_rotation: 200
+position_min: 0
+homing_speed: 5.0
+homing_retract_dist: 5.0
+kinematics: cartesian
+kinematics: delta
+minimum_z_position: 0
+speed: 50
+horizontal_move_z: 5
+kinematics: deltesian
+minimum_z_position: 0
+min_angle: 5
+slow_ratio: 3
+kinematics: corexy
+kinematics: corexz
+kinematics: hybrid_corexy
+kinematics: hybrid_corexz
+kinematics: polar
+kinematics: rotary_delta
+minimum_z_position: 0
+speed: 50
+horizontal_move_z: 5
+kinematics: winch
+kinematics: none
+max_velocity: 1
+max_accel: 1
+instantaneous_corner_velocity: 1.000
+max_extrude_only_distance: 50.0
+pressure_advance: 0.0
+pressure_advance_smooth_time: 0.040
+max_power: 1.0
+pullup_resistor: 4700
+smooth_time: 1.0
+max_delta: 2.0
+pwm_cycle_time: 0.100
+min_extrude_temp: 170
+speed: 50
+horizontal_move_z: 5
+probe_count: 3, 3
+round_probe_count: 5
+fade_start: 1.0
+fade_end: 0.0
+split_delta_z: .025
+move_check_distance: 5.0
+mesh_pps: 2, 2
+algorithm: lagrange
+bicubic_tension: .2
+x_adjust: 0
+y_adjust: 0
+z_adjust: 0
+speed: 50
+horizontal_move_z: 5
+horizontal_move_z: 5
+probe_height: 0
+speed: 50
+probe_speed: 5
+speed: 50
+horizontal_move_z: 5
+screw_thread: CW-M3
+speed: 50
+horizontal_move_z: 5
+retries: 0
+retry_tolerance: 0
+speed: 50
+horizontal_move_z: 5
+max_adjust: 4
+retries: 0
+retry_tolerance: 0
+speed: 50.0
+z_hop_speed: 15.0
+move_to_previous: False
+axes: xyz
+endstop_align_zero: False
+description: G-Code macro
+initial_duration: 0.0
+timeout: 600
+enable_force_move: False
+recover_velocity: 50.
+retract_length: 0
+retract_speed: 20
+unretract_extra_length: 0
+unretract_speed: 10
+resolution: 1.0
+default_type: echo
+default_prefix: echo:
+shaper_freq_x: 0
+shaper_freq_y: 0
+shaper_type: mzv
+damping_ratio_x: 0.1
+damping_ratio_y: 0.1
+spi_speed: 5000000
+axes_map: x, y, z
+rate: 3200
+spi_speed: 5000000
+axes_map: x, y, z
+i2c_speed: 400000
+axes_map: x, y, z
+min_freq: 5
+max_freq: 133.33
+accel_per_hz: 75
+hz_per_sec: 1
+mcu: mcu
+deactivate_on_each_sample: True
+x_offset: 0.0
+y_offset: 0.0
+speed: 5.0
+samples: 1
+sampleretract_dist: 2.0
+samples_result: average
+samples_tolerance: 0.100
+samples_toleranceretries: 0
+pin_move_time: 0.680
+stow_on_each_sample: True
+probe_with_touch_mode: False
+pin_up_reports_not_triggered: True
+pin_up_touch_modereports_triggered: True
+recovery_time: 0.4
+sensor_type: ldc1612
+speed: 50
+horizontal_move_z: 5
+calibrate_start_x: 20
+calibrate_end_x: 200
+calibrate_y: 112.5
+max_error: 120
+hysteresis: 5
+heating_gain: 2
+extruder_heating_z: 50.
+max_validation_temp: 60.
+pullup_resistor: 4700
+inlineresistor: 0
+adc_voltage: 5.0
+voltage_offset: 0
+sensor_type: PT1000
+pullup_resistor: 4700
+spi_speed: 4000000
+tc_type: K
+tc_use_50Hz_filter: False
+tc_averaging_count: 1
+rtd_nominal_r: 100
+rtd_referencer: 430
+rtd_num_of_wires: 2
+rtd_use_50Hz_filter: False
+sensor_type: BME280
+sensor_type: AHT10
+sensor_type: temperature_mcu
+sensor_mcu: mcu
+sensor_type: temperature_host
+sensor_type: DS18B20
+sensor_type: temperature_combined
+max_power: 1.0
+shutdown_speed: 0
+cycle_time: 0.010
+hardware_pwm: False
+kick_start_time: 0.100
+off_below: 0.0
+tachometer_ppr: 2
+tachometer_poll_interval: 0.0015
+heater: extruder
+heater_temp: 50.0
+fan_speed: 1.0
+fan_speed: 1.0
+pid_deriv_time: 2.0
+target_temp: 40.0
+max_speed: 1.0
+min_speed: 0.3
+cycle_time: 0.010
+hardware_pwm: False
+initial_RED: 0.0
+initial_GREEN: 0.0
+initial_BLUE: 0.0
+initial_WHITE: 0.0
+color_order: GRB
+initial_RED: 0.0
+initial_GREEN: 0.0
+initial_BLUE: 0.0
+initial_WHITE: 0.0
+initial_RED: 0.0
+initial_GREEN: 0.0
+initial_BLUE: 0.0
+i2c_address: 98
+initial_RED: 0.0
+initial_GREEN: 0.0
+initial_BLUE: 0.0
+initial_WHITE: 0.0
+i2c_address: 98
+color_order: RGBW
+initial_RED: 0.0
+initial_GREEN: 0.0
+initial_BLUE: 0.0
+initial_WHITE: 0.0
+maximum_servo_angle: 180
+minimum_pulse_width: 0.001
+maximum_pulse_width: 0.002
+pwm: False
+cycle_time: 0.100
+hardware_pwm: False
+cycle_time: 0.100
+hardware_pwm: False
+cycle_time: 0.100
+interpolate: True
+senseresistor: 0.110
+stealthchop_threshold: 0
+driver_MSLUT0: 2863314260
+driver_MSLUT1: 1251300522
+driver_MSLUT2: 608774441
+driver_MSLUT3: 269500962
+driver_MSLUT4: 4227858431
+driver_MSLUT5: 3048961917
+driver_MSLUT6: 1227445590
+driver_MSLUT7: 4211234
+driver_W0: 2
+driver_W1: 1
+driver_W2: 1
+driver_W3: 1
+driver_X1: 128
+driver_X2: 255
+driver_X3: 255
+driver_START_SIN: 0
+driver_START_SIN90: 247
+driver_IHOLDDELAY: 8
+driver_TPOWERDOWN: 0
+driver_TBL: 1
+driver_TOFF: 4
+driver_HEND: 7
+driver_HSTRT: 0
+driver_VHIGHFS: 0
+driver_VHIGHCHM: 0
+driver_PWM_AUTOSCALE: True
+driver_PWM_FREQ: 1
+driver_PWM_GRAD: 4
+driver_PWM_AMPL: 128
+driver_SGT: 0
+driver_SEMIN: 0
+driver_SEUP: 0
+driver_SEMAX: 0
+driver_SEDN: 0
+driver_SEIMIN: 0
+driver_SFILT: 0
+interpolate: True
+sense_resistor: 0.110
+stealthchop_threshold: 0
+driver_MULTISTEP_FILT: True
+driver_IHOLDDELAY: 8
+driver_TPOWERDOWN: 20
+driver_TBL: 2
+driver_TOFF: 3
+driver_HEND: 0
+driver_HSTRT: 5
+driver_PWM_AUTOGRAD: True
+driver_PWM_AUTOSCALE: True
+driver_PWM_LIM: 12
+driver_PWM_REG: 8
+driver_PWM_FREQ: 1
+driver_PWM_GRAD: 14
+driver_PWM_OFS: 36
+interpolate: True
+sense_resistor: 0.110
+stealthchop_threshold: 0
+driver_MULTISTEP_FILT: True
+driver_IHOLDDELAY: 8
+driver_TPOWERDOWN: 20
+driver_TBL: 2
+driver_TOFF: 3
+driver_HEND: 0
+driver_HSTRT: 5
+driver_PWM_AUTOGRAD: True
+driver_PWM_AUTOSCALE: True
+driver_PWM_LIM: 12
+driver_PWM_REG: 8
+driver_PWM_FREQ: 1
+driver_PWM_GRAD: 14
+driver_PWM_OFS: 36
+driver_SGTHRS: 0
+driver_SEMIN: 0
+driver_SEUP: 0
+driver_SEMAX: 0
+driver_SEDN: 0
+driver_SEIMIN: 0
+spi_speed: 4000000
+interpolate: True
+idle_current_percent: 100
+driver_TBL: 2
+driver_RNDTF: 0
+driver_HDEC: 0
+driver_CHM: 0
+driver_HEND: 3
+driver_HSTRT: 3
+driver_TOFF: 4
+driver_SEIMIN: 0
+driver_SEDN: 0
+driver_SEMAX: 0
+driver_SEUP: 0
+driver_SEMIN: 0
+driver_SFILT: 0
+driver_SGT: 0
+driver_SLPH: 0
+driver_SLPL: 0
+driver_DISS2G: 0
+driver_TS2G: 3
+interpolate: True
+rref: 12000
+stealthchop_threshold: 0
+driver_MSLUT0: 2863314260
+driver_MSLUT1: 1251300522
+driver_MSLUT2: 608774441
+driver_MSLUT3: 269500962
+driver_MSLUT4: 4227858431
+driver_MSLUT5: 3048961917
+driver_MSLUT6: 1227445590
+driver_MSLUT7: 4211234
+driver_W0: 2
+driver_W1: 1
+driver_W2: 1
+driver_W3: 1
+driver_X1: 128
+driver_X2: 255
+driver_X3: 255
+driver_START_SIN: 0
+driver_START_SIN90: 247
+driver_OFFSET_SIN90: 0
+driver_MULTISTEP_FILT: True
+driver_IHOLDDELAY: 6
+driver_IRUNDELAY: 4
+driver_TPOWERDOWN: 10
+driver_TBL: 2
+driver_TOFF: 3
+driver_HEND: 2
+driver_HSTRT: 5
+driver_FD3: 0
+driver_TPFD: 4
+driver_CHM: 0
+driver_VHIGHFS: 0
+driver_VHIGHCHM: 0
+driver_DISS2G: 0
+driver_DISS2VS: 0
+driver_PWM_AUTOSCALE: True
+driver_PWM_AUTOGRAD: True
+driver_PWM_FREQ: 0
+driver_FREEWHEEL: 0
+driver_PWM_GRAD: 0
+driver_PWM_OFS: 29
+driver_PWM_REG: 4
+driver_PWM_LIM: 12
+driver_SGT: 0
+driver_SEMIN: 0
+driver_SEUP: 0
+driver_SEMAX: 0
+driver_SEDN: 0
+driver_SEIMIN: 0
+driver_SFILT: 0
+driver_SG4_ANGLE_OFFSET: 1
+interpolate: True
+sense_resistor: 0.075
+stealthchop_threshold: 0
+driver_MSLUT0: 2863314260
+driver_MSLUT1: 1251300522
+driver_MSLUT2: 608774441
+driver_MSLUT3: 269500962
+driver_MSLUT4: 4227858431
+driver_MSLUT5: 3048961917
+driver_MSLUT6: 1227445590
+driver_MSLUT7: 4211234
+driver_W0: 2
+driver_W1: 1
+driver_W2: 1
+driver_W3: 1
+driver_X1: 128
+driver_X2: 255
+driver_X3: 255
+driver_START_SIN: 0
+driver_START_SIN90: 247
+driver_MULTISTEP_FILT: True
+driver_IHOLDDELAY: 6
+driver_TPOWERDOWN: 10
+driver_TBL: 2
+driver_TOFF: 3
+driver_HEND: 2
+driver_HSTRT: 5
+driver_FD3: 0
+driver_TPFD: 4
+driver_CHM: 0
+driver_VHIGHFS: 0
+driver_VHIGHCHM: 0
+driver_DISS2G: 0
+driver_DISS2VS: 0
+driver_PWM_AUTOSCALE: True
+driver_PWM_AUTOGRAD: True
+driver_PWM_FREQ: 0
+driver_FREEWHEEL: 0
+driver_PWM_GRAD: 0
+driver_PWM_OFS: 30
+driver_PWM_REG: 4
+driver_PWM_LIM: 12
+driver_SGT: 0
+driver_SEMIN: 0
+driver_SEUP: 0
+driver_SEMAX: 0
+driver_SEDN: 0
+driver_SEIMIN: 0
+driver_SFILT: 0
+driver_DRVSTRENGTH: 0
+driver_BBMCLKS: 4
+driver_BBMTIME: 0
+driver_FILT_ISENSE: 0
+i2c_address: 96
+analog_pullup_resistor: 4700
+lcd_type: hd44780
+hd44780_protocol_init: True
+lcd_type: hd44780_spi
+hd44780_protocol_init: True
+lcd_type: st7920
+lcd_type: emulated_st7920
+lcd_type: uc1701
+vcomh: 0
+invert: False
+x_offset: 0
+type: disabled
+type: list
+type: command
+type: input
+pause_on_runout: True
+event_delay: 3.0
+pause_delay: 0.5
+detection_length: 7.0
+default_nominal_filament_diameter: 1.75
+max_difference: 0.2
+measurement_delay: 100
+cal_dia1: 1.50
+cal_dia2: 2.00
+raw_dia1: 9500
+raw_dia2: 10500
+default_nominal_filament_diameter: 1.75
+max_difference: 0.200
+measurement_delay: 70
+enable: False
+measurement_interval: 10
+logging: False
+min_diameter: 1.0
+use_current_dia_while_delay: False
+sensor_type: hx711
+gain: A-128
+sample_rate: 80
+sensor_type: hx717
+gain: A-128
+sample_rate: 320
+sensor_type: ads1220
+spi_speed: 512000
+gain: 128
+sample_rate: 660
+smooth_time: 2.0
+enable_pin: !gpio0_20
+standstill_power_down: False
+baud: 115200
+feedrate_splice: 0.8
+feedrate_normal: 1.0
+auto_load_speed: 2
+auto_cancel_variation: 0.1
+sample_period: 0.000400
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option/test_data/non_matching_data.txt /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option/test_data/non_matching_data.txt
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option/test_data/non_matching_data.txt	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option/test_data/non_matching_data.txt	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,37 @@
+[section]
+[section with spaces]
+[section with spaces and comments] ; comment 1
+[section with spaces and comments] # comment 2
+ indented_option: value
+option_with_no_value:
+another_option_with_no_value:
+ indented_option_with_no_value:
+# position_min: 0
+# homing_speed: 5.0
+
+### this is a comment
+; this is also a comment
+# [section]
+# [section with spaces]
+# [section with spaces and comments] ; comment 1
+;[section]
+;[section with spaces]
+;[section with spaces and comments] ; comment 1
+# commented_option: value
+#commented_option: value
+;commented_option: value
+; commented_option: value
+#
+;
+option_1 :: value
+option_1:: value
+option_1 ::value
+option_2 == value
+option_2== value
+option_2 ==value
+option_1 := value
+option_1:= value
+option_1 :=value
+option_2 := value
+option_2:= value
+option_2 :=value
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option/test_match_option.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option/test_match_option.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option/test_match_option.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option/test_match_option.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,39 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+import pytest
+
+from src.simple_config_parser.simple_config_parser import SimpleConfigParser
+from tests.utils import load_testdata_from_file
+
+BASE_DIR = Path(__file__).parent.joinpath("test_data")
+MATCHING_TEST_DATA_PATH = BASE_DIR.joinpath("matching_data.txt")
+NON_MATCHING_TEST_DATA_PATH = BASE_DIR.joinpath("non_matching_data.txt")
+
+
+@pytest.fixture
+def parser():
+    return SimpleConfigParser()
+
+
+@pytest.mark.parametrize("line", load_testdata_from_file(MATCHING_TEST_DATA_PATH))
+def test_match_option(parser, line):
+    """Test that a line matches the definition of an option"""
+    assert (
+        parser._match_option(line) is True
+    ), f"Expected line '{line}' to match option definition!"
+
+
+@pytest.mark.parametrize("line", load_testdata_from_file(NON_MATCHING_TEST_DATA_PATH))
+def test_non_matching_option(parser, line):
+    """Test that a line does not match the definition of an option"""
+    assert (
+        parser._match_option(line) is False
+    ), f"Expected line '{line}' to not match option definition!"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option_block_start/test_data/matching_data.txt /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option_block_start/test_data/matching_data.txt
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option_block_start/test_data/matching_data.txt	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option_block_start/test_data/matching_data.txt	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,15 @@
+trusted_clients:
+gcode:
+cors_domains:
+an_options_block_start_with_comment: ; this is a comment
+an_options_block_start_with_comment: # this is a comment
+options_block_start_with_comment:;this is a comment
+options_block_start_with_comment :;this is a comment
+options_block_start_with_comment:#this is a comment
+options_block_start_with_comment :#this is a comment
+parameter_temperature_(°C):
+parameter_temperature_(°C)=
+parameter_humidity_(%_RH):
+parameter_humidity_(%_RH) :
+parameter_spool_weight_(%):
+parameter_spool_weight_(%) =
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option_block_start/test_data/non_matching_data.txt /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option_block_start/test_data/non_matching_data.txt
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option_block_start/test_data/non_matching_data.txt	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option_block_start/test_data/non_matching_data.txt	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,31 @@
+type: jsonfile
+path: /dev/shm/drying_box.json
+baud: 250000
+minimum_cruise_ratio: 0.5
+square_corner_velocity: 5.0
+full_steps_per_rotation: 200
+position_min: 0
+homing_speed: 5.0
+# baud: 250000
+# minimum_cruise_ratio: 0.5
+# square_corner_velocity: 5.0
+# full_steps_per_rotation: 200
+# position_min: 0
+# homing_speed: 5.0
+
+### this is a comment
+; this is also a comment
+;
+#
+homing_speed::
+homing_speed::
+homing_speed ::
+homing_speed ::
+homing_speed==
+homing_speed==
+homing_speed ==
+homing_speed ==
+homing_speed :=
+homing_speed :=
+homing_speed =:
+homing_speed =:
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option_block_start/test_match_options_block_start.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option_block_start/test_match_options_block_start.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option_block_start/test_match_options_block_start.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_option_block_start/test_match_options_block_start.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,39 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+import pytest
+
+from src.simple_config_parser.simple_config_parser import SimpleConfigParser
+from tests.utils import load_testdata_from_file
+
+BASE_DIR = Path(__file__).parent.joinpath("test_data")
+MATCHING_TEST_DATA_PATH = BASE_DIR.joinpath("matching_data.txt")
+NON_MATCHING_TEST_DATA_PATH = BASE_DIR.joinpath("non_matching_data.txt")
+
+
+@pytest.fixture
+def parser():
+    return SimpleConfigParser()
+
+
+@pytest.mark.parametrize("line", load_testdata_from_file(MATCHING_TEST_DATA_PATH))
+def test_match_options_block_start(parser, line):
+    """Test that a line matches the definition of an options block start"""
+    assert (
+        parser._match_options_block_start(line) is True
+    ), f"Expected line '{line}' to match options block start definition!"
+
+
+@pytest.mark.parametrize("line", load_testdata_from_file(NON_MATCHING_TEST_DATA_PATH))
+def test_non_matching_options_block_start(parser, line):
+    """Test that a line does not match the definition of an options block start"""
+    assert (
+        parser._match_options_block_start(line) is False
+    ), f"Expected line '{line}' to not match options block start definition!"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_section/test_data/matching_data.txt /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_section/test_data/matching_data.txt
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_section/test_data/matching_data.txt	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_section/test_data/matching_data.txt	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,127 @@
+[example_section]
+[gcode_macro CANCEL_PRINT]
+[gcode_macro SET_PAUSE_NEXT_LAYER]
+[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
+[update_manager moonraker-obico]
+[include moonraker_obico_macros.cfg]
+[include moonraker-obico-update.cfg]
+[example_section two]
+[valid_content]
+[valid content]
+[content123]
+[a]
+[valid_content] # comment
+[something];comment
+[mcu]
+[printer]
+[printer]
+[stepper_x]
+[stepper_y]
+[stepper_z]
+[printer]
+[stepper_a]
+[stepper_b]
+[stepper_c]
+[delta_calibrate]
+[printer]
+[stepper_left]
+[stepper_right]
+[stepper_bed]
+[stepper_arm]
+[delta_calibrate]
+[extruder]
+[heater_bed]
+[bed_mesh]
+[bed_tilt]
+[bed_screws]
+[screws_tilt_adjust]
+[z_tilt]
+[quad_gantry_level]
+[skew_correction]
+[z_thermal_adjust]
+[safe_z_home]
+[homing_override]
+[endstop_phase stepper_z]
+[gcode_macro my_cmd]
+[delayed_gcode my_delayed_gcode]
+[save_variables]
+[idle_timeout]
+[virtual_sdcard]
+[sdcard_loop]
+[force_move]
+[pause_resume]
+[firmware_retraction]
+[gcode_arcs]
+[respond]
+[exclude_object]
+[input_shaper]
+[adxl345]
+[lis2dw]
+[mpu9250 my_accelerometer]
+[resonance_tester]
+[board_pins my_aliases]
+[duplicate_pin_override]
+[probe]
+[bltouch]
+[smart_effector]
+[probe_eddy_current my_eddy_probe]
+[axis_twist_compensation]
+[stepper_z1]
+[extruder1]
+[dual_carriage]
+[extruder_stepper my_extra_stepper]
+[manual_stepper my_stepper]
+[verify_heater heater_config_name]
+[homing_heaters]
+[thermistor my_thermistor]
+[adc_temperature my_sensor]
+[heater_generic my_generic_heater]
+[temperature_sensor my_sensor]
+[temperature_probe my_probe]
+[fan]
+[heater_fan heatbreak_cooling_fan]
+[controller_fan my_controller_fan]
+[temperature_fan my_temp_fan]
+[fan_generic extruder_partfan]
+[led my_led]
+[neopixel my_neopixel]
+[dotstar my_dotstar]
+[pca9533 my_pca9533]
+[pca9632 my_pca9632]
+[servo my_servo]
+[gcode_button my_gcode_button]
+[output_pin my_pin]
+[pwm_tool my_tool]
+[pwm_cycle_time my_pin]
+[static_digital_output my_output_pins]
+[multi_pin my_multi_pin]
+[tmc2130 stepper_x]
+[tmc2208 stepper_x]
+[tmc2209 stepper_x]
+[tmc2660 stepper_x]
+[tmc2240 stepper_x]
+[tmc5160 stepper_x]
+[ad5206 my_digipot]
+[mcp4451 my_digipot]
+[mcp4728 my_dac]
+[mcp4018 my_digipot]
+[display]
+[display_data my_group_name my_data_name]
+[display_template my_template_name]
+[display_glyph my_display_glyph]
+[menu __some_list __some_name]
+[menu some_name]
+[menu some_list]
+[menu some_list some_command]
+[menu some_list some_input]
+[filament_switch_sensor my_sensor]
+[filament_motion_sensor my_sensor]
+[tsl1401cl_filament_width_sensor]
+[hall_filament_width_sensor]
+[load_cell]
+[sx1509 my_sx1509]
+[samd_sercom my_sercom]
+[adc_scaled my_name]
+[replicape]
+[palette2]
+[angle my_angle_sensor]
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_section/test_data/non_matching_data.txt /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_section/test_data/non_matching_data.txt
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_section/test_data/non_matching_data.txt	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_section/test_data/non_matching_data.txt	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,19 @@
+section: invalid
+not_a_valid_section
+[missing_square_bracket
+missing_square_bracket]
+[]
+[ ]
+  [indented_section]
+           [indented_section]  # comment
+       [indented_section]  ; comment
+;[commented_section]
+#[another_commented_section]
+; [commented_section]
+# [another_commented_section]
+this_is_an_option: 123
+  this_is_an_indented_option: 123
+this_is_an_option_block_start:
+
+#
+;
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_section/test_match_section.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_section/test_match_section.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_section/test_match_section.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_matching/match_section/test_match_section.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,39 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+import pytest
+
+from src.simple_config_parser.simple_config_parser import SimpleConfigParser
+from tests.utils import load_testdata_from_file
+
+BASE_DIR = Path(__file__).parent.joinpath("test_data")
+MATCHING_TEST_DATA_PATH = BASE_DIR.joinpath("matching_data.txt")
+NON_MATCHING_TEST_DATA_PATH = BASE_DIR.joinpath("non_matching_data.txt")
+
+
+@pytest.fixture
+def parser():
+    return SimpleConfigParser()
+
+
+@pytest.mark.parametrize("line", load_testdata_from_file(MATCHING_TEST_DATA_PATH))
+def test_match_section(parser, line):
+    """Test that a line matches the definition of a section"""
+    assert (
+        parser._match_section(line) is True
+    ), f"Expected line '{line}' to match section definition!"
+
+
+@pytest.mark.parametrize("line", load_testdata_from_file(NON_MATCHING_TEST_DATA_PATH))
+def test_non_matching_section(parser, line):
+    """Test that a line does not match the definition of a section"""
+    assert (
+        parser._match_section(line) is False
+    ), f"Expected line '{line}' to not match section definition!"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_parsing/test_line_parsing.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_parsing/test_line_parsing.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_parsing/test_line_parsing.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/line_parsing/test_line_parsing.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,62 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from pathlib import Path
+
+import pytest
+
+from src.simple_config_parser.constants import HEADER_IDENT
+from src.simple_config_parser.simple_config_parser import SimpleConfigParser
+from tests.utils import load_testdata_from_file
+
+BASE_DIR = Path(__file__).parent.parent.joinpath("assets")
+TEST_DATA_PATH = BASE_DIR.joinpath("test_config_1.cfg")
+
+
+@pytest.fixture
+def parser():
+    parser = SimpleConfigParser()
+    for line in load_testdata_from_file(TEST_DATA_PATH):
+        parser._parse_line(line)  # noqa
+
+    return parser
+
+
+def test_section_parsing(parser):
+    expected_keys = {"section_1", "section_2", "section_3", "section_4"}
+    assert expected_keys.issubset(
+        parser.config.keys()
+    ), f"Expected keys: {expected_keys}, got: {parser.config.keys()}"
+    assert parser.in_option_block is False
+    assert parser.current_section == parser.get_sections()[-1]
+    assert parser.config["section_2"]["_raw"] == "[section_2] ; comment"
+
+
+def test_option_parsing(parser):
+    assert parser.config["section_1"]["option_1"]["value"] == "value_1"
+    assert parser.config["section_1"]["option_1"]["_raw"] == "option_1: value_1"
+    assert parser.config["section_3"]["option_3"]["value"] == "value_3"
+    assert (
+        parser.config["section_3"]["option_3"]["_raw"] == "option_3: value_3 # comment"
+    )
+
+
+def test_header_parsing(parser):
+    header = parser.config[HEADER_IDENT]
+    assert isinstance(header, list)
+    assert len(header) > 0
+
+
+def test_collector_parsing(parser):
+    section = "section_2"
+    section_content = list(parser.config[section].keys())
+    coll_name = [name for name in section_content if name.startswith("#_")][0]
+    collector = parser.config[section][coll_name]
+    assert collector is not None
+    assert isinstance(collector, list)
+    assert len(collector) > 0
+    assert "; comment" in collector
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/conftest.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/conftest.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/conftest.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/conftest.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,26 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from pathlib import Path
+
+import pytest
+
+from src.simple_config_parser.simple_config_parser import SimpleConfigParser
+from tests.utils import load_testdata_from_file
+
+BASE_DIR = Path(__file__).parent.parent.joinpath("assets")
+CONFIG_FILES = ["test_config_1.cfg", "test_config_2.cfg", "test_config_3.cfg"]
+
+
+@pytest.fixture(params=CONFIG_FILES)
+def parser(request):
+    parser = SimpleConfigParser()
+    file_path = BASE_DIR.joinpath(request.param)
+    for line in load_testdata_from_file(file_path):
+        parser._parse_line(line)  # noqa
+
+    return parser
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_options_api.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_options_api.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_options_api.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_options_api.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,178 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+import pytest
+
+from src.simple_config_parser.simple_config_parser import (
+    NoOptionError,
+    NoSectionError,
+)
+
+
+def test_get_options(parser):
+    expected_options = {
+        "section_1": {"option_1"},
+        "section_2": {"option_2"},
+        "section_3": {"option_3"},
+        "section_4": {"option_4"},
+        "section number 5": {"option_5", "multi_option", "option_5_1"},
+    }
+
+    for section, options in expected_options.items():
+        assert options.issubset(
+            parser.get_options(section)
+        ), f"Expected options: {options} in section: {section}, got: {parser.get_options(section)}"
+        assert "_raw" not in parser.get_options(section)
+        assert all(
+            not option.startswith("#_") for option in parser.get_options(section)
+        )
+
+
+def test_has_option(parser):
+    assert parser.has_option("section_1", "option_1") is True
+    assert parser.has_option("section_1", "option_128") is False
+    # section does not exist:
+    assert parser.has_option("section_128", "option_1") is False
+
+
+def test_getval(parser):
+    # test regular option values
+    assert parser.getval("section_1", "option_1") == "value_1"
+    assert parser.getval("section_3", "option_3") == "value_3"
+    assert parser.getval("section_4", "option_4") == "value_4"
+    assert parser.getval("section number 5", "option_5") == "this.is.value-5"
+    assert parser.getval("section number 5", "option_5_1") == "value_5_1"
+    assert parser.getval("section_2", "option_2") == "value_2"
+
+    # test multiline option values
+    ml_val = parser.getval("section number 5", "multi_option")
+    assert isinstance(ml_val, list)
+    assert len(ml_val) > 0
+
+
+def test_getval_fallback(parser):
+    assert parser.getval("section_1", "option_128", "fallback") == "fallback"
+    assert parser.getval("section_1", "option_128", None) is None
+
+
+def test_getval_exceptions(parser):
+    with pytest.raises(NoSectionError):
+        parser.getval("section_128", "option_1")
+
+    with pytest.raises(NoOptionError):
+        parser.getval("section_1", "option_128")
+
+
+def test_getint(parser):
+    value = parser.getint("section_1", "option_1_2")
+    assert isinstance(value, int)
+
+
+def test_getint_from_val(parser):
+    with pytest.raises(ValueError):
+        parser.getint("section_1", "option_1")
+
+
+def test_getint_from_float(parser):
+    with pytest.raises(ValueError):
+        parser.getint("section_1", "option_1_3")
+
+
+def test_getint_from_boolean(parser):
+    with pytest.raises(ValueError):
+        parser.getint("section_1", "option_1_1")
+
+
+def test_getint_fallback(parser):
+    assert parser.getint("section_1", "option_128", 128) == 128
+    assert parser.getint("section_1", "option_128", None) is None
+
+
+def test_getboolean(parser):
+    value = parser.getboolean("section_1", "option_1_1")
+    assert isinstance(value, bool)
+    assert value is True or value is False
+
+
+def test_getboolean_from_val(parser):
+    with pytest.raises(ValueError):
+        parser.getboolean("section_1", "option_1")
+
+
+def test_getboolean_from_int(parser):
+    with pytest.raises(ValueError):
+        parser.getboolean("section_1", "option_1_2")
+
+
+def test_getboolean_from_float(parser):
+    with pytest.raises(ValueError):
+        parser.getboolean("section_1", "option_1_3")
+
+
+def test_getboolean_fallback(parser):
+    assert parser.getboolean("section_1", "option_128", True) is True
+    assert parser.getboolean("section_1", "option_128", False) is False
+    assert parser.getboolean("section_1", "option_128", None) is None
+
+
+def test_getfloat(parser):
+    value = parser.getfloat("section_1", "option_1_3")
+    assert isinstance(value, float)
+
+
+def test_getfloat_from_val(parser):
+    with pytest.raises(ValueError):
+        parser.getfloat("section_1", "option_1")
+
+
+def test_getfloat_from_int(parser):
+    value = parser.getfloat("section_1", "option_1_2")
+    assert isinstance(value, float)
+
+
+def test_getfloat_from_boolean(parser):
+    with pytest.raises(ValueError):
+        parser.getfloat("section_1", "option_1_1")
+
+
+def test_getfloat_fallback(parser):
+    assert parser.getfloat("section_1", "option_128", 1.234) == 1.234
+    assert parser.getfloat("section_1", "option_128", None) is None
+
+
+def test_set_existing_option(parser):
+    parser.set_option("section_1", "new_option", "new_value")
+    assert parser.getval("section_1", "new_option") == "new_value"
+    assert parser.config["section_1"]["new_option"]["_raw"] == "new_option: new_value\n"
+
+    parser.set_option("section_1", "new_option", "new_value_2")
+    assert parser.getval("section_1", "new_option") == "new_value_2"
+    assert (
+        parser.config["section_1"]["new_option"]["_raw"] == "new_option: new_value_2\n"
+    )
+
+
+def test_set_new_option(parser):
+    parser.set_option("new_section", "very_new_option", "very_new_value")
+    assert (
+        parser.has_section("new_section") is True
+    ), f"Expected 'new_section' in {parser.get_sections()}"
+    assert parser.getval("new_section", "very_new_option") == "very_new_value"
+
+    parser.set_option("section_2", "array_option", ["value_1", "value_2", "value_3"])
+    assert parser.getval("section_2", "array_option") == [
+        "value_1",
+        "value_2",
+        "value_3",
+    ]
+    assert parser.config["section_2"]["array_option"]["_raw"] == "array_option:\n"
+
+
+def test_remove_option(parser):
+    parser.remove_option("section_1", "option_1")
+    assert parser.has_option("section_1", "option_1") is False
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_read_file.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_read_file.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_read_file.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_read_file.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,22 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from pathlib import Path
+
+from src.simple_config_parser.simple_config_parser import (
+    SimpleConfigParser,
+)
+
+BASE_DIR = Path(__file__).parent.parent.joinpath("assets")
+TEST_DATA_PATH = BASE_DIR.joinpath("test_config_1.cfg")
+
+
+def test_read_file():
+    parser = SimpleConfigParser()
+    parser.read_file(TEST_DATA_PATH)
+    assert parser.config is not None
+    assert parser.config.keys() is not None
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_sections_api.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_sections_api.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_sections_api.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_sections_api.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,66 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+import pytest
+
+from src.simple_config_parser.simple_config_parser import (
+    DuplicateSectionError,
+)
+
+
+def test_get_sections(parser):
+    expected_keys = {
+        "section_1",
+        "section_2",
+        "section_3",
+        "section_4",
+        "section number 5",
+    }
+    assert expected_keys.issubset(
+        parser.get_sections()
+    ), f"Expected keys: {expected_keys}, got: {parser.get_sections()}"
+
+
+def test_has_section(parser):
+    assert parser.has_section("section_1") is True
+    assert parser.has_section("not_available") is False
+
+
+def test_add_section(parser):
+    pre_add_count = len(parser.get_sections())
+    parser.add_section("new_section")
+    parser.add_section("new_section2")
+    assert parser.has_section("new_section") is True
+    assert parser.has_section("new_section2") is True
+    assert len(parser.get_sections()) == pre_add_count + 2
+
+    new_section = parser.config["new_section"]
+    assert isinstance(new_section, dict)
+    assert new_section["_raw"] == "[new_section]\n"
+
+    # this should be the collector, added by the parser before
+    # then second section was added
+    assert list(new_section.keys())[-1].startswith("#_")
+    assert "\n" in new_section[list(new_section.keys())[-1]]
+
+    new_section2 = parser.config["new_section2"]
+    assert isinstance(new_section2, dict)
+    assert new_section2["_raw"] == "[new_section2]\n"
+
+
+def test_add_section_duplicate(parser):
+    with pytest.raises(DuplicateSectionError):
+        parser.add_section("section_1")
+
+
+def test_remove_section(parser):
+    pre_remove_count = len(parser.get_sections())
+    parser.remove_section("section_1")
+    assert parser.has_section("section_1") is False
+    assert len(parser.get_sections()) == pre_remove_count - 1
+    assert "section_1" not in parser.config
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_write_file.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_write_file.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_write_file.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/public_api/test_write_file.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,41 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from pathlib import Path
+
+import pytest
+
+from src.simple_config_parser.simple_config_parser import (
+    SimpleConfigParser,
+)
+
+BASE_DIR = Path(__file__).parent.parent.joinpath("assets")
+TEST_DATA_PATH = BASE_DIR.joinpath("test_config_1.cfg")
+# TEST_DATA_PATH_2 = BASE_DIR.joinpath("test_config_1_write.cfg")
+
+
+def test_write_file_exception():
+    parser = SimpleConfigParser()
+    with pytest.raises(ValueError):
+        parser.write_file(None)  # noqa
+
+
+def test_write_to_file(tmp_path):
+    tmp_file = Path(tmp_path).joinpath("tmp_config.cfg")
+    parser1 = SimpleConfigParser()
+    parser1.read_file(TEST_DATA_PATH)
+    # parser1.write_file(TEST_DATA_PATH_2)
+    parser1.write_file(tmp_file)
+
+    parser2 = SimpleConfigParser()
+    parser2.read_file(tmp_file)
+
+    assert tmp_file.exists()
+    assert parser2.config is not None
+
+    with open(TEST_DATA_PATH, "r") as original, open(tmp_file, "r") as written:
+        assert original.read() == written.read()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/utils.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/utils.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/utils.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/utils.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,15 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from pathlib import Path
+
+
+def load_testdata_from_file(file_path: Path):
+    """Helper function to load test data from a text file"""
+
+    with open(file_path, "r") as f:
+        return [line.replace("\n", "") for line in f]
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/value_conversion/test_get_conv.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/value_conversion/test_get_conv.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/submodules/simple_config_parser/tests/value_conversion/test_get_conv.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/submodules/simple_config_parser/tests/value_conversion/test_get_conv.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,89 @@
+# ======================================================================= #
+#  Copyright (C) 2024 Dominik Willner <th33xitus@gmail.com>               #
+#                                                                         #
+#  https://github.com/dw-0/simple-config-parser                           #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from pathlib import Path
+
+import pytest
+
+from src.simple_config_parser.simple_config_parser import SimpleConfigParser
+from tests.utils import load_testdata_from_file
+
+BASE_DIR = Path(__file__).parent.parent.joinpath("assets")
+TEST_DATA_PATH = BASE_DIR.joinpath("test_config_1.cfg")
+
+
+@pytest.fixture
+def parser():
+    parser = SimpleConfigParser()
+    for line in load_testdata_from_file(TEST_DATA_PATH):
+        parser._parse_line(line)  # noqa
+
+    return parser
+
+
+def test_get_int_conv(parser):
+    should_be_int = parser._get_conv("section_1", "option_1_2", int)
+    assert isinstance(should_be_int, int)
+
+
+def test_get_float_conv(parser):
+    should_be_float = parser._get_conv("section_1", "option_1_3", float)
+    assert isinstance(should_be_float, float)
+
+
+def test_get_bool_conv(parser):
+    should_be_bool = parser._get_conv(
+        "section_1", "option_1_1", parser._convert_to_boolean
+    )
+    assert isinstance(should_be_bool, bool)
+
+
+def test_get_int_conv_fallback(parser):
+    should_be_fallback_int = parser._get_conv(
+        "section_1", "option_128", int, fallback=128
+    )
+    assert isinstance(should_be_fallback_int, int)
+    assert should_be_fallback_int == 128
+    assert parser._get_conv("section_1", "option_128", int, None) is None
+
+
+def test_get_float_conv_fallback(parser):
+    should_be_fallback_float = parser._get_conv(
+        "section_1", "option_128", float, fallback=1.234
+    )
+    assert isinstance(should_be_fallback_float, float)
+    assert should_be_fallback_float == 1.234
+
+    assert parser._get_conv("section_1", "option_128", float, None) is None
+
+
+def test_get_bool_conv_fallback(parser):
+    should_be_fallback_bool = parser._get_conv(
+        "section_1", "option_128", parser._convert_to_boolean, fallback=True
+    )
+    assert isinstance(should_be_fallback_bool, bool)
+    assert should_be_fallback_bool is True
+
+    assert (
+        parser._get_conv("section_1", "option_128", parser._convert_to_boolean, None)
+        is None
+    )
+
+
+def test_get_int_conv_exception(parser):
+    with pytest.raises(ValueError):
+        parser._get_conv("section_1", "option_1", int)
+
+
+def test_get_float_conv_exception(parser):
+    with pytest.raises(ValueError):
+        parser._get_conv("section_1", "option_1", float)
+
+
+def test_get_bool_conv_exception(parser):
+    with pytest.raises(ValueError):
+        parser._get_conv("section_1", "option_1", parser._convert_to_boolean)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/types.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/types.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/core/types.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/core/types.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,30 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from dataclasses import dataclass
+from typing import Dict, Literal
+
+StatusText = Literal["Installed", "Not installed", "Incomplete"]
+StatusCode = Literal[0, 1, 2]
+StatusMap: Dict[StatusCode, StatusText] = {
+    0: "Not installed",
+    1: "Incomplete",
+    2: "Installed",
+}
+
+
+@dataclass
+class ComponentStatus:
+    status: StatusCode
+    owner: str | None = None
+    repo: str | None = None
+    local: str | None = None
+    remote: str | None = None
+    instances: int | None = None
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/base_extension.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/base_extension.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/base_extension.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/base_extension.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,29 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from abc import ABC, abstractmethod
+from typing import Dict
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class BaseExtension(ABC):
+    def __init__(self, metadata: Dict[str, str]):
+        self.metadata = metadata
+
+    @abstractmethod
+    def install_extension(self, **kwargs) -> None:
+        raise NotImplementedError
+
+    def update_extension(self, **kwargs) -> None:
+        raise NotImplementedError
+
+    @abstractmethod
+    def remove_extension(self, **kwargs) -> None:
+        raise NotImplementedError
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/extensions_menu.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/extensions_menu.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/extensions_menu.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/extensions_menu.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,162 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import importlib
+import inspect
+import json
+import textwrap
+from pathlib import Path
+from typing import Dict, List, Type
+
+from core.constants import COLOR_CYAN, COLOR_YELLOW, RESET_FORMAT
+from core.logger import Logger
+from core.menus import Option
+from core.menus.base_menu import BaseMenu
+from extensions import EXTENSION_ROOT
+from extensions.base_extension import BaseExtension
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class ExtensionsMenu(BaseMenu):
+    def __init__(self, previous_menu: Type[BaseMenu] | None = None):
+        super().__init__()
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+        self.extensions: Dict[str, BaseExtension] = self.discover_extensions()
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from core.menus.main_menu import MainMenu
+
+        self.previous_menu = previous_menu if previous_menu is not None else MainMenu
+
+    def set_options(self) -> None:
+        self.options = {
+            i: Option(self.extension_submenu, opt_data=self.extensions.get(i))
+            for i in self.extensions
+        }
+
+    def discover_extensions(self) -> Dict[str, BaseExtension]:
+        ext_dict = {}
+
+        for ext in EXTENSION_ROOT.iterdir():
+            metadata_json = Path(ext).joinpath("metadata.json")
+            if not metadata_json.exists():
+                continue
+
+            try:
+                with open(metadata_json, "r") as m:
+                    # read extension metadata from json
+                    metadata = json.load(m).get("metadata")
+                    module_name = metadata.get("module")
+                    module_path = f"kiauh.extensions.{ext.name}.{module_name}"
+
+                    # get the class name of the extension
+                    ext_class: Type[BaseExtension] = inspect.getmembers(
+                        importlib.import_module(module_path),
+                        predicate=lambda o: inspect.isclass(o)
+                        and issubclass(o, BaseExtension)
+                        and o != BaseExtension,
+                    )[0][1]
+
+                    # instantiate the extension with its metadata and add to dict
+                    ext_instance: BaseExtension = ext_class(metadata)
+                    ext_dict[f"{metadata.get('index')}"] = ext_instance
+
+            except (IOError, json.JSONDecodeError, ImportError) as e:
+                print(f"Failed loading extension {ext}: {e}")
+
+        return dict(sorted(ext_dict.items()))
+
+    def extension_submenu(self, **kwargs):
+        ExtensionSubmenu(kwargs.get("opt_data"), self.__class__).run()
+
+    def print_menu(self) -> None:
+        header = " [ Extensions Menu ] "
+        color = COLOR_CYAN
+        line1 = f"{COLOR_YELLOW}Available Extensions:{RESET_FORMAT}"
+        count = 62 - len(color) - len(RESET_FORMAT)
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ {line1:<62} ║
+            ║                                                       ║
+            """
+        )[1:]
+        print(menu, end="")
+
+        for extension in self.extensions.values():
+            index = extension.metadata.get("index")
+            name = extension.metadata.get("display_name")
+            row = f"{index}) {name}"
+            print(f"║ {row:<53} ║")
+        print("╟───────────────────────────────────────────────────────╢")
+
+
+# noinspection PyUnusedLocal
+# noinspection PyMethodMayBeStatic
+class ExtensionSubmenu(BaseMenu):
+    def __init__(
+        self, extension: BaseExtension, previous_menu: Type[BaseMenu] | None = None
+    ):
+        super().__init__()
+        self.extension = extension
+        self.previous_menu: Type[BaseMenu] | None = previous_menu
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        self.previous_menu = (
+            previous_menu if previous_menu is not None else ExtensionsMenu
+        )
+
+    def set_options(self) -> None:
+        self.options["1"] = Option(self.extension.install_extension)
+        if self.extension.metadata.get("updates"):
+            self.options["2"] = Option(self.extension.update_extension)
+            self.options["3"] = Option(self.extension.remove_extension)
+        else:
+            self.options["2"] = Option(self.extension.remove_extension)
+
+    def print_menu(self) -> None:
+        header = f" [ {self.extension.metadata.get('display_name')} ] "
+        color = COLOR_YELLOW
+        count = 62 - len(color) - len(RESET_FORMAT)
+        line_width = 53
+        description: List[str] = self.extension.metadata.get("description", [])
+        description_text = Logger.format_content(
+            description,
+            line_width,
+            border_left="║",
+            border_right="║",
+        )
+
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            """
+        )[1:]
+        menu += f"{description_text}\n"
+        menu += textwrap.dedent(
+            """
+            ╟───────────────────────────────────────────────────────╢
+            ║ 1) Install                                            ║
+            """
+        )[1:]
+
+        if self.extension.metadata.get("updates"):
+            menu += "║ 2) Update                                             ║\n"
+            menu += "║ 3) Remove                                             ║\n"
+        else:
+            menu += "║ 2) Remove                                             ║\n"
+        menu += "╟───────────────────────────────────────────────────────╢\n"
+
+        print(menu, end="")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/gcode_shell_cmd/assets/gcode_shell_command.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/gcode_shell_cmd/assets/gcode_shell_command.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/gcode_shell_cmd/assets/gcode_shell_command.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/gcode_shell_cmd/assets/gcode_shell_command.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,94 @@
+# Run a shell command via gcode
+#
+# Copyright (C) 2019  Eric Callahan <arksine.code@gmail.com>
+#
+# This file may be distributed under the terms of the GNU GPLv3 license.
+import logging
+import os
+import shlex
+import subprocess
+
+
+class ShellCommand:
+    def __init__(self, config):
+        self.name = config.get_name().split()[-1]
+        self.printer = config.get_printer()
+        self.gcode = self.printer.lookup_object("gcode")
+        cmd = config.get("command")
+        cmd = os.path.expanduser(cmd)
+        self.command = shlex.split(cmd)
+        self.timeout = config.getfloat("timeout", 2.0, above=0.0)
+        self.verbose = config.getboolean("verbose", True)
+        self.proc_fd = None
+        self.partial_output = ""
+        self.gcode.register_mux_command(
+            "RUN_SHELL_COMMAND",
+            "CMD",
+            self.name,
+            self.cmd_RUN_SHELL_COMMAND,
+            desc=self.cmd_RUN_SHELL_COMMAND_help,
+        )
+
+    def _process_output(self, eventime):
+        if self.proc_fd is None:
+            return
+        try:
+            data = os.read(self.proc_fd, 4096)
+        except Exception:
+            pass
+        data = self.partial_output + data.decode()
+        if "\n" not in data:
+            self.partial_output = data
+            return
+        elif data[-1] != "\n":
+            split = data.rfind("\n") + 1
+            self.partial_output = data[split:]
+            data = data[:split]
+        else:
+            self.partial_output = ""
+        self.gcode.respond_info(data)
+
+    cmd_RUN_SHELL_COMMAND_help = "Run a linux shell command"
+
+    def cmd_RUN_SHELL_COMMAND(self, params):
+        gcode_params = params.get("PARAMS", "")
+        gcode_params = shlex.split(gcode_params)
+        reactor = self.printer.get_reactor()
+        try:
+            proc = subprocess.Popen(
+                self.command + gcode_params,
+                stdout=subprocess.PIPE,
+                stderr=subprocess.STDOUT,
+            )
+        except Exception:
+            logging.exception("shell_command: Command {%s} failed" % (self.name))
+            raise self.gcode.error("Error running command {%s}" % (self.name))
+        if self.verbose:
+            self.proc_fd = proc.stdout.fileno()
+            self.gcode.respond_info("Running Command {%s}...:" % (self.name))
+            hdl = reactor.register_fd(self.proc_fd, self._process_output)
+        eventtime = reactor.monotonic()
+        endtime = eventtime + self.timeout
+        complete = False
+        while eventtime < endtime:
+            eventtime = reactor.pause(eventtime + 0.05)
+            if proc.poll() is not None:
+                complete = True
+                break
+        if not complete:
+            proc.terminate()
+        if self.verbose:
+            if self.partial_output:
+                self.gcode.respond_info(self.partial_output)
+                self.partial_output = ""
+            if complete:
+                msg = "Command {%s} finished\n" % (self.name)
+            else:
+                msg = "Command {%s} timed out" % (self.name)
+            self.gcode.respond_info(msg)
+            reactor.unregister_fd(hdl)
+            self.proc_fd = None
+
+
+def load_config_prefix(config):
+    return ShellCommand(config)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/gcode_shell_cmd/assets/shell_command.cfg /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/gcode_shell_cmd/assets/shell_command.cfg
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/gcode_shell_cmd/assets/shell_command.cfg	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/gcode_shell_cmd/assets/shell_command.cfg	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,7 @@
+[gcode_shell_command hello_world]
+command: echo hello world
+timeout: 2.
+verbose: True
+[gcode_macro HELLO_WORLD]
+gcode:
+    RUN_SHELL_COMMAND CMD=hello_world
\ No newline at end of file
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/gcode_shell_cmd/gcode_shell_cmd_extension.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/gcode_shell_cmd/gcode_shell_cmd_extension.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/gcode_shell_cmd/gcode_shell_cmd_extension.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/gcode_shell_cmd/gcode_shell_cmd_extension.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,131 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+import os
+import shutil
+from typing import List
+
+from components.klipper.klipper import Klipper
+from core.backup_manager.backup_manager import BackupManager
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import Logger
+from core.submodules.simple_config_parser.src.simple_config_parser.simple_config_parser import (
+    SimpleConfigParser,
+)
+from extensions.base_extension import BaseExtension
+from extensions.gcode_shell_cmd import (
+    EXAMPLE_CFG_SRC,
+    EXTENSION_SRC,
+    EXTENSION_TARGET_PATH,
+    KLIPPER_DIR,
+    KLIPPER_EXTRAS,
+)
+from utils.fs_utils import check_file_exist
+from utils.input_utils import get_confirm
+from utils.instance_utils import get_instances
+
+
+# noinspection PyMethodMayBeStatic
+class GcodeShellCmdExtension(BaseExtension):
+    def install_extension(self, **kwargs) -> None:
+        install_example = get_confirm("Create an example shell command?", False, False)
+
+        klipper_dir_exists = check_file_exist(KLIPPER_DIR)
+        if not klipper_dir_exists:
+            Logger.print_warn(
+                "No Klipper directory found! Unable to install extension."
+            )
+            return
+
+        extension_installed = check_file_exist(EXTENSION_TARGET_PATH)
+        overwrite = True
+        if extension_installed:
+            overwrite = get_confirm(
+                "Extension seems to be installed already. Overwrite?",
+                True,
+                False,
+            )
+
+        if not overwrite:
+            Logger.print_warn("Installation aborted due to user request.")
+            return
+
+        instances = get_instances(Klipper)
+        InstanceManager.stop_all(instances)
+
+        try:
+            Logger.print_status(f"Copy extension to '{KLIPPER_EXTRAS}' ...")
+            shutil.copy(EXTENSION_SRC, EXTENSION_TARGET_PATH)
+        except OSError as e:
+            Logger.print_error(f"Unable to install extension: {e}")
+            return
+
+        if install_example:
+            self.install_example_cfg(instances)
+
+        InstanceManager.start_all(instances)
+
+        Logger.print_ok("Installing G-Code Shell Command extension successful!")
+
+    def remove_extension(self, **kwargs) -> None:
+        extension_installed = check_file_exist(EXTENSION_TARGET_PATH)
+        if not extension_installed:
+            Logger.print_info("Extension does not seem to be installed! Skipping ...")
+            return
+
+        question = "Do you really want to remove the extension?"
+        if get_confirm(question, True, False):
+            try:
+                Logger.print_status(f"Removing '{EXTENSION_TARGET_PATH}' ...")
+                os.remove(EXTENSION_TARGET_PATH)
+                Logger.print_ok("Extension successfully removed!")
+            except OSError as e:
+                Logger.print_error(f"Unable to remove extension: {e}")
+
+            Logger.print_warn("PLEASE NOTE:")
+            Logger.print_warn(
+                "Remaining gcode shell command will cause Klipper to throw an error."
+            )
+            Logger.print_warn("Make sure to remove them from the printer.cfg!")
+
+    def install_example_cfg(self, instances: List[Klipper]):
+        cfg_dirs = [instance.base.cfg_dir for instance in instances]
+        # copy extension to klippy/extras
+        for cfg_dir in cfg_dirs:
+            Logger.print_status(f"Create shell_command.cfg in '{cfg_dir}' ...")
+            if check_file_exist(cfg_dir.joinpath("shell_command.cfg")):
+                Logger.print_info("File already exists! Skipping ...")
+                continue
+            try:
+                shutil.copy(EXAMPLE_CFG_SRC, cfg_dir)
+                Logger.print_ok("Done!")
+            except OSError as e:
+                Logger.warn(f"Unable to create example config: {e}")
+
+        # backup each printer.cfg before modification
+        bm = BackupManager()
+        for instance in instances:
+            bm.backup_file(
+                instance.cfg_file,
+                custom_filename=f"{instance.suffix}.printer.cfg",
+            )
+
+        # add section to printer.cfg if not already defined
+        section = "include shell_command.cfg"
+        cfg_files = [instance.cfg_file for instance in instances]
+        for cfg_file in cfg_files:
+            Logger.print_status(f"Include shell_command.cfg in '{cfg_file}' ...")
+            scp = SimpleConfigParser()
+            scp.read_file(cfg_file)
+            if scp.has_section(section):
+                Logger.print_info("Section already defined! Skipping ...")
+                continue
+            scp.add_section(section)
+            scp.write_file(cfg_file)
+            Logger.print_ok("Done!")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/gcode_shell_cmd/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/gcode_shell_cmd/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/gcode_shell_cmd/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/gcode_shell_cmd/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,19 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+EXT_MODULE_NAME = "gcode_shell_command.py"
+MODULE_PATH = Path(__file__).resolve().parent
+MODULE_ASSETS = MODULE_PATH.joinpath("assets")
+KLIPPER_DIR = Path.home().joinpath("klipper")
+KLIPPER_EXTRAS = KLIPPER_DIR.joinpath("klippy/extras")
+EXTENSION_SRC = MODULE_ASSETS.joinpath(EXT_MODULE_NAME)
+EXTENSION_TARGET_PATH = KLIPPER_EXTRAS.joinpath(EXT_MODULE_NAME)
+EXAMPLE_CFG_SRC = MODULE_ASSETS.joinpath("shell_command.cfg")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/gcode_shell_cmd/metadata.json /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/gcode_shell_cmd/metadata.json
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/gcode_shell_cmd/metadata.json	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/gcode_shell_cmd/metadata.json	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,9 @@
+{
+  "metadata": {
+    "index": 1,
+    "module": "gcode_shell_cmd_extension",
+    "maintained_by": "dw-0",
+    "display_name": "G-Code Shell Command",
+    "description": ["Run a shell commands from gcode."]
+  }
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,12 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+EXTENSION_ROOT = Path(__file__).resolve().parents[1].joinpath("extensions")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/klipper_backup/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/klipper_backup/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/klipper_backup/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/klipper_backup/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,19 @@
+# ======================================================================= #
+#  Copyright (C) 2023 - 2024 Staubgeborener and Tylerjet                  #
+#  https://github.com/Staubgeborener/klipper-backup                       #
+#  https://klipperbackup.xyz                                              #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+EXT_MODULE_NAME = "klipper_backup_extension.py"
+MODULE_PATH = Path(__file__).resolve().parent
+MOONRAKER_CONF = Path.home().joinpath("printer_data", "config", "moonraker.conf")
+KLIPPERBACKUP_DIR = Path.home().joinpath("klipper-backup")
+KLIPPERBACKUP_CONFIG_DIR = Path.home().joinpath("config_backup")
+KLIPPERBACKUP_REPO_URL = "https://github.com/staubgeborener/klipper-backup"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/klipper_backup/klipper_backup_extension.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/klipper_backup/klipper_backup_extension.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/klipper_backup/klipper_backup_extension.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/klipper_backup/klipper_backup_extension.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,127 @@
+# ======================================================================= #
+#  Copyright (C) 2023 - 2024 Staubgeborener and Tylerjet                  #
+#  https://github.com/Staubgeborener/klipper-backup                       #
+#  https://klipperbackup.xyz                                              #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+import os
+import shutil
+import subprocess
+from core.constants import SYSTEMD
+from core.logger import Logger
+from pathlib import Path
+from extensions.base_extension import BaseExtension
+from extensions.klipper_backup import (
+    KLIPPERBACKUP_CONFIG_DIR,
+    KLIPPERBACKUP_DIR,
+    KLIPPERBACKUP_REPO_URL,
+    MOONRAKER_CONF,
+)
+from utils.fs_utils import check_file_exist, remove_with_sudo
+from utils.git_utils import git_cmd_clone
+from utils.input_utils import get_confirm
+from utils.sys_utils import cmd_sysctl_manage, remove_system_service, unit_file_exists
+
+
+class KlipperbackupExtension(BaseExtension):
+
+    def remove_extension(self, **kwargs) -> None:
+        if not check_file_exist(KLIPPERBACKUP_DIR):
+            Logger.print_info("Extension does not seem to be installed! Skipping ...")
+            return
+
+        def uninstall_service(service_name: str, unit_type: str) -> bool:
+            try:
+                full_service_name = f"{service_name}.{unit_type}"
+                if unit_type == "service":
+                    remove_system_service(full_service_name)
+                elif unit_type == "timer":
+                    full_service_path: Path = SYSTEMD.joinpath(full_service_name)
+                    Logger.print_status(f"Removing {full_service_name} ...")
+                    remove_with_sudo(full_service_path)
+                    Logger.print_ok(f"{service_name}.{unit_type} successfully removed!")
+                    cmd_sysctl_manage("daemon-reload")
+                    cmd_sysctl_manage("reset-failed")
+                else:
+                    Logger.print_error(f"Unknown unit type {unit_type} of {full_service_name}")
+            except:
+                Logger.print_error(f"Failed to remove {full_service_name}: {str(e)}")
+
+        def check_crontab_entry(entry) -> bool:
+            try:
+                crontab_content = subprocess.check_output(["crontab", "-l"], stderr=subprocess.DEVNULL, text=True)
+            except subprocess.CalledProcessError:
+                return False
+            return any(entry in line for line in crontab_content.splitlines())
+
+        def remove_moonraker_entry():
+            original_file_path = MOONRAKER_CONF
+            comparison_file_path = os.path.join(str(KLIPPERBACKUP_DIR), "install-files", "moonraker.conf")
+            if not (os.path.exists(original_file_path) and os.path.exists(comparison_file_path)):
+                return False
+            with open(original_file_path, "r") as original_file, open(comparison_file_path, "r") as comparison_file:
+                original_content = original_file.read()
+                comparison_content = comparison_file.read()
+            if comparison_content in original_content:
+                Logger.print_status("Removing Klipper-Backup moonraker entry ...")
+                modified_content = original_content.replace(comparison_content, "").strip()
+                modified_content = "\n".join(line for line in modified_content.split("\n") if line.strip())
+                with open(original_file_path, "w") as original_file:
+                    original_file.write(modified_content)
+                Logger.print_ok("Klipper-Backup moonraker entry successfully removed!")
+                return True
+            return False
+
+        if get_confirm("Do you really want to remove the extension?", True, False):
+            # Remove systemd timer and services
+            service_names = ["klipper-backup-on-boot", "klipper-backup-filewatch", "klipper-backup"]
+            unit_types = ["timer", "service"]
+
+            for service_name in service_names:
+                for unit_type in unit_types:
+                    if unit_file_exists(service_name, unit_type):
+                        uninstall_service(service_name, unit_type)
+
+            # Remnove crontab entry
+            try:
+                if check_crontab_entry("/klipper-backup/script.sh"):
+                    Logger.print_status("Removing Klipper-Backup crontab entry ...")
+                    crontab_content = subprocess.check_output(["crontab", "-l"], text=True)
+                    modified_content = "\n".join(line for line in crontab_content.splitlines() if "/klipper-backup/script.sh" not in line)
+                    subprocess.run(["crontab", "-"], input=modified_content + "\n", text=True, check=True)
+                    Logger.print_ok("Klipper-Backup crontab entry successfully removed!")
+            except subprocess.CalledProcessError:
+                Logger.print_error("Unable to remove the Klipper-Backup cron entry")
+
+            # Remove moonraker entry
+            try:
+                remove_moonraker_entry()
+            except:
+                Logger.print_error("Unable to remove the Klipper-Backup moonraker entry")
+
+            # Remove Klipper-backup extension
+            Logger.print_status("Removing Klipper-Backup extension ...")
+            try:
+                remove_with_sudo(KLIPPERBACKUP_DIR)
+                if check_file_exist(KLIPPERBACKUP_CONFIG_DIR):
+                    remove_with_sudo(KLIPPERBACKUP_CONFIG_DIR)
+                Logger.print_ok("Extension Klipper-Backup successfully removed!")
+            except:
+                Logger.print_error(f"Unable to remove Klipper-Backup extension")
+
+    def install_extension(self, **kwargs) -> None:
+        if not KLIPPERBACKUP_DIR.exists():
+            git_cmd_clone(KLIPPERBACKUP_REPO_URL, KLIPPERBACKUP_DIR)
+            subprocess.run(["chmod", "+x", str(KLIPPERBACKUP_DIR / "install.sh")])
+        subprocess.run([str(KLIPPERBACKUP_DIR / "install.sh")])
+
+    def update_extension(self, **kwargs) -> None:
+        if not check_file_exist(KLIPPERBACKUP_DIR):
+            Logger.print_info("Extension does not seem to be installed! Skipping ...")
+            return
+        subprocess.run([str(KLIPPERBACKUP_DIR / "install.sh"), "check_updates"])
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/klipper_backup/metadata.json /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/klipper_backup/metadata.json
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/klipper_backup/metadata.json	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/klipper_backup/metadata.json	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,10 @@
+{
+  "metadata": {
+    "index": 4,
+    "module": "klipper_backup_extension",
+    "maintained_by": "Staubgeborener",
+    "display_name": "Klipper-Backup",
+    "description": ["Backup all your Klipper files to GitHub"],
+    "updates": true
+  }
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/mainsail_theme_installer/mainsail_theme_installer_extension.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/mainsail_theme_installer/mainsail_theme_installer_extension.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/mainsail_theme_installer/mainsail_theme_installer_extension.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/mainsail_theme_installer/mainsail_theme_installer_extension.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,189 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import csv
+import shutil
+import textwrap
+import urllib.request
+from dataclasses import dataclass
+from typing import Any, Dict, List, Type
+
+from components.klipper.klipper import Klipper
+from components.klipper.klipper_dialogs import (
+    DisplayType,
+    print_instance_overview,
+)
+from core.constants import COLOR_CYAN, COLOR_YELLOW, RESET_FORMAT
+from core.logger import Logger
+from core.menus import Option
+from core.menus.base_menu import BaseMenu
+from extensions.base_extension import BaseExtension
+from utils.git_utils import git_clone_wrapper
+from utils.input_utils import get_selection_input
+from utils.instance_type import InstanceType
+from utils.instance_utils import get_instances
+
+
+@dataclass
+class ThemeData:
+    name: str
+    short_note: str
+    author: str
+    repo: str
+
+
+# noinspection PyMethodMayBeStatic
+class MainsailThemeInstallerExtension(BaseExtension):
+    instances: List[Klipper] = get_instances(Klipper)
+
+    def install_extension(self, **kwargs) -> None:
+        MainsailThemeInstallMenu(self.instances).run()
+
+    def remove_extension(self, **kwargs) -> None:
+        print_instance_overview(
+            self.instances,
+            display_type=DisplayType.PRINTER_NAME,
+            show_headline=True,
+            show_index=True,
+            show_select_all=True,
+        )
+        printer_list = get_printer_selection(self.instances, True)
+        if printer_list is None:
+            return
+
+        for printer in printer_list:
+            Logger.print_status(f"Uninstalling theme from {printer.base.cfg_dir} ...")
+            theme_dir = printer.base.cfg_dir.joinpath(".theme")
+            if not theme_dir.exists():
+                Logger.print_info(f"{theme_dir} not found. Skipping ...")
+                continue
+            try:
+                shutil.rmtree(theme_dir)
+                Logger.print_ok("Theme successfully uninstalled!")
+            except OSError as e:
+                Logger.print_error("Unable to uninstall theme")
+                Logger.print_error(e)
+
+
+# noinspection PyMethodMayBeStatic
+class MainsailThemeInstallMenu(BaseMenu):
+    THEMES_URL: str = (
+        "https://raw.githubusercontent.com/mainsail-crew/gb-docs/main/_data/themes.csv"
+    )
+
+    def __init__(self, instances: List[Klipper]):
+        super().__init__()
+        self.themes: List[ThemeData] = self.load_themes()
+        self.instances = instances
+
+    def set_previous_menu(self, previous_menu: Type[BaseMenu] | None) -> None:
+        from extensions.extensions_menu import ExtensionsMenu
+
+        self.previous_menu = (
+            previous_menu if previous_menu is not None else ExtensionsMenu
+        )
+
+    def set_options(self) -> None:
+        self.options = {
+            f"{index}": Option(self.install_theme, opt_index=f"{index}")
+            for index in range(len(self.themes))
+        }
+
+    def print_menu(self) -> None:
+        header = " [ Mainsail Theme Installer ] "
+        color = COLOR_YELLOW
+        line1 = f"{COLOR_CYAN}A preview of each Mainsail theme can be found here:{RESET_FORMAT}"
+        count = 62 - len(color) - len(RESET_FORMAT)
+        menu = textwrap.dedent(
+            f"""
+            ╔═══════════════════════════════════════════════════════╗
+            ║ {color}{header:~^{count}}{RESET_FORMAT} ║
+            ╟───────────────────────────────────────────────────────╢
+            ║ {line1:<62} ║
+            ║ https://docs.mainsail.xyz/theming/themes              ║
+            ╟───────────────────────────────────────────────────────╢
+            """
+        )[1:]
+        for i, theme in enumerate(self.themes):
+            j: str = f" {i}" if i < 10 else f"{i}"
+            row: str = f"{j}) [{theme.name}]"
+            menu += f"║ {row:<53} ║\n"
+        menu += "╟───────────────────────────────────────────────────────╢\n"
+        print(menu, end="")
+
+    def load_themes(self) -> List[ThemeData]:
+        with urllib.request.urlopen(self.THEMES_URL) as response:
+            themes: List[ThemeData] = []
+            content: str = response.read().decode()
+            csv_data: List[str] = content.splitlines()
+            fieldnames = ["name", "short_note", "author", "repo"]
+            csv_reader = csv.DictReader(csv_data, fieldnames=fieldnames, delimiter=",")
+            next(csv_reader)  # skip the header of the csv file
+            for row in csv_reader:
+                row: Dict[str, str]  # type: ignore
+                theme: ThemeData = ThemeData(**row)
+                themes.append(theme)
+
+        return themes
+
+    def install_theme(self, **kwargs: Any):
+        opt_index: str | None = kwargs.get("opt_index", None)
+
+        if not opt_index:
+            raise ValueError("No option index provided")
+
+        index: int = int(opt_index)
+        theme_data: ThemeData = self.themes[index]
+        theme_author: str = theme_data.author
+        theme_repo: str = theme_data.repo
+        theme_repo_url: str = f"https://github.com/{theme_author}/{theme_repo}"
+
+        print_instance_overview(
+            self.instances,
+            display_type=DisplayType.PRINTER_NAME,
+            show_headline=True,
+            show_index=True,
+            show_select_all=True,
+        )
+
+        printer_list = get_printer_selection(self.instances, True)
+        if printer_list is None:
+            return
+
+        for printer in printer_list:
+            git_clone_wrapper(theme_repo_url, printer.base.cfg_dir.joinpath(".theme"))
+
+        if len(theme_data.short_note) > 1:
+            Logger.print_warn("Info from the creator:", prefix=False, start="\n")
+            Logger.print_info(theme_data.short_note, prefix=False, end="\n\n")
+
+
+def get_printer_selection(
+    instances: List[InstanceType], is_install: bool
+) -> List[InstanceType] | None:
+    options = [str(i) for i in range(len(instances))]
+    options.extend(["a", "b"])
+
+    if is_install:
+        q = "Select the printer to install the theme for"
+    else:
+        q = "Select the printer to remove the theme from"
+    selection = get_selection_input(q, options)
+
+    install_for = []
+    if selection == "b":
+        return None
+    elif selection == "a":
+        install_for.extend(instances)
+    else:
+        instance = instances[int(selection)]
+        install_for.append(instance)
+
+    return install_for
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/mainsail_theme_installer/metadata.json /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/mainsail_theme_installer/metadata.json
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/mainsail_theme_installer/metadata.json	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/mainsail_theme_installer/metadata.json	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,9 @@
+{
+  "metadata": {
+    "index": 2,
+    "module": "mainsail_theme_installer_extension",
+    "maintained_by": "dw-0",
+    "display_name": "Mainsail Theme Installer",
+    "description": ["Install Mainsail Themes maintained by the Mainsail community."]
+  }
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/mobileraker/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/mobileraker/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/mobileraker/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/mobileraker/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,31 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+from core.backup_manager import BACKUP_ROOT_DIR
+from core.constants import SYSTEMD
+
+# repo
+MOBILERAKER_REPO = "https://github.com/Clon1998/mobileraker_companion.git"
+
+# names
+MOBILERAKER_SERVICE_NAME = "mobileraker.service"
+MOBILERAKER_UPDATER_SECTION_NAME = "update_manager mobileraker"
+MOBILERAKER_LOG_NAME = "mobileraker.log"
+
+# directories
+MOBILERAKER_DIR = Path.home().joinpath("mobileraker_companion")
+MOBILERAKER_ENV_DIR = Path.home().joinpath("mobileraker-env")
+MOBILERAKER_BACKUP_DIR = BACKUP_ROOT_DIR.joinpath("mobileraker-backups")
+
+# files
+MOBILERAKER_INSTALL_SCRIPT = MOBILERAKER_DIR.joinpath("scripts/install.sh")
+MOBILERAKER_REQ_FILE = MOBILERAKER_DIR.joinpath("scripts/mobileraker-requirements.txt")
+MOBILERAKER_SERVICE_FILE = SYSTEMD.joinpath(MOBILERAKER_SERVICE_NAME)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/mobileraker/metadata.json /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/mobileraker/metadata.json
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/mobileraker/metadata.json	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/mobileraker/metadata.json	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,12 @@
+{
+    "metadata": {
+        "index": 3,
+        "module": "mobileraker_extension",
+        "maintained_by": "Clon1998",
+        "display_name": "Mobileraker",
+        "description": [
+            "Companion for Mobileraker, enabling push notification for Klipper using Moonraker."
+        ],
+        "updates": true
+    }
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/mobileraker/mobileraker_extension.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/mobileraker/mobileraker_extension.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/mobileraker/mobileraker_extension.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/mobileraker/mobileraker_extension.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,192 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+import shutil
+from pathlib import Path
+from subprocess import CalledProcessError, run
+from typing import List
+
+from components.klipper.klipper import Klipper
+from components.moonraker.moonraker import Moonraker
+from core.backup_manager.backup_manager import BackupManager
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import DialogType, Logger
+from core.settings.kiauh_settings import KiauhSettings
+from extensions.base_extension import BaseExtension
+from extensions.mobileraker import (
+    MOBILERAKER_BACKUP_DIR,
+    MOBILERAKER_DIR,
+    MOBILERAKER_ENV_DIR,
+    MOBILERAKER_INSTALL_SCRIPT,
+    MOBILERAKER_LOG_NAME,
+    MOBILERAKER_REPO,
+    MOBILERAKER_REQ_FILE,
+    MOBILERAKER_SERVICE_FILE,
+    MOBILERAKER_SERVICE_NAME,
+    MOBILERAKER_UPDATER_SECTION_NAME,
+)
+from utils.common import check_install_dependencies
+from utils.config_utils import add_config_section, remove_config_section
+from utils.git_utils import git_clone_wrapper, git_pull_wrapper
+from utils.input_utils import get_confirm
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    check_python_version,
+    cmd_sysctl_service,
+    install_python_requirements,
+    remove_system_service,
+)
+
+
+# noinspection PyMethodMayBeStatic
+class MobilerakerExtension(BaseExtension):
+    def install_extension(self, **kwargs) -> None:
+        Logger.print_status("Installing Mobileraker's companion ...")
+
+        if not check_python_version(3, 7):
+            return
+
+        mr_instances = get_instances(Moonraker)
+        if not mr_instances:
+            Logger.print_dialog(
+                DialogType.WARNING,
+                [
+                    "Moonraker not found! Mobileraker's companion will not properly "
+                    "work without a working Moonraker installation.",
+                    "Mobileraker's companion's update manager configuration for "
+                    "Moonraker will not be added to any moonraker.conf.",
+                ],
+            )
+            if not get_confirm(
+                "Continue Mobileraker's companion installation?",
+                default_choice=False,
+                allow_go_back=True,
+            ):
+                return
+
+        check_install_dependencies()
+
+        git_clone_wrapper(MOBILERAKER_REPO, MOBILERAKER_DIR)
+
+        try:
+            run(MOBILERAKER_INSTALL_SCRIPT.as_posix(), shell=True, check=True)
+            if mr_instances:
+                self._patch_mobileraker_update_manager(mr_instances)
+                InstanceManager.restart_all(mr_instances)
+            else:
+                Logger.print_info(
+                    "Moonraker is not installed! Cannot add Mobileraker's "
+                    "companion to update manager!"
+                )
+            Logger.print_ok("Mobileraker's companion successfully installed!")
+        except CalledProcessError as e:
+            Logger.print_error(f"Error installing Mobileraker's companion:\n{e}")
+            return
+
+    def update_extension(self, **kwargs) -> None:
+        try:
+            if not MOBILERAKER_DIR.exists():
+                Logger.print_info(
+                    "Mobileraker's companion doesn't seem to be installed! Skipping ..."
+                )
+                return
+
+            Logger.print_status("Updating Mobileraker's companion ...")
+
+            cmd_sysctl_service(MOBILERAKER_SERVICE_NAME, "stop")
+
+            settings = KiauhSettings()
+            if settings.kiauh.backup_before_update:
+                self._backup_mobileraker_dir()
+
+            git_pull_wrapper(MOBILERAKER_REPO, MOBILERAKER_DIR)
+
+            install_python_requirements(MOBILERAKER_ENV_DIR, MOBILERAKER_REQ_FILE)
+
+            cmd_sysctl_service(MOBILERAKER_SERVICE_NAME, "start")
+
+            Logger.print_ok("Mobileraker's companion updated successfully.", end="\n\n")
+        except CalledProcessError as e:
+            Logger.print_error(f"Error updating Mobileraker's companion:\n{e}")
+            return
+
+    def remove_extension(self, **kwargs) -> None:
+        Logger.print_status("Removing Mobileraker's companion ...")
+        try:
+            if MOBILERAKER_DIR.exists():
+                Logger.print_status("Removing Mobileraker's companion directory ...")
+                shutil.rmtree(MOBILERAKER_DIR)
+                Logger.print_ok(
+                    "Mobileraker's companion directory successfully removed!"
+                )
+            else:
+                Logger.print_warn("Mobileraker's companion directory not found!")
+
+            if MOBILERAKER_ENV_DIR.exists():
+                Logger.print_status("Removing Mobileraker's companion environment ...")
+                shutil.rmtree(MOBILERAKER_ENV_DIR)
+                Logger.print_ok(
+                    "Mobileraker's companion environment successfully removed!"
+                )
+            else:
+                Logger.print_warn("Mobileraker's companion environment not found!")
+
+            if MOBILERAKER_SERVICE_FILE.exists():
+                remove_system_service(MOBILERAKER_SERVICE_NAME)
+
+            kl_instances: List[Klipper] = get_instances(Klipper)
+            for instance in kl_instances:
+                logfile = instance.base.log_dir.joinpath(MOBILERAKER_LOG_NAME)
+                if logfile.exists():
+                    Logger.print_status(f"Removing {logfile} ...")
+                    Path(logfile).unlink()
+                    Logger.print_ok(f"{logfile} successfully removed!")
+
+            mr_instances: List[Moonraker] = get_instances(Moonraker)
+            if mr_instances:
+                Logger.print_status(
+                    "Removing Mobileraker's companion from update manager ..."
+                )
+                remove_config_section(MOBILERAKER_UPDATER_SECTION_NAME, mr_instances)
+                Logger.print_ok(
+                    "Mobileraker's companion successfully removed from update manager!"
+                )
+
+            Logger.print_ok("Mobileraker's companion successfully removed!")
+
+        except Exception as e:
+            Logger.print_error(f"Error removing Mobileraker's companion:\n{e}")
+
+    def _patch_mobileraker_update_manager(self, instances: List[Moonraker]) -> None:
+        add_config_section(
+            section=MOBILERAKER_UPDATER_SECTION_NAME,
+            instances=instances,
+            options=[
+                ("type", "git_repo"),
+                ("path", MOBILERAKER_DIR.as_posix()),
+                ("origin", MOBILERAKER_REPO),
+                ("primary_branch", "main"),
+                ("managed_services", "mobileraker"),
+                ("env", f"{MOBILERAKER_ENV_DIR}/bin/python"),
+                ("requirements", MOBILERAKER_REQ_FILE.as_posix()),
+                ("install_script", MOBILERAKER_INSTALL_SCRIPT.as_posix()),
+            ],
+        )
+
+    def _backup_mobileraker_dir(self) -> None:
+        bm = BackupManager()
+        bm.backup_directory(
+            MOBILERAKER_DIR.name,
+            source=MOBILERAKER_DIR,
+            target=MOBILERAKER_BACKUP_DIR,
+        )
+        bm.backup_directory(
+            MOBILERAKER_ENV_DIR.name,
+            source=MOBILERAKER_ENV_DIR,
+            target=MOBILERAKER_BACKUP_DIR,
+        )
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/obico/assets/moonraker-obico.env /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/obico/assets/moonraker-obico.env
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/obico/assets/moonraker-obico.env	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/obico/assets/moonraker-obico.env	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1 @@
+OBICO_ARGS="-m moonraker_obico.app -c %CFG%"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/obico/assets/moonraker-obico.service /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/obico/assets/moonraker-obico.service
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/obico/assets/moonraker-obico.service	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/obico/assets/moonraker-obico.service	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,16 @@
+#Systemd service file for moonraker-obico
+[Unit]
+Description=Moonraker-Obico
+After=network-online.target moonraker.service
+
+[Install]
+WantedBy=multi-user.target
+
+[Service]
+Type=simple
+User=%USER%
+WorkingDirectory=%OBICO_DIR%
+EnvironmentFile=%ENV_FILE%
+ExecStart=%ENV%/bin/python3 $OBICO_ARGS
+Restart=always
+RestartSec=5
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/obico/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/obico/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/obico/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/obico/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,34 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from pathlib import Path
+
+MODULE_PATH = Path(__file__).resolve().parent
+
+# repo
+OBICO_REPO = "https://github.com/TheSpaghettiDetective/moonraker-obico.git"
+
+# names
+OBICO_SERVICE_NAME = "moonraker-obico.service"
+OBICO_ENV_FILE_NAME = "moonraker-obico.env"
+OBICO_CFG_NAME = "moonraker-obico.cfg"
+OBICO_CFG_SAMPLE_NAME = "moonraker-obico.cfg.sample"
+OBICO_LOG_NAME = "moonraker-obico.log"
+OBICO_UPDATE_CFG_NAME = "moonraker-obico-update.cfg"
+OBICO_UPDATE_CFG_SAMPLE_NAME = "moonraker-obico-update.cfg.sample"
+OBICO_MACROS_CFG_NAME = "moonraker_obico_macros.cfg"
+
+# directories
+OBICO_DIR = Path.home().joinpath("moonraker-obico")
+OBICO_ENV_DIR = Path.home().joinpath("moonraker-obico-env")
+
+# files
+OBICO_SERVICE_TEMPLATE = MODULE_PATH.joinpath(f"assets/{OBICO_SERVICE_NAME}")
+OBICO_ENV_FILE_TEMPLATE = MODULE_PATH.joinpath(f"assets/{OBICO_ENV_FILE_NAME}")
+OBICO_LINK_SCRIPT = OBICO_DIR.joinpath("scripts/link.sh")
+OBICO_REQ_FILE = OBICO_DIR.joinpath("requirements.txt")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/obico/metadata.json /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/obico/metadata.json
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/obico/metadata.json	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/obico/metadata.json	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,16 @@
+{
+  "metadata": {
+    "index": 6,
+    "module": "moonraker_obico_extension",
+    "maintained_by": "Obico",
+    "display_name": "Obico for Klipper",
+    "description": [
+        "Open source 3D Printing cloud and AI",
+        "- AI-Powered Failure Detection",
+        "- Free Remote Monitoring and Access",
+        "- 25FPS High-Def Webcam Streaming",
+        "- Free 4.9-Star Mobile App"
+    ],
+    "updates": true
+  }
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/obico/moonraker_obico_extension.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/obico/moonraker_obico_extension.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/obico/moonraker_obico_extension.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/obico/moonraker_obico_extension.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,369 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+import shutil
+from typing import List
+
+from components.klipper.klipper import Klipper
+from components.moonraker.moonraker import Moonraker
+from core.instance_manager.instance_manager import InstanceManager
+from core.instance_manager.base_instance import SUFFIX_BLACKLIST
+from core.logger import DialogType, Logger
+from core.submodules.simple_config_parser.src.simple_config_parser.simple_config_parser import (
+    SimpleConfigParser,
+)
+from extensions.base_extension import BaseExtension
+from extensions.obico import (
+    OBICO_CFG_SAMPLE_NAME,
+    OBICO_DIR,
+    OBICO_ENV_DIR,
+    OBICO_MACROS_CFG_NAME,
+    OBICO_REPO,
+    OBICO_REQ_FILE,
+    OBICO_UPDATE_CFG_NAME,
+    OBICO_UPDATE_CFG_SAMPLE_NAME,
+)
+from extensions.obico.moonraker_obico import (
+    MoonrakerObico,
+)
+from utils.common import check_install_dependencies, moonraker_exists
+from utils.config_utils import (
+    add_config_section,
+    remove_config_section,
+)
+from utils.fs_utils import run_remove_routines
+from utils.git_utils import git_clone_wrapper, git_pull_wrapper
+from utils.input_utils import get_confirm, get_selection_input, get_string_input
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    cmd_sysctl_manage,
+    cmd_sysctl_service,
+    create_python_venv,
+    install_python_requirements,
+    parse_packages_from_file,
+)
+
+
+# noinspection PyMethodMayBeStatic
+class ObicoExtension(BaseExtension):
+    server_url: str
+
+    def install_extension(self, **kwargs) -> None:
+        Logger.print_status("Installing Obico for Klipper ...")
+
+        # check if moonraker is installed. if not, notify the user and exit
+        if not moonraker_exists():
+            return
+
+        # if obico is already installed, ask if the user wants to repair an
+        # incomplete installation or link to the obico server
+        force_clone = False
+        obico_instances: List[MoonrakerObico] = get_instances(MoonrakerObico)
+        if obico_instances:
+            self._print_is_already_installed()
+            options = ["l", "r", "b"]
+            action = get_selection_input("Perform action", option_list=options)
+            if action.lower() == "b":
+                Logger.print_info("Exiting Obico for Klipper installation ...")
+                return
+            elif action.lower() == "l":
+                unlinked_instances: List[MoonrakerObico] = [
+                    obico for obico in obico_instances if not obico.is_linked
+                ]
+                self._link_obico_instances(unlinked_instances)
+                return
+            else:
+                Logger.print_status("Re-Installing Obico for Klipper ...")
+                force_clone = True
+
+        # let the user confirm installation
+        kl_instances: List[Klipper] = get_instances(Klipper)
+        mr_instances: List[Moonraker] = get_instances(Moonraker)
+        self._print_moonraker_instances(mr_instances)
+        if not get_confirm(
+            "Continue Obico for Klipper installation?",
+            default_choice=True,
+            allow_go_back=True,
+        ):
+            return
+
+        try:
+            git_clone_wrapper(OBICO_REPO, OBICO_DIR, force=force_clone)
+            self._install_dependencies()
+
+            # ask the user for the obico server url
+            self._get_server_url()
+
+            # create obico instances
+            for moonraker in mr_instances:
+                instance = MoonrakerObico(suffix=moonraker.suffix)
+                instance.create()
+
+                cmd_sysctl_service(instance.service_file_path.name, "enable")
+
+                # create obico config
+                self._create_obico_cfg(instance, moonraker)
+
+                # create obico macros
+                self._create_obico_macros_cfg(moonraker)
+
+                # create obico update manager
+                self._create_obico_update_manager_cfg(moonraker)
+
+                cmd_sysctl_service(instance.service_file_path.name, "start")
+
+            cmd_sysctl_manage("daemon-reload")
+
+            # add to klippers config
+            self._patch_printer_cfg(kl_instances)
+            InstanceManager.restart_all(kl_instances)
+
+            # add to moonraker update manager
+            self._patch_moonraker_conf(mr_instances)
+            InstanceManager.restart_all(mr_instances)
+
+            # check linking of / ask for linking instances
+            self._check_and_opt_link_instances()
+
+            Logger.print_dialog(
+                DialogType.SUCCESS,
+                ["Obico for Klipper successfully installed!"],
+                center_content=True,
+            )
+
+        except Exception as e:
+            Logger.print_error(f"Error during Obico for Klipper installation:\n{e}")
+
+    def update_extension(self, **kwargs) -> None:
+        Logger.print_status("Updating Obico for Klipper ...")
+        try:
+            instances = get_instances(MoonrakerObico)
+            InstanceManager.stop_all(instances)
+
+            git_pull_wrapper(OBICO_REPO, OBICO_DIR)
+            self._install_dependencies()
+
+            InstanceManager.start_all(instances)
+            Logger.print_ok("Obico for Klipper successfully updated!")
+
+        except Exception as e:
+            Logger.print_error(f"Error during Obico for Klipper update:\n{e}")
+
+    def remove_extension(self, **kwargs) -> None:
+        Logger.print_status("Removing Obico for Klipper ...")
+
+        kl_instances: List[Klipper] = get_instances(Klipper)
+        mr_instances: List[Moonraker] = get_instances(Moonraker)
+        ob_instances: List[MoonrakerObico] = get_instances(MoonrakerObico)
+
+        try:
+            self._remove_obico_instances(ob_instances)
+            self._remove_obico_dir()
+            self._remove_obico_env()
+            remove_config_section(f"include {OBICO_MACROS_CFG_NAME}", kl_instances)
+            remove_config_section(f"include {OBICO_UPDATE_CFG_NAME}", mr_instances)
+            Logger.print_dialog(
+                DialogType.SUCCESS,
+                ["Obico for Klipper successfully removed!"],
+                center_content=True,
+            )
+
+        except Exception as e:
+            Logger.print_error(f"Error during Obico for Klipper removal:\n{e}")
+
+    def _obico_server_url_prompt(self) -> None:
+        Logger.print_dialog(
+            DialogType.CUSTOM,
+            custom_title="Obico Server URL",
+            content=[
+                "You can use a self-hosted Obico Server or the Obico Cloud. "
+                "For more information, please visit:",
+                "https://obico.io.",
+                "\n\n",
+                "For the Obico Cloud, leave it as the default:",
+                "https://app.obico.io.",
+                "\n\n",
+                "For self-hosted server, specify:",
+                "http://server_ip:port",
+                "For instance, 'http://192.168.0.5:3334'.",
+            ],
+        )
+
+    def _print_moonraker_instances(self, mr_instances: List[Moonraker]) -> None:
+        mr_names = [f"● {moonraker.data_dir.name}" for moonraker in mr_instances]
+        if len(mr_names) > 1:
+            Logger.print_dialog(
+                DialogType.INFO,
+                [
+                    "The following Moonraker instances were found:",
+                    *mr_names,
+                    "\n\n",
+                    "The setup will apply the same names to Obico!",
+                ],
+            )
+
+    def _print_is_already_installed(self) -> None:
+        Logger.print_dialog(
+            DialogType.INFO,
+            [
+                "Obico is already installed!",
+                "It is safe to run the installer again to link your "
+                "printer or repair any issues.",
+                "\n\n",
+                "You can perform the following actions:",
+                "L) Link printer to the Obico server",
+                "R) Repair installation",
+            ],
+        )
+
+    def _get_server_url(self) -> None:
+        self._obico_server_url_prompt()
+        pattern = r"^(http|https)://[a-zA-Z0-9./?=_%:-]*$"
+        self.server_url = get_string_input(
+            "Obico Server URL",
+            regex=pattern,
+            default="https://app.obico.io",
+        )
+
+    def _install_dependencies(self) -> None:
+        # install dependencies
+        script = OBICO_DIR.joinpath("install.sh")
+        package_list = parse_packages_from_file(script)
+        check_install_dependencies({*package_list})
+
+        # create virtualenv
+        if create_python_venv(OBICO_ENV_DIR):
+            install_python_requirements(OBICO_ENV_DIR, OBICO_REQ_FILE)
+
+    def _create_obico_macros_cfg(self, moonraker: Moonraker) -> None:
+        macros_cfg = OBICO_DIR.joinpath(f"include_cfgs/{OBICO_MACROS_CFG_NAME}")
+        macros_target = moonraker.base.cfg_dir.joinpath(OBICO_MACROS_CFG_NAME)
+        if not macros_target.exists():
+            shutil.copy(macros_cfg, macros_target)
+        else:
+            Logger.print_info(
+                f"Obico's '{OBICO_MACROS_CFG_NAME}' in {moonraker.base.cfg_dir} already exists! Skipped ..."
+            )
+
+    def _create_obico_update_manager_cfg(self, moonraker: Moonraker) -> None:
+        update_cfg = OBICO_DIR.joinpath(OBICO_UPDATE_CFG_SAMPLE_NAME)
+        update_cfg_target = moonraker.base.cfg_dir.joinpath(OBICO_UPDATE_CFG_NAME)
+        if not update_cfg_target.exists():
+            shutil.copy(update_cfg, update_cfg_target)
+        else:
+            Logger.print_info(
+                f"Obico's '{OBICO_UPDATE_CFG_NAME}' in {moonraker.base.cfg_dir} already exists! Skipped ..."
+            )
+
+    def _create_obico_cfg(
+        self, current_instance: MoonrakerObico, moonraker: Moonraker
+    ) -> None:
+        cfg_template = OBICO_DIR.joinpath(OBICO_CFG_SAMPLE_NAME)
+        cfg_target_file = current_instance.cfg_file
+
+        if not cfg_template.exists():
+            Logger.print_error(
+                f"Obico config template file {cfg_target_file} does not exist!"
+            )
+            return
+
+        if not cfg_target_file.exists():
+            shutil.copy(cfg_template, cfg_target_file)
+            self._patch_obico_cfg(moonraker, current_instance)
+        else:
+            Logger.print_info(
+                f"Obico config in {current_instance.base.cfg_dir} already exists! Skipped ..."
+            )
+
+    def _patch_obico_cfg(self, moonraker: Moonraker, obico: MoonrakerObico) -> None:
+        scp = SimpleConfigParser()
+        scp.read_file(obico.cfg_file)
+        scp.set_option("server", "url", self.server_url)
+        scp.set_option("moonraker", "port", str(moonraker.port))
+        scp.set_option(
+            "logging",
+            "path",
+            obico.base.log_dir.joinpath(obico.log_file_name).as_posix(),
+        )
+        scp.write_file(obico.cfg_file)
+
+    def _patch_printer_cfg(self, klipper: List[Klipper]) -> None:
+        add_config_section(
+            section=f"include {OBICO_MACROS_CFG_NAME}", instances=klipper
+        )
+
+    def _patch_moonraker_conf(self, instances: List[Moonraker]) -> None:
+        add_config_section(
+            section=f"include {OBICO_UPDATE_CFG_NAME}", instances=instances
+        )
+
+    def _link_obico_instances(self, unlinked_instances) -> None:
+        for obico in unlinked_instances:
+            obico.link()
+
+    def _check_and_opt_link_instances(self) -> None:
+        Logger.print_status("Checking link status of Obico instances ...")
+
+        suffix_blacklist: List[str] = [suffix for suffix in SUFFIX_BLACKLIST if suffix != 'obico']
+        ob_instances: List[MoonrakerObico] = get_instances(MoonrakerObico, suffix_blacklist=suffix_blacklist)
+        unlinked_instances: List[MoonrakerObico] = [
+            obico for obico in ob_instances if not obico.is_linked
+        ]
+        if unlinked_instances:
+            Logger.print_dialog(
+                DialogType.INFO,
+                [
+                    "The Obico instances for the following printers are not "
+                    "linked to the server:",
+                    *[f"● {obico.data_dir.name}" for obico in unlinked_instances],
+                    "\n\n",
+                    "It will take only 10 seconds to link the printer to the Obico server.",
+                    "For more information visit:",
+                    "https://www.obico.io/docs/user-guides/klipper-setup/",
+                    "\n\n",
+                    "If you don't want to link the printer now, you can restart the "
+                    "linking process later by running this installer again.",
+                ],
+            )
+            if not get_confirm("Do you want to link the printers now?"):
+                Logger.print_info("Linking to Obico server skipped ...")
+                return
+
+            self._link_obico_instances(unlinked_instances)
+
+    def _remove_obico_instances(
+        self,
+        instance_list: List[MoonrakerObico],
+    ) -> None:
+        if not instance_list:
+            Logger.print_info("No Obico instances found. Skipped ...")
+            return
+
+        for instance in instance_list:
+            Logger.print_status(
+                f"Removing instance {instance.service_file_path.stem} ..."
+            )
+            InstanceManager.remove(instance)
+
+    def _remove_obico_dir(self) -> None:
+        Logger.print_status("Removing Obico for Klipper directory ...")
+
+        if not OBICO_DIR.exists():
+            Logger.print_info(f"'{OBICO_DIR}' does not exist. Skipped ...")
+            return
+
+        run_remove_routines(OBICO_DIR)
+
+    def _remove_obico_env(self) -> None:
+        Logger.print_status("Removing Obico for Klipper environment ...")
+
+        if not OBICO_ENV_DIR.exists():
+            Logger.print_info(f"'{OBICO_ENV_DIR}' does not exist. Skipped ...")
+            return
+
+        run_remove_routines(OBICO_ENV_DIR)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/obico/moonraker_obico.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/obico/moonraker_obico.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/obico/moonraker_obico.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/obico/moonraker_obico.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,145 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from dataclasses import dataclass, field
+from pathlib import Path
+from subprocess import CalledProcessError, run
+
+from components.moonraker.moonraker import Moonraker
+from core.constants import CURRENT_USER
+from core.instance_manager.base_instance import BaseInstance
+from core.logger import Logger
+from core.submodules.simple_config_parser.src.simple_config_parser.simple_config_parser import (
+    SimpleConfigParser,
+)
+from extensions.obico import (
+    OBICO_CFG_NAME,
+    OBICO_DIR,
+    OBICO_ENV_DIR,
+    OBICO_ENV_FILE_NAME,
+    OBICO_ENV_FILE_TEMPLATE,
+    OBICO_LINK_SCRIPT,
+    OBICO_LOG_NAME,
+    OBICO_SERVICE_TEMPLATE,
+)
+from utils.fs_utils import create_folders
+from utils.sys_utils import get_service_file_path
+
+
+# noinspection PyMethodMayBeStatic
+@dataclass(repr=True)
+class MoonrakerObico:
+    suffix: str
+    base: BaseInstance = field(init=False, repr=False)
+    service_file_path: Path = field(init=False)
+    log_file_name: str = OBICO_LOG_NAME
+    dir: Path = OBICO_DIR
+    env_dir: Path = OBICO_ENV_DIR
+    data_dir: Path = field(init=False)
+    cfg_file: Path = field(init=False)
+    is_linked: bool = False
+
+    def __post_init__(self):
+        self.base: BaseInstance = BaseInstance(Moonraker, self.suffix)
+        self.base.log_file_name = self.log_file_name
+
+        self.service_file_path: Path = get_service_file_path(
+            MoonrakerObico, self.suffix
+        )
+        self.data_dir: Path = self.base.data_dir
+        self.cfg_file = self.base.cfg_dir.joinpath(OBICO_CFG_NAME)
+        self.is_linked: bool = self._check_link_status()
+
+    def create(self) -> None:
+        from utils.sys_utils import create_env_file, create_service_file
+
+        Logger.print_status("Creating new Obico for Klipper Instance ...")
+
+        try:
+            create_folders(self.base.base_folders)
+            create_service_file(
+                name=self.service_file_path.name,
+                content=self._prep_service_file_content(),
+            )
+            create_env_file(
+                path=self.base.sysd_dir.joinpath(OBICO_ENV_FILE_NAME),
+                content=self._prep_env_file_content(),
+            )
+
+        except CalledProcessError as e:
+            Logger.print_error(f"Error creating instance: {e}")
+            raise
+        except OSError as e:
+            Logger.print_error(f"Error creating env file: {e}")
+            raise
+
+    def link(self) -> None:
+        Logger.print_status(
+            f"Linking instance for printer {self.data_dir.name} to the Obico server ..."
+        )
+        try:
+            cmd = [f"{OBICO_LINK_SCRIPT} -q -c {self.cfg_file}"]
+            if self.suffix:
+                cmd.append(f"-n {self.suffix}")
+            run(cmd, check=True, shell=True)
+        except CalledProcessError as e:
+            Logger.print_error(f"Error during Obico linking: {e}")
+            raise
+
+    def _prep_service_file_content(self) -> str:
+        template = OBICO_SERVICE_TEMPLATE
+
+        try:
+            with open(template, "r") as template_file:
+                template_content = template_file.read()
+        except FileNotFoundError:
+            Logger.print_error(f"Unable to open {template} - File not found")
+            raise
+
+        service_content = template_content.replace(
+            "%USER%",
+            CURRENT_USER,
+        )
+        service_content = service_content.replace(
+            "%OBICO_DIR%",
+            self.dir.as_posix(),
+        )
+        service_content = service_content.replace(
+            "%ENV%",
+            self.env_dir.as_posix(),
+        )
+        service_content = service_content.replace(
+            "%ENV_FILE%",
+            self.base.sysd_dir.joinpath(OBICO_ENV_FILE_NAME).as_posix(),
+        )
+        return service_content
+
+    def _prep_env_file_content(self) -> str:
+        template = OBICO_ENV_FILE_TEMPLATE
+
+        try:
+            with open(template, "r") as env_file:
+                env_template_file_content = env_file.read()
+        except FileNotFoundError:
+            Logger.print_error(f"Unable to open {template} - File not found")
+            raise
+        env_file_content = env_template_file_content.replace(
+            "%CFG%",
+            f"{self.cfg_file}",
+        )
+        return env_file_content
+
+    def _check_link_status(self) -> bool:
+        if not self.cfg_file or not self.cfg_file.exists():
+            return False
+
+        scp = SimpleConfigParser()
+        scp.read_file(self.cfg_file)
+        return scp.getval("server", "auth_token", None) is not None
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoapp/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoapp/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoapp/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoapp/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,29 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from pathlib import Path
+
+# repo
+OA_REPO = "https://github.com/crysxd/OctoApp-Plugin.git"
+
+# directories
+OA_DIR = Path.home().joinpath("octoapp")
+OA_ENV_DIR = Path.home().joinpath("octoapp-env")
+OA_STORE_DIR = OA_DIR.joinpath("octoapp-store")
+
+# files
+OA_REQ_FILE = OA_DIR.joinpath("requirements.txt")
+OA_DEPS_JSON_FILE = OA_DIR.joinpath("moonraker-system-dependencies.json")
+OA_INSTALL_SCRIPT = OA_DIR.joinpath("install.sh")
+OA_UPDATE_SCRIPT = OA_DIR.joinpath("update.sh")
+OA_INSTALLER_LOG_FILE = Path.home().joinpath("octoapp-installer.log")
+
+# filenames
+OA_CFG_NAME = "octoapp.conf"
+OA_LOG_NAME = "octoapp.log"
+OA_SYS_CFG_NAME = "octoapp-system.cfg"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoapp/metadata.json /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoapp/metadata.json
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoapp/metadata.json	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoapp/metadata.json	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,17 @@
+{
+    "metadata": {
+        "index": 9,
+        "module": "octoapp_extension",
+        "maintained_by": "crysxd",
+        "display_name": "OctoApp for Klipper",
+        "description": [
+            "Your favorite 3D printing app for iOS & Android",
+            "- Print notifications on your phone & watch",
+            "- Control and start prints from your phone",
+            "- Live webcam view",
+            "- Live Gcode preview",
+            "- And much much more!"
+        ],
+        "updates": true
+    }
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoapp/octoapp_extension.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoapp/octoapp_extension.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoapp/octoapp_extension.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoapp/octoapp_extension.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,191 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+import json
+from typing import List
+
+from components.moonraker.moonraker import Moonraker
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import DialogType, Logger
+from extensions.base_extension import BaseExtension
+from extensions.octoapp import (
+    OA_DEPS_JSON_FILE,
+    OA_DIR,
+    OA_ENV_DIR,
+    OA_INSTALL_SCRIPT,
+    OA_INSTALLER_LOG_FILE,
+    OA_REPO,
+    OA_REQ_FILE,
+    OA_SYS_CFG_NAME,
+)
+from extensions.octoapp.octoapp import Octoapp
+from utils.common import (
+    check_install_dependencies,
+    moonraker_exists,
+)
+from utils.config_utils import (
+    remove_config_section,
+)
+from utils.fs_utils import run_remove_routines
+from utils.git_utils import git_clone_wrapper
+from utils.input_utils import get_confirm
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    install_python_requirements,
+    parse_packages_from_file,
+)
+
+
+# noinspection PyMethodMayBeStatic
+class OctoappExtension(BaseExtension):
+    def install_extension(self, **kwargs) -> None:
+        Logger.print_status("Installing OctoApp for Klipper ...")
+
+        # check if moonraker is installed. if not, notify the user and exit
+        if not moonraker_exists():
+            return
+
+        force_clone = False
+        OA_instances: List[Octoapp] = get_instances(Octoapp)
+        if OA_instances:
+            Logger.print_dialog(
+                DialogType.INFO,
+                [
+                    "OctoApp is already installed!",
+                    "It is safe to run the installer again to link your "
+                    "printer or repair any issues.",
+                ],
+            )
+            if not get_confirm("Re-run OctoApp installation?"):
+                Logger.print_info("Exiting OctoApp for Klipper installation ...")
+                return
+            else:
+                Logger.print_status("Re-Installing OctoApp for Klipper ...")
+                force_clone = True
+
+        mr_instances: List[Moonraker] = get_instances(Moonraker)
+
+        mr_names = [f"● {moonraker.data_dir.name}" for moonraker in mr_instances]
+        if len(mr_names) > 1:
+            Logger.print_dialog(
+                DialogType.INFO,
+                [
+                    "The following Moonraker instances were found:",
+                    *mr_names,
+                    "\n\n",
+                    "The setup will apply the same names to OctoApp!",
+                ],
+            )
+
+        if not get_confirm(
+            "Continue OctoApp for Klipper installation?",
+            default_choice=True,
+            allow_go_back=True,
+        ):
+            Logger.print_info("Exiting OctoApp for Klipper installation ...")
+            return
+
+        try:
+            git_clone_wrapper(OA_REPO, OA_DIR, force=force_clone)
+
+            for moonraker in mr_instances:
+                instance = Octoapp(suffix=moonraker.suffix)
+                instance.create()
+
+            InstanceManager.restart_all(mr_instances)
+
+            Logger.print_dialog(
+                DialogType.SUCCESS,
+                ["OctoApp for Klipper successfully installed!"],
+                center_content=True,
+            )
+
+        except Exception as e:
+            Logger.print_error(
+                f"Error during OctoApp for Klipper installation:\n{e}"
+            )
+
+    def update_extension(self, **kwargs) -> None:
+        Logger.print_status("Updating OctoApp for Klipper ...")
+        try:
+            Octoapp.update()
+            Logger.print_dialog(
+                DialogType.SUCCESS,
+                ["OctoApp for Klipper successfully updated!"],
+                center_content=True,
+            )
+
+        except Exception as e:
+            Logger.print_error(f"Error during OctoApp for Klipper update:\n{e}")
+
+    def remove_extension(self, **kwargs) -> None:
+        Logger.print_status("Removing OctoApp for Klipper ...")
+
+        mr_instances: List[Moonraker] = get_instances(Moonraker)
+        ob_instances: List[Octoapp] = get_instances(Octoapp)
+
+        try:
+            self._remove_OA_instances(ob_instances)
+            self._remove_OA_dir()
+            self._remove_OA_env()
+            remove_config_section(f"include {OA_SYS_CFG_NAME}", mr_instances)
+            run_remove_routines(OA_INSTALLER_LOG_FILE)
+            Logger.print_dialog(
+                DialogType.SUCCESS,
+                ["OctoApp for Klipper successfully removed!"],
+                center_content=True,
+            )
+
+        except Exception as e:
+            Logger.print_error(f"Error during OctoApp for Klipper removal:\n{e}")
+
+    def _install_OA_dependencies(self) -> None:
+        OA_deps = []
+        if OA_DEPS_JSON_FILE.exists():
+            with open(OA_DEPS_JSON_FILE, "r") as deps:
+                OA_deps = json.load(deps).get("debian", [])
+        elif OA_INSTALL_SCRIPT.exists():
+            OA_deps = parse_packages_from_file(OA_INSTALL_SCRIPT)
+
+        if not OA_deps:
+            raise ValueError("Error reading OctoApp dependencies!")
+
+        check_install_dependencies({*OA_deps})
+        install_python_requirements(OA_ENV_DIR, OA_REQ_FILE)
+
+    def _remove_OA_instances(
+        self,
+        instance_list: List[Octoapp],
+    ) -> None:
+        if not instance_list:
+            Logger.print_info("No OctoApp instances found. Skipped ...")
+            return
+
+        for instance in instance_list:
+            Logger.print_status(
+                f"Removing instance {instance.service_file_path.stem} ..."
+            )
+            InstanceManager.remove(instance)
+
+    def _remove_OA_dir(self) -> None:
+        Logger.print_status("Removing OctoApp for Klipper directory ...")
+
+        if not OA_DIR.exists():
+            Logger.print_info(f"'{OA_DIR}' does not exist. Skipped ...")
+            return
+
+        run_remove_routines(OA_DIR)
+
+    def _remove_OA_env(self) -> None:
+        Logger.print_status("Removing OctoApp for Klipper environment ...")
+
+        if not OA_ENV_DIR.exists():
+            Logger.print_info(f"'{OA_ENV_DIR}' does not exist. Skipped ...")
+            return
+
+        run_remove_routines(OA_ENV_DIR)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoapp/octoapp.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoapp/octoapp.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoapp/octoapp.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoapp/octoapp.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,75 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from dataclasses import dataclass, field
+from pathlib import Path
+from subprocess import CalledProcessError, run
+
+from components.moonraker import MOONRAKER_CFG_NAME
+from components.moonraker.moonraker import Moonraker
+from core.instance_manager.base_instance import BaseInstance
+from core.logger import Logger
+from extensions.octoapp import (
+    OA_CFG_NAME,
+    OA_DIR,
+    OA_ENV_DIR,
+    OA_INSTALL_SCRIPT,
+    OA_LOG_NAME,
+    OA_SYS_CFG_NAME,
+    OA_UPDATE_SCRIPT,
+)
+from utils.sys_utils import get_service_file_path
+
+
+@dataclass
+class Octoapp:
+    suffix: str
+    base: BaseInstance = field(init=False, repr=False)
+    service_file_path: Path = field(init=False)
+    log_file_name = OA_LOG_NAME
+    dir: Path = OA_DIR
+    env_dir: Path = OA_ENV_DIR
+    data_dir: Path = field(init=False)
+    store_dir: Path = field(init=False)
+    cfg_file: Path = field(init=False)
+    sys_cfg_file: Path = field(init=False)
+
+    def __post_init__(self):
+        self.base: BaseInstance = BaseInstance(Moonraker, self.suffix)
+        self.base.log_file_name = self.log_file_name
+
+        self.service_file_path: Path = get_service_file_path(
+            Octoapp, self.suffix
+        )
+        self.store_dir = self.base.data_dir.joinpath("store")
+        self.cfg_file = self.base.cfg_dir.joinpath(OA_CFG_NAME)
+        self.sys_cfg_file = self.base.cfg_dir.joinpath(OA_SYS_CFG_NAME)
+        self.data_dir = self.base.data_dir
+        self.sys_cfg_file = self.base.cfg_dir.joinpath(OA_SYS_CFG_NAME)
+
+    def create(self) -> None:
+        Logger.print_status("Creating OctoApp for Klipper Instance ...")
+
+        try:
+            cmd = f"{OA_INSTALL_SCRIPT} {self.base.cfg_dir}/{MOONRAKER_CFG_NAME}"
+            run(cmd, check=True, shell=True)
+
+        except CalledProcessError as e:
+            Logger.print_error(f"Error creating instance: {e}")
+            raise
+
+    @staticmethod
+    def update() -> None:
+        try:
+            run(OA_UPDATE_SCRIPT.as_posix(), check=True, shell=True, cwd=OA_DIR)
+
+        except CalledProcessError as e:
+            Logger.print_error(f"Error updating OctoApp for Klipper: {e}")
+            raise
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoeverywhere/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoeverywhere/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoeverywhere/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoeverywhere/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,29 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from pathlib import Path
+
+# repo
+OE_REPO = "https://github.com/QuinnDamerell/OctoPrint-OctoEverywhere.git"
+
+# directories
+OE_DIR = Path.home().joinpath("octoeverywhere")
+OE_ENV_DIR = Path.home().joinpath("octoeverywhere-env")
+OE_STORE_DIR = OE_DIR.joinpath("octoeverywhere-store")
+
+# files
+OE_REQ_FILE = OE_DIR.joinpath("requirements.txt")
+OE_DEPS_JSON_FILE = OE_DIR.joinpath("moonraker-system-dependencies.json")
+OE_INSTALL_SCRIPT = OE_DIR.joinpath("install.sh")
+OE_UPDATE_SCRIPT = OE_DIR.joinpath("update.sh")
+OE_INSTALLER_LOG_FILE = Path.home().joinpath("octoeverywhere-installer.log")
+
+# filenames
+OE_CFG_NAME = "octoeverywhere.conf"
+OE_LOG_NAME = "octoeverywhere.log"
+OE_SYS_CFG_NAME = "octoeverywhere-system.cfg"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoeverywhere/metadata.json /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoeverywhere/metadata.json
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoeverywhere/metadata.json	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoeverywhere/metadata.json	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,16 @@
+{
+    "metadata": {
+        "index": 7,
+        "module": "octoeverywhere_extension",
+        "maintained_by": "QuinnDamerell",
+        "display_name": "OctoEverywhere for Klipper",
+        "description": [
+            "Cloud Empower Your Klipper 3D Printers With:",
+            "- Free, Private, And Secure Remote Access",
+            "- AI Print Failure Detection",
+            "- Real-time Notifications",
+            "- Live Streaming, and More!"
+        ],
+        "updates": true
+    }
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoeverywhere/octoeverywhere_extension.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoeverywhere/octoeverywhere_extension.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoeverywhere/octoeverywhere_extension.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoeverywhere/octoeverywhere_extension.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,191 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+import json
+from typing import List
+
+from components.moonraker.moonraker import Moonraker
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import DialogType, Logger
+from extensions.base_extension import BaseExtension
+from extensions.octoeverywhere import (
+    OE_DEPS_JSON_FILE,
+    OE_DIR,
+    OE_ENV_DIR,
+    OE_INSTALL_SCRIPT,
+    OE_INSTALLER_LOG_FILE,
+    OE_REPO,
+    OE_REQ_FILE,
+    OE_SYS_CFG_NAME,
+)
+from extensions.octoeverywhere.octoeverywhere import Octoeverywhere
+from utils.common import (
+    check_install_dependencies,
+    moonraker_exists,
+)
+from utils.config_utils import (
+    remove_config_section,
+)
+from utils.fs_utils import run_remove_routines
+from utils.git_utils import git_clone_wrapper
+from utils.input_utils import get_confirm
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    install_python_requirements,
+    parse_packages_from_file,
+)
+
+
+# noinspection PyMethodMayBeStatic
+class OctoeverywhereExtension(BaseExtension):
+    def install_extension(self, **kwargs) -> None:
+        Logger.print_status("Installing OctoEverywhere for Klipper ...")
+
+        # check if moonraker is installed. if not, notify the user and exit
+        if not moonraker_exists():
+            return
+
+        force_clone = False
+        oe_instances: List[Octoeverywhere] = get_instances(Octoeverywhere)
+        if oe_instances:
+            Logger.print_dialog(
+                DialogType.INFO,
+                [
+                    "OctoEverywhere is already installed!",
+                    "It is safe to run the installer again to link your "
+                    "printer or repair any issues.",
+                ],
+            )
+            if not get_confirm("Re-run OctoEverywhere installation?"):
+                Logger.print_info("Exiting OctoEverywhere for Klipper installation ...")
+                return
+            else:
+                Logger.print_status("Re-Installing OctoEverywhere for Klipper ...")
+                force_clone = True
+
+        mr_instances: List[Moonraker] = get_instances(Moonraker)
+
+        mr_names = [f"● {moonraker.data_dir.name}" for moonraker in mr_instances]
+        if len(mr_names) > 1:
+            Logger.print_dialog(
+                DialogType.INFO,
+                [
+                    "The following Moonraker instances were found:",
+                    *mr_names,
+                    "\n\n",
+                    "The setup will apply the same names to OctoEverywhere!",
+                ],
+            )
+
+        if not get_confirm(
+            "Continue OctoEverywhere for Klipper installation?",
+            default_choice=True,
+            allow_go_back=True,
+        ):
+            Logger.print_info("Exiting OctoEverywhere for Klipper installation ...")
+            return
+
+        try:
+            git_clone_wrapper(OE_REPO, OE_DIR, force=force_clone)
+
+            for moonraker in mr_instances:
+                instance = Octoeverywhere(suffix=moonraker.suffix)
+                instance.create()
+
+            InstanceManager.restart_all(mr_instances)
+
+            Logger.print_dialog(
+                DialogType.SUCCESS,
+                ["OctoEverywhere for Klipper successfully installed!"],
+                center_content=True,
+            )
+
+        except Exception as e:
+            Logger.print_error(
+                f"Error during OctoEverywhere for Klipper installation:\n{e}"
+            )
+
+    def update_extension(self, **kwargs) -> None:
+        Logger.print_status("Updating OctoEverywhere for Klipper ...")
+        try:
+            Octoeverywhere.update()
+            Logger.print_dialog(
+                DialogType.SUCCESS,
+                ["OctoEverywhere for Klipper successfully updated!"],
+                center_content=True,
+            )
+
+        except Exception as e:
+            Logger.print_error(f"Error during OctoEverywhere for Klipper update:\n{e}")
+
+    def remove_extension(self, **kwargs) -> None:
+        Logger.print_status("Removing OctoEverywhere for Klipper ...")
+
+        mr_instances: List[Moonraker] = get_instances(Moonraker)
+        ob_instances: List[Octoeverywhere] = get_instances(Octoeverywhere)
+
+        try:
+            self._remove_oe_instances(ob_instances)
+            self._remove_oe_dir()
+            self._remove_oe_env()
+            remove_config_section(f"include {OE_SYS_CFG_NAME}", mr_instances)
+            run_remove_routines(OE_INSTALLER_LOG_FILE)
+            Logger.print_dialog(
+                DialogType.SUCCESS,
+                ["OctoEverywhere for Klipper successfully removed!"],
+                center_content=True,
+            )
+
+        except Exception as e:
+            Logger.print_error(f"Error during OctoEverywhere for Klipper removal:\n{e}")
+
+    def _install_oe_dependencies(self) -> None:
+        oe_deps = []
+        if OE_DEPS_JSON_FILE.exists():
+            with open(OE_DEPS_JSON_FILE, "r") as deps:
+                oe_deps = json.load(deps).get("debian", [])
+        elif OE_INSTALL_SCRIPT.exists():
+            oe_deps = parse_packages_from_file(OE_INSTALL_SCRIPT)
+
+        if not oe_deps:
+            raise ValueError("Error reading OctoEverywhere dependencies!")
+
+        check_install_dependencies({*oe_deps})
+        install_python_requirements(OE_ENV_DIR, OE_REQ_FILE)
+
+    def _remove_oe_instances(
+        self,
+        instance_list: List[Octoeverywhere],
+    ) -> None:
+        if not instance_list:
+            Logger.print_info("No OctoEverywhere instances found. Skipped ...")
+            return
+
+        for instance in instance_list:
+            Logger.print_status(
+                f"Removing instance {instance.service_file_path.stem} ..."
+            )
+            InstanceManager.remove(instance)
+
+    def _remove_oe_dir(self) -> None:
+        Logger.print_status("Removing OctoEverywhere for Klipper directory ...")
+
+        if not OE_DIR.exists():
+            Logger.print_info(f"'{OE_DIR}' does not exist. Skipped ...")
+            return
+
+        run_remove_routines(OE_DIR)
+
+    def _remove_oe_env(self) -> None:
+        Logger.print_status("Removing OctoEverywhere for Klipper environment ...")
+
+        if not OE_ENV_DIR.exists():
+            Logger.print_info(f"'{OE_ENV_DIR}' does not exist. Skipped ...")
+            return
+
+        run_remove_routines(OE_ENV_DIR)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoeverywhere/octoeverywhere.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoeverywhere/octoeverywhere.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/octoeverywhere/octoeverywhere.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/octoeverywhere/octoeverywhere.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,75 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from dataclasses import dataclass, field
+from pathlib import Path
+from subprocess import CalledProcessError, run
+
+from components.moonraker import MOONRAKER_CFG_NAME
+from components.moonraker.moonraker import Moonraker
+from core.instance_manager.base_instance import BaseInstance
+from core.logger import Logger
+from extensions.octoeverywhere import (
+    OE_CFG_NAME,
+    OE_DIR,
+    OE_ENV_DIR,
+    OE_INSTALL_SCRIPT,
+    OE_LOG_NAME,
+    OE_SYS_CFG_NAME,
+    OE_UPDATE_SCRIPT,
+)
+from utils.sys_utils import get_service_file_path
+
+
+@dataclass
+class Octoeverywhere:
+    suffix: str
+    base: BaseInstance = field(init=False, repr=False)
+    service_file_path: Path = field(init=False)
+    log_file_name = OE_LOG_NAME
+    dir: Path = OE_DIR
+    env_dir: Path = OE_ENV_DIR
+    data_dir: Path = field(init=False)
+    store_dir: Path = field(init=False)
+    cfg_file: Path = field(init=False)
+    sys_cfg_file: Path = field(init=False)
+
+    def __post_init__(self):
+        self.base: BaseInstance = BaseInstance(Moonraker, self.suffix)
+        self.base.log_file_name = self.log_file_name
+
+        self.service_file_path: Path = get_service_file_path(
+            Octoeverywhere, self.suffix
+        )
+        self.store_dir = self.base.data_dir.joinpath("store")
+        self.cfg_file = self.base.cfg_dir.joinpath(OE_CFG_NAME)
+        self.sys_cfg_file = self.base.cfg_dir.joinpath(OE_SYS_CFG_NAME)
+        self.data_dir = self.base.data_dir
+        self.sys_cfg_file = self.base.cfg_dir.joinpath(OE_SYS_CFG_NAME)
+
+    def create(self) -> None:
+        Logger.print_status("Creating OctoEverywhere for Klipper Instance ...")
+
+        try:
+            cmd = f"{OE_INSTALL_SCRIPT} {self.base.cfg_dir}/{MOONRAKER_CFG_NAME}"
+            run(cmd, check=True, shell=True)
+
+        except CalledProcessError as e:
+            Logger.print_error(f"Error creating instance: {e}")
+            raise
+
+    @staticmethod
+    def update() -> None:
+        try:
+            run(OE_UPDATE_SCRIPT.as_posix(), check=True, shell=True, cwd=OE_DIR)
+
+        except CalledProcessError as e:
+            Logger.print_error(f"Error updating OctoEverywhere for Klipper: {e}")
+            raise
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/pretty_gcode/assets/pgcode.local.conf /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/pretty_gcode/assets/pgcode.local.conf
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/pretty_gcode/assets/pgcode.local.conf	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/pretty_gcode/assets/pgcode.local.conf	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,19 @@
+# PrettyGCode website configuration
+# copy this file to /etc/nginx/sites-available/pgcode.local.conf
+# then to enable:
+# sudo ln -s /etc/nginx/sites-available/pgcode.local.conf  /etc/nginx/sites-enabled/pgcode.local.conf
+# then restart ngninx:
+# sudo systemctl reload nginx
+server {
+     listen %PORT%;
+     listen [::]:%PORT%;
+     server_name pgcode.local;
+
+     root %ROOT_DIR%;
+
+     index pgcode.html;
+
+     location / {
+          try_files $uri $uri/ =404;
+     }
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/pretty_gcode/metadata.json /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/pretty_gcode/metadata.json
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/pretty_gcode/metadata.json	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/pretty_gcode/metadata.json	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,10 @@
+{
+  "metadata": {
+    "index": 8,
+    "module": "pretty_gcode_extension",
+    "maintained_by": "Kragrathea",
+    "display_name": "PrettyGCode for Klipper",
+    "description": ["3D G-Code viewer for Klipper"],
+    "updates": true
+  }
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/pretty_gcode/pretty_gcode_extension.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/pretty_gcode/pretty_gcode_extension.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/pretty_gcode/pretty_gcode_extension.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/pretty_gcode/pretty_gcode_extension.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,101 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+import shutil
+from pathlib import Path
+
+from components.webui_client.client_utils import create_nginx_cfg
+from core.constants import NGINX_SITES_AVAILABLE, NGINX_SITES_ENABLED
+from core.logger import DialogType, Logger
+from extensions.base_extension import BaseExtension
+from utils.common import check_install_dependencies
+from utils.fs_utils import (
+    remove_file,
+)
+from utils.git_utils import git_clone_wrapper, git_pull_wrapper
+from utils.input_utils import get_number_input
+from utils.sys_utils import cmd_sysctl_service, get_ipv4_addr
+
+MODULE_PATH = Path(__file__).resolve().parent
+PGC_DIR = Path.home().joinpath("pgcode")
+PGC_REPO = "https://github.com/Kragrathea/pgcode"
+PGC_CONF = "pgcode.local.conf"
+
+
+# noinspection PyMethodMayBeStatic
+class PrettyGcodeExtension(BaseExtension):
+    def install_extension(self, **kwargs) -> None:
+        Logger.print_status("Installing PrettyGCode for Klipper ...")
+        Logger.print_dialog(
+            DialogType.ATTENTION,
+            [
+                "Make sure you don't select a port which is already in use by "
+                "another application. Your input will not be validated! Choosing a port "
+                "which is already in use by another application may cause issues!",
+                "The default port is 7136.",
+            ],
+        )
+
+        port = get_number_input(
+            "On which port should PrettyGCode run",
+            min_count=0,
+            default=7136,
+            allow_go_back=True,
+        )
+
+        check_install_dependencies({"nginx"})
+
+        try:
+            if PGC_DIR.exists():
+                shutil.rmtree(PGC_DIR)
+
+            git_clone_wrapper(PGC_REPO, PGC_DIR)
+
+            create_nginx_cfg(
+                "PrettyGCode for Klipper",
+                cfg_name=PGC_CONF,
+                template_src=MODULE_PATH.joinpath(f"assets/{PGC_CONF}"),
+                ROOT_DIR=PGC_DIR,
+                PORT=port,
+            )
+
+            cmd_sysctl_service("nginx", "restart")
+
+            log = f"Open PrettyGCode now on: http://{get_ipv4_addr()}:{port}"
+            Logger.print_ok("PrettyGCode installation complete!", start="\n")
+            Logger.print_ok(log, prefix=False, end="\n\n")
+
+        except Exception as e:
+            Logger.print_error(
+                f"Error during PrettyGCode for Klipper installation: {e}"
+            )
+
+    def update_extension(self, **kwargs) -> None:
+        Logger.print_status("Updating PrettyGCode for Klipper ...")
+        try:
+            git_pull_wrapper(PGC_REPO, PGC_DIR)
+
+        except Exception as e:
+            Logger.print_error(f"Error during PrettyGCode for Klipper update: {e}")
+
+    def remove_extension(self, **kwargs) -> None:
+        try:
+            Logger.print_status("Removing PrettyGCode for Klipper ...")
+
+            # remove pgc dir
+            shutil.rmtree(PGC_DIR)
+            # remove nginx config
+            remove_file(NGINX_SITES_AVAILABLE.joinpath(PGC_CONF), True)
+            remove_file(NGINX_SITES_ENABLED.joinpath(PGC_CONF), True)
+            # restart nginx
+            cmd_sysctl_service("nginx", "restart")
+
+            Logger.print_ok("PrettyGCode for Klipper removed!")
+
+        except Exception as e:
+            Logger.print_error(f"Error during PrettyGCode for Klipper removal: {e}")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/telegram_bot/assets/moonraker-telegram-bot.env /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/telegram_bot/assets/moonraker-telegram-bot.env
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/telegram_bot/assets/moonraker-telegram-bot.env	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/telegram_bot/assets/moonraker-telegram-bot.env	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1 @@
+TELEGRAM_BOT_ARGS="%TELEGRAM_BOT_DIR%/bot/main.py -c %CFG% -l %LOG%"
\ No newline at end of file
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/telegram_bot/assets/moonraker-telegram-bot.service /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/telegram_bot/assets/moonraker-telegram-bot.service
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/telegram_bot/assets/moonraker-telegram-bot.service	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/telegram_bot/assets/moonraker-telegram-bot.service	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,16 @@
+[Unit]
+Description=Moonraker Telegram Bot SV1
+Documentation=https://github.com/nlef/moonraker-telegram-bot/wiki
+After=network-online.target
+
+[Install]
+WantedBy=multi-user.target
+
+[Service]
+Type=simple
+User=%USER%
+WorkingDirectory=%TELEGRAM_BOT_DIR%
+EnvironmentFile=%ENV_FILE%
+ExecStart=%ENV%/bin/python $TELEGRAM_BOT_ARGS
+Restart=always
+RestartSec=10
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/telegram_bot/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/telegram_bot/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/telegram_bot/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/telegram_bot/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,29 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from pathlib import Path
+
+MODULE_PATH = Path(__file__).resolve().parent
+
+# repo
+TG_BOT_REPO = "https://github.com/nlef/moonraker-telegram-bot.git"
+
+# names
+TG_BOT_CFG_NAME = "telegram.conf"
+TG_BOT_LOG_NAME = "telegram.log"
+TG_BOT_SERVICE_NAME = "moonraker-telegram-bot.service"
+TG_BOT_ENV_FILE_NAME = "moonraker-telegram-bot.env"
+
+# directories
+TG_BOT_DIR = Path.home().joinpath("moonraker-telegram-bot")
+TG_BOT_ENV = Path.home().joinpath("moonraker-telegram-bot-env")
+
+# files
+TG_BOT_SERVICE_TEMPLATE = MODULE_PATH.joinpath(f"assets/{TG_BOT_SERVICE_NAME}")
+TG_BOT_ENV_FILE_TEMPLATE = MODULE_PATH.joinpath(f"assets/{TG_BOT_ENV_FILE_NAME}")
+TG_BOT_REQ_FILE = TG_BOT_DIR.joinpath("scripts/requirements.txt")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/telegram_bot/metadata.json /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/telegram_bot/metadata.json
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/telegram_bot/metadata.json	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/telegram_bot/metadata.json	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,11 @@
+{
+  "metadata": {
+    "index": 5,
+    "module": "moonraker_telegram_bot_extension",
+    "maintained_by": "nlef",
+    "display_name": "Moonraker Telegram Bot",
+    "description": ["Control your printer with the Telegram messenger app."],
+    "project_url": "https://github.com/nlef/moonraker-telegram-bot",
+    "updates": true
+  }
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/telegram_bot/moonraker_telegram_bot_extension.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/telegram_bot/moonraker_telegram_bot_extension.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/telegram_bot/moonraker_telegram_bot_extension.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/telegram_bot/moonraker_telegram_bot_extension.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,226 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+import shutil
+from subprocess import run
+from typing import List
+
+from components.moonraker.moonraker import Moonraker
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import DialogType, Logger
+from extensions.base_extension import BaseExtension
+from extensions.telegram_bot import TG_BOT_REPO, TG_BOT_REQ_FILE
+from extensions.telegram_bot.moonraker_telegram_bot import (
+    TG_BOT_DIR,
+    TG_BOT_ENV,
+    MoonrakerTelegramBot,
+)
+from utils.common import check_install_dependencies
+from utils.config_utils import add_config_section, remove_config_section
+from utils.fs_utils import remove_file
+from utils.git_utils import git_clone_wrapper, git_pull_wrapper
+from utils.input_utils import get_confirm
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    cmd_sysctl_manage,
+    cmd_sysctl_service,
+    create_python_venv,
+    install_python_requirements,
+    parse_packages_from_file,
+)
+
+
+# noinspection PyMethodMayBeStatic
+class TelegramBotExtension(BaseExtension):
+    def install_extension(self, **kwargs) -> None:
+        Logger.print_status("Installing Moonraker Telegram Bot ...")
+
+        mr_instances: List[Moonraker] = get_instances(Moonraker)
+        if not mr_instances:
+            Logger.print_dialog(
+                DialogType.WARNING,
+                [
+                    "No Moonraker instances found!",
+                    "Moonraker Telegram Bot requires Moonraker to be installed. "
+                    "Please install Moonraker first!",
+                ],
+            )
+            return
+
+        instance_names = [
+            f"● {instance.service_file_path.name}" for instance in mr_instances
+        ]
+        Logger.print_dialog(
+            DialogType.INFO,
+            [
+                "The following Moonraker instances were found:",
+                *instance_names,
+                "\n\n",
+                "The setup will apply the same names to Telegram Bot!",
+            ],
+        )
+        if not get_confirm(
+            "Continue Moonraker Telegram Bot installation?",
+            default_choice=True,
+            allow_go_back=True,
+        ):
+            return
+
+        create_example_cfg = get_confirm("Create example telegram.conf?")
+
+        try:
+            git_clone_wrapper(TG_BOT_REPO, TG_BOT_DIR)
+            self._install_dependencies()
+
+            # create and start services / create bot configs
+            show_config_dialog = False
+            tb_names = [mr_i.suffix for mr_i in mr_instances]
+            for name in tb_names:
+                instance = MoonrakerTelegramBot(suffix=name)
+                instance.create()
+
+                cmd_sysctl_service(instance.service_file_path.name, "enable")
+
+                if create_example_cfg:
+                    Logger.print_status(
+                        f"Creating Telegram Bot config in {instance.base.cfg_dir} ..."
+                    )
+                    template = TG_BOT_DIR.joinpath("scripts/base_install_template")
+                    target_file = instance.cfg_file
+                    if not target_file.exists():
+                        show_config_dialog = True
+                        run(["cp", template, target_file], check=True)
+                    else:
+                        Logger.print_info(
+                            f"Telegram Bot config in {instance.base.cfg_dir} already exists! Skipped ..."
+                        )
+
+                cmd_sysctl_service(instance.service_file_path.name, "start")
+
+            cmd_sysctl_manage("daemon-reload")
+
+            # add to moonraker update manager
+            self._patch_bot_update_manager(mr_instances)
+
+            # restart moonraker
+            InstanceManager.restart_all(mr_instances)
+
+            if show_config_dialog:
+                Logger.print_dialog(
+                    DialogType.ATTENTION,
+                    [
+                        "During the installation of the Moonraker Telegram Bot, "
+                        "a basic config was created per instance. You need to edit the "
+                        "config file to set up your Telegram Bot. Please refer to the "
+                        "following wiki page for further information:",
+                        "https://github.com/nlef/moonraker-telegram-bot/wiki",
+                    ],
+                    margin_bottom=1,
+                )
+
+            Logger.print_ok("Telegram Bot installation complete!")
+        except Exception as e:
+            Logger.print_error(
+                f"Error during installation of Moonraker Telegram Bot:\n{e}"
+            )
+
+    def update_extension(self, **kwargs) -> None:
+        Logger.print_status("Updating Moonraker Telegram Bot ...")
+
+        instances = get_instances(MoonrakerTelegramBot)
+        InstanceManager.stop_all(instances)
+
+        git_pull_wrapper(TG_BOT_REPO, TG_BOT_DIR)
+        self._install_dependencies()
+
+        InstanceManager.start_all(instances)
+
+    def remove_extension(self, **kwargs) -> None:
+        Logger.print_status("Removing Moonraker Telegram Bot ...")
+
+        mr_instances: List[Moonraker] = get_instances(Moonraker)
+        tb_instances: List[MoonrakerTelegramBot] = get_instances(MoonrakerTelegramBot)
+
+        try:
+            self._remove_bot_instances(tb_instances)
+            self._remove_bot_dir()
+            self._remove_bot_env()
+            remove_config_section("update_manager moonraker-telegram-bot", mr_instances)
+            self._delete_bot_logs(tb_instances)
+        except Exception as e:
+            Logger.print_error(f"Error during removal of Moonraker Telegram Bot:\n{e}")
+
+        Logger.print_ok("Moonraker Telegram Bot removed!")
+
+    def _install_dependencies(self) -> None:
+        # install dependencies
+        script = TG_BOT_DIR.joinpath("scripts/install.sh")
+        package_list = parse_packages_from_file(script)
+
+        check_install_dependencies({*package_list})
+
+        # create virtualenv
+        if create_python_venv(TG_BOT_ENV, allow_access_to_system_site_packages=True):
+            install_python_requirements(TG_BOT_ENV, TG_BOT_REQ_FILE)
+
+    def _patch_bot_update_manager(self, instances: List[Moonraker]) -> None:
+        env_py = f"{TG_BOT_ENV}/bin/python"
+        add_config_section(
+            section="update_manager moonraker-telegram-bot",
+            instances=instances,
+            options=[
+                ("type", "git_repo"),
+                ("path", str(TG_BOT_DIR)),
+                ("origin", TG_BOT_REPO),
+                ("env", env_py),
+                ("requirements", "scripts/requirements.txt"),
+                ("install_script", "scripts/install.sh"),
+            ],
+        )
+
+    def _remove_bot_instances(
+        self,
+        instance_list: List[MoonrakerTelegramBot],
+    ) -> None:
+        for instance in instance_list:
+            Logger.print_status(
+                f"Removing instance {instance.service_file_path.stem} ..."
+            )
+            InstanceManager.remove(instance)
+
+    def _remove_bot_dir(self) -> None:
+        if not TG_BOT_DIR.exists():
+            Logger.print_info(f"'{TG_BOT_DIR}' does not exist. Skipped ...")
+            return
+
+        try:
+            shutil.rmtree(TG_BOT_DIR)
+        except OSError as e:
+            Logger.print_error(f"Unable to delete '{TG_BOT_DIR}':\n{e}")
+
+    def _remove_bot_env(self) -> None:
+        if not TG_BOT_ENV.exists():
+            Logger.print_info(f"'{TG_BOT_ENV}' does not exist. Skipped ...")
+            return
+
+        try:
+            shutil.rmtree(TG_BOT_ENV)
+        except OSError as e:
+            Logger.print_error(f"Unable to delete '{TG_BOT_ENV}':\n{e}")
+
+    def _delete_bot_logs(self, instances: List[MoonrakerTelegramBot]) -> None:
+        all_logfiles = []
+        for instance in instances:
+            all_logfiles = list(instance.base.log_dir.glob("telegram_bot.log*"))
+        if not all_logfiles:
+            Logger.print_info("No Moonraker Telegram Bot logs found. Skipped ...")
+            return
+
+        for log in all_logfiles:
+            Logger.print_status(f"Remove '{log}'")
+            remove_file(log)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/telegram_bot/moonraker_telegram_bot.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/telegram_bot/moonraker_telegram_bot.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/extensions/telegram_bot/moonraker_telegram_bot.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/extensions/telegram_bot/moonraker_telegram_bot.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,127 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+from dataclasses import dataclass, field
+from pathlib import Path
+from subprocess import CalledProcessError
+
+from components.moonraker.moonraker import Moonraker
+from core.constants import CURRENT_USER
+from core.instance_manager.base_instance import BaseInstance
+from core.logger import Logger
+from extensions.telegram_bot import (
+    TG_BOT_CFG_NAME,
+    TG_BOT_DIR,
+    TG_BOT_ENV,
+    TG_BOT_ENV_FILE_NAME,
+    TG_BOT_ENV_FILE_TEMPLATE,
+    TG_BOT_LOG_NAME,
+    TG_BOT_SERVICE_TEMPLATE,
+)
+from utils.fs_utils import create_folders
+from utils.sys_utils import get_service_file_path
+
+
+# noinspection PyMethodMayBeStatic
+@dataclass(repr=True)
+class MoonrakerTelegramBot:
+    suffix: str
+    base: BaseInstance = field(init=False, repr=False)
+    service_file_path: Path = field(init=False)
+    log_file_name: str = TG_BOT_LOG_NAME
+    bot_dir: Path = TG_BOT_DIR
+    env_dir: Path = TG_BOT_ENV
+    data_dir: Path = field(init=False)
+    cfg_file: Path = field(init=False)
+
+    def __post_init__(self):
+        self.base: BaseInstance = BaseInstance(Moonraker, self.suffix)
+        self.base.log_file_name = self.log_file_name
+
+        self.service_file_path: Path = get_service_file_path(
+            MoonrakerTelegramBot, self.suffix
+        )
+        self.data_dir: Path = self.base.data_dir
+        self.cfg_file = self.base.cfg_dir.joinpath(TG_BOT_CFG_NAME)
+
+    def create(self) -> None:
+        from utils.sys_utils import create_env_file, create_service_file
+
+        Logger.print_status("Creating new Moonraker Telegram Bot Instance ...")
+
+        try:
+            create_folders(self.base.base_folders)
+            create_service_file(
+                name=self.service_file_path.name,
+                content=self._prep_service_file_content(),
+            )
+            create_env_file(
+                path=self.base.sysd_dir.joinpath(TG_BOT_ENV_FILE_NAME),
+                content=self._prep_env_file_content(),
+            )
+
+        except CalledProcessError as e:
+            Logger.print_error(f"Error creating instance: {e}")
+            raise
+        except OSError as e:
+            Logger.print_error(f"Error creating env file: {e}")
+            raise
+
+    def _prep_service_file_content(self) -> str:
+        template = TG_BOT_SERVICE_TEMPLATE
+
+        try:
+            with open(template, "r") as template_file:
+                template_content = template_file.read()
+        except FileNotFoundError:
+            Logger.print_error(f"Unable to open {template} - File not found")
+            raise
+
+        service_content = template_content.replace(
+            "%USER%",
+            CURRENT_USER,
+        )
+        service_content = service_content.replace(
+            "%TELEGRAM_BOT_DIR%",
+            self.bot_dir.as_posix(),
+        )
+        service_content = service_content.replace(
+            "%ENV%",
+            self.env_dir.as_posix(),
+        )
+        service_content = service_content.replace(
+            "%ENV_FILE%",
+            self.base.sysd_dir.joinpath(TG_BOT_ENV_FILE_NAME).as_posix(),
+        )
+        return service_content
+
+    def _prep_env_file_content(self) -> str:
+        template = TG_BOT_ENV_FILE_TEMPLATE
+
+        try:
+            with open(template, "r") as env_file:
+                env_template_file_content = env_file.read()
+        except FileNotFoundError:
+            Logger.print_error(f"Unable to open {template} - File not found")
+            raise
+
+        env_file_content = env_template_file_content.replace(
+            "%TELEGRAM_BOT_DIR%",
+            self.bot_dir.as_posix(),
+        )
+        env_file_content = env_file_content.replace(
+            "%CFG%",
+            f"{self.base.cfg_dir}/printer.cfg",
+        )
+        env_file_content = env_file_content.replace(
+            "%LOG%",
+            self.base.log_dir.joinpath(self.log_file_name).as_posix(),
+        )
+        return env_file_content
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,15 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+import sys
+from pathlib import Path
+
+PROJECT_ROOT = Path(__file__).resolve().parent.parent
+APPLICATION_ROOT = Path(__file__).resolve().parent
+sys.path.append(str(APPLICATION_ROOT))
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/main.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/main.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/main.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/main.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,20 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from core.logger import Logger
+from core.menus.main_menu import MainMenu
+from core.settings.kiauh_settings import KiauhSettings
+
+
+def main() -> None:
+    try:
+        KiauhSettings()
+        MainMenu().run()
+    except KeyboardInterrupt:
+        Logger.print_ok("\nHappy printing!\n", prefix=False)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/procedures/switch_repo.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/procedures/switch_repo.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/procedures/switch_repo.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/procedures/switch_repo.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,154 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import shutil
+from pathlib import Path
+from typing import Literal
+
+from components.klipper import (
+    KLIPPER_BACKUP_DIR,
+    KLIPPER_DIR,
+    KLIPPER_ENV_DIR,
+    KLIPPER_REQ_FILE,
+)
+from components.klipper.klipper import Klipper
+from components.klipper.klipper_setup import install_klipper_packages
+from components.moonraker import (
+    MOONRAKER_BACKUP_DIR,
+    MOONRAKER_DIR,
+    MOONRAKER_ENV_DIR,
+    MOONRAKER_REQ_FILE,
+)
+from components.moonraker.moonraker import Moonraker
+from components.moonraker.moonraker_setup import install_moonraker_packages
+from core.backup_manager.backup_manager import BackupManager, BackupManagerException
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import Logger
+from core.settings.kiauh_settings import RepoSettings
+from utils.git_utils import GitException, get_repo_name, git_clone_wrapper
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    VenvCreationFailedException,
+    create_python_venv,
+    install_python_requirements,
+)
+
+
+class RepoSwitchFailedException(Exception):
+    pass
+
+
+def run_switch_repo_routine(
+    name: Literal["klipper", "moonraker"], repo_settings: RepoSettings
+) -> None:
+    repo_dir: Path = KLIPPER_DIR if name == "klipper" else MOONRAKER_DIR
+    env_dir: Path = KLIPPER_ENV_DIR if name == "klipper" else MOONRAKER_ENV_DIR
+    req_file = KLIPPER_REQ_FILE if name == "klipper" else MOONRAKER_REQ_FILE
+    backup_dir: Path = KLIPPER_BACKUP_DIR if name == "klipper" else MOONRAKER_BACKUP_DIR
+    _type = Klipper if name == "klipper" else Moonraker
+
+    # step 1: stop all instances
+    Logger.print_status(f"Stopping all {_type.__name__} instances ...")
+    instances = get_instances(_type)
+    InstanceManager.stop_all(instances)
+
+    repo_dir_backup_path: Path | None = None
+    env_dir_backup_path: Path | None = None
+
+    try:
+        # step 2: backup old repo and env
+        org, repo = get_repo_name(repo_dir)
+        backup_dir = backup_dir.joinpath(org)
+        bm = BackupManager()
+        repo_dir_backup_path = bm.backup_directory(
+            repo_dir.name,
+            repo_dir,
+            backup_dir,
+        )
+        env_dir_backup_path = bm.backup_directory(
+            env_dir.name,
+            env_dir,
+            backup_dir,
+        )
+
+        # step 3: read repo url and branch from settings
+        repo_url = repo_settings.repo_url
+        branch = repo_settings.branch
+
+        if not (repo_url or branch):
+            error = f"Invalid repository URL ({repo_url}) or branch ({branch})!"
+            raise ValueError(error)
+
+        # step 4: clone new repo
+        git_clone_wrapper(repo_url, repo_dir, branch, force=True)
+
+        # step 5: install os dependencies
+        if name == "klipper":
+            install_klipper_packages()
+        elif name == "moonraker":
+            install_moonraker_packages()
+
+        # step 6: recreate python virtualenv
+        Logger.print_status(f"Recreating {_type.__name__} virtualenv ...")
+        if not create_python_venv(env_dir, force=True):
+            raise GitException(f"Failed to recreate virtualenv for {_type.__name__}")
+        else:
+            install_python_requirements(env_dir, req_file)
+
+        Logger.print_ok(f"Switched to {repo_url} at branch {branch}!")
+
+    except BackupManagerException as e:
+        Logger.print_error(f"Error during backup of repository: {e}")
+        raise RepoSwitchFailedException(e)
+
+    except (GitException, VenvCreationFailedException) as e:
+        # if something goes wrong during cloning or recreating the virtualenv,
+        # we restore the backup of the repo and env
+        Logger.print_error(f"Error during repository switch: {e}", start="\n")
+        Logger.print_status(f"Restoring last backup of {_type.__name__} ...")
+        _restore_repo_backup(
+            _type.__name__,
+            env_dir,
+            env_dir_backup_path,
+            repo_dir,
+            repo_dir_backup_path,
+        )
+
+    except RepoSwitchFailedException as e:
+        Logger.print_error(f"Something went wrong: {e}")
+        return
+
+    Logger.print_status(f"Restarting all {_type.__name__} instances ...")
+    InstanceManager.start_all(instances)
+
+
+def _restore_repo_backup(
+    name: str,
+    env_dir: Path,
+    env_dir_backup_path: Path | None,
+    repo_dir: Path,
+    repo_dir_backup_path: Path | None,
+) -> None:
+    # if repo_dir_backup_path is not None and env_dir_backup_path is not None:
+    if not repo_dir_backup_path or not env_dir_backup_path:
+        raise RepoSwitchFailedException(
+            f"Unable to restore backup of {name}! Path of backups directory is None!"
+        )
+
+    try:
+        if repo_dir.exists():
+            shutil.rmtree(repo_dir)
+            shutil.copytree(repo_dir_backup_path, repo_dir)
+        if env_dir.exists():
+            shutil.rmtree(env_dir)
+            shutil.copytree(env_dir_backup_path, env_dir)
+        Logger.print_warn(f"Restored backup of {name} successfully!")
+    except Exception as e:
+        raise RepoSwitchFailedException(f"Error restoring backup: {e}")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/procedures/system.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/procedures/system.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/procedures/system.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/procedures/system.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,103 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+from subprocess import PIPE, CalledProcessError, run
+
+from core.logger import DialogType, Logger
+from utils.common import check_install_dependencies, get_current_date
+from utils.fs_utils import check_file_exist
+from utils.input_utils import get_confirm, get_string_input
+
+
+def change_system_hostname() -> None:
+    """
+    Procedure to change the system hostname.
+    :return:
+    """
+
+    Logger.print_dialog(
+        DialogType.CUSTOM,
+        [
+            "Changing the hostname of this system allows you to access an installed "
+            "webinterface by simply typing the hostname like this in the browser:",
+            "\n\n",
+            "http://<hostname>.local",
+            "\n\n",
+            "Example: If you set your hostname to 'my-printer', you can access an "
+            "installed webinterface by tyoing 'http://my-printer.local' in the "
+            "browser.",
+        ],
+        custom_title="CHANGE SYSTEM HOSTNAME",
+    )
+    if not get_confirm("Do you want to change the hostname?", default_choice=False):
+        return
+
+    Logger.print_dialog(
+        DialogType.CUSTOM,
+        [
+            "Allowed characters: a-z, 0-9 and '-'",
+            "The name must not contain the following:",
+            "\n\n",
+            "● Any special characters",
+            "● No leading or trailing '-'",
+        ],
+    )
+    hostname = get_string_input(
+        "Enter the new hostname",
+        regex="^[a-z0-9]+([a-z0-9-]*[a-z0-9])?$",
+    )
+    if not get_confirm(f"Change the hostname to '{hostname}'?", default_choice=False):
+        Logger.print_info("Aborting hostname change ...")
+        return
+
+    try:
+        Logger.print_status("Changing hostname ...")
+
+        Logger.print_status("Checking for dependencies ...")
+        check_install_dependencies({"avahi-daemon"}, include_global=False)
+
+        # create or backup hosts file
+        Logger.print_status("Creating backup of hosts file ...")
+        hosts_file = Path("/etc/hosts")
+        if not check_file_exist(hosts_file, True):
+            cmd = ["sudo", "touch", hosts_file.as_posix()]
+            run(cmd, stderr=PIPE, check=True)
+        else:
+            date_time = get_current_date()
+            name = f"hosts.{date_time.get('date')}-{date_time.get('time')}.bak"
+            hosts_file_backup = Path(f"/etc/{name}")
+            cmd = [
+                "sudo",
+                "cp",
+                hosts_file.as_posix(),
+                hosts_file_backup.as_posix(),
+            ]
+            run(cmd, stderr=PIPE, check=True)
+        Logger.print_ok()
+
+        # call hostnamectl set-hostname <hostname>
+        Logger.print_status(f"Setting hostname to '{hostname}' ...")
+        cmd = ["sudo", "hostnamectl", "set-hostname", hostname]
+        run(cmd, stderr=PIPE, check=True)
+        Logger.print_ok()
+
+        # add hostname to hosts file at the end of the file
+        Logger.print_status("Writing new hostname to /etc/hosts ...")
+        stdin = f"127.0.0.1       {hostname}\n"
+        cmd = ["sudo", "tee", "-a", hosts_file.as_posix()]
+        run(cmd, input=stdin.encode(), stderr=PIPE, stdout=PIPE, check=True)
+        Logger.print_ok()
+
+        Logger.print_ok("New hostname successfully configured!")
+        Logger.print_ok("Remember to reboot for the changes to take effect!\n")
+
+    except CalledProcessError as e:
+        Logger.print_error(f"Error during change hostname procedure: {e}")
+        return
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/common.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/common.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/common.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/common.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,185 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import re
+from datetime import datetime
+from pathlib import Path
+from typing import Dict, List, Literal, Optional, Set
+
+from components.klipper.klipper import Klipper
+from core.constants import (
+    COLOR_CYAN,
+    GLOBAL_DEPS,
+    PRINTER_CFG_BACKUP_DIR,
+    RESET_FORMAT,
+)
+from core.logger import DialogType, Logger
+from core.types import ComponentStatus, StatusCode
+from utils.git_utils import (
+    get_local_commit,
+    get_local_tags,
+    get_remote_commit,
+    get_repo_name,
+)
+from utils.instance_utils import get_instances
+from utils.sys_utils import (
+    check_package_install,
+    install_system_packages,
+    update_system_package_lists,
+)
+
+
+def get_kiauh_version() -> str:
+    """
+    Helper method to get the current KIAUH version by reading the latest tag
+    :return: string of the latest tag
+    """
+    return get_local_tags(Path(__file__).parent.parent)[-1]
+
+
+def convert_camelcase_to_kebabcase(name: str) -> str:
+    return re.sub(r"(?<!^)(?=[A-Z])", "-", name).lower()
+
+
+def get_current_date() -> Dict[Literal["date", "time"], str]:
+    """
+    Get the current date |
+    :return: Dict holding a date and time key:value pair
+    """
+    now: datetime = datetime.today()
+    date: str = now.strftime("%Y%m%d")
+    time: str = now.strftime("%H%M%S")
+
+    return {"date": date, "time": time}
+
+
+def check_install_dependencies(
+    deps: Set[str] | None = None, include_global: bool = True
+) -> None:
+    """
+    Common helper method to check if dependencies are installed
+    and if not, install them automatically |
+    :param include_global: Wether to include the global dependencies or not
+    :param deps: List of strings of package names to check if installed
+    :return: None
+    """
+    if deps is None:
+        deps = set()
+
+    if include_global:
+        deps.update(GLOBAL_DEPS)
+
+    requirements = check_package_install(deps)
+    if requirements:
+        Logger.print_status("Installing dependencies ...")
+        Logger.print_info("The following packages need installation:")
+        for r in requirements:
+            print(f"{COLOR_CYAN}● {r}{RESET_FORMAT}")
+        update_system_package_lists(silent=False)
+        install_system_packages(requirements)
+
+
+def get_install_status(
+    repo_dir: Path,
+    env_dir: Optional[Path] = None,
+    instance_type: type | None = None,
+    files: Optional[List[Path]] = None,
+) -> ComponentStatus:
+    """
+    Helper method to get the installation status of software components
+    :param repo_dir: the repository directory
+    :param env_dir: the python environment directory
+    :param instance_type: The component type
+    :param files: List of optional files to check for existence
+    :return: Dictionary with status string, statuscode and instance count
+    """
+    from utils.instance_utils import get_instances
+
+    checks = [repo_dir.exists()]
+
+    if env_dir is not None:
+        checks.append(env_dir.exists())
+
+    instances = 0
+    if instance_type is not None:
+        instances = len(get_instances(instance_type))
+        checks.append(instances > 0)
+
+    if files is not None:
+        for f in files:
+            checks.append(f.exists())
+
+    status: StatusCode
+    if all(checks):
+        status = 2  # installed
+    elif not any(checks):
+        status = 0  # not installed
+    else:
+        status = 1  # incomplete
+
+    org, repo = get_repo_name(repo_dir)
+    return ComponentStatus(
+        status=status,
+        instances=instances,
+        owner=org,
+        repo=repo,
+        local=get_local_commit(repo_dir),
+        remote=get_remote_commit(repo_dir),
+    )
+
+
+def backup_printer_config_dir() -> None:
+    # local import to prevent circular import
+    from core.backup_manager.backup_manager import BackupManager
+
+    instances: List[Klipper] = get_instances(Klipper)
+    bm = BackupManager()
+
+    for instance in instances:
+        name = f"config-{instance.data_dir.name}"
+        bm.backup_directory(
+            name,
+            source=instance.base.cfg_dir,
+            target=PRINTER_CFG_BACKUP_DIR,
+        )
+
+
+def moonraker_exists(name: str = "") -> bool:
+    """
+    Helper method to check if a Moonraker instance exists
+    :param name: Optional name of an installer where the check is performed
+    :return: True if at least one Moonraker instance exists, False otherwise
+    """
+    from components.moonraker.moonraker import Moonraker
+
+    mr_instances: List[Moonraker] = get_instances(Moonraker)
+
+    info = (
+        f"{name} requires Moonraker to be installed"
+        if name
+        else "A Moonraker installation is required"
+    )
+
+    if not mr_instances:
+        Logger.print_dialog(
+            DialogType.WARNING,
+            [
+                "No Moonraker instances found!",
+                f"{info}. Please install Moonraker first!",
+            ],
+        )
+        return False
+    return True
+
+
+def trunc_string(input_str: str, length: int) -> str:
+    if len(input_str) > length:
+        return f"{input_str[:length - 3]}..."
+    return input_str
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/config_utils.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/config_utils.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/config_utils.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/config_utils.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,95 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import tempfile
+from pathlib import Path
+from typing import List, Tuple
+
+from core.logger import Logger
+from core.submodules.simple_config_parser.src.simple_config_parser.simple_config_parser import (
+    SimpleConfigParser,
+)
+from utils.instance_type import InstanceType
+
+ConfigOption = Tuple[str, str]
+
+
+def add_config_section(
+    section: str,
+    instances: List[InstanceType],
+    options: List[ConfigOption] | None = None,
+) -> None:
+    for instance in instances:
+        cfg_file = instance.cfg_file
+        Logger.print_status(f"Add section '[{section}]' to '{cfg_file}' ...")
+
+        if not Path(cfg_file).exists():
+            Logger.print_warn(f"'{cfg_file}' not found!")
+            continue
+
+        scp = SimpleConfigParser()
+        scp.read_file(cfg_file)
+        if scp.has_section(section):
+            Logger.print_info("Section already exist. Skipped ...")
+            continue
+
+        scp.add_section(section)
+
+        if options is not None:
+            for option in reversed(options):
+                scp.set_option(section, option[0], option[1])
+
+        scp.write_file(cfg_file)
+
+        Logger.print_ok("OK!")
+
+
+def add_config_section_at_top(section: str, instances: List[InstanceType]) -> None:
+    # TODO: this could be implemented natively in SimpleConfigParser
+    for instance in instances:
+        tmp_cfg = tempfile.NamedTemporaryFile(mode="w", delete=False)
+        tmp_cfg_path = Path(tmp_cfg.name)
+        scp = SimpleConfigParser()
+        scp.read_file(tmp_cfg_path)
+        scp.add_section(section)
+        scp.write_file(tmp_cfg_path)
+        tmp_cfg.close()
+
+        cfg_file = instance.cfg_file
+        with open(cfg_file, "r") as org:
+            org_content = org.readlines()
+        with open(tmp_cfg_path, "a") as tmp:
+            tmp.writelines(org_content)
+
+        cfg_file.unlink()
+        tmp_cfg_path.rename(cfg_file)
+
+        Logger.print_ok("OK!")
+
+
+def remove_config_section(section: str, instances: List[InstanceType]) -> None:
+    for instance in instances:
+        cfg_file = instance.cfg_file
+        Logger.print_status(f"Remove section '[{section}]' from '{cfg_file}' ...")
+
+        if not Path(cfg_file).exists():
+            Logger.print_warn(f"'{cfg_file}' not found!")
+            continue
+
+        scp = SimpleConfigParser()
+        scp.read_file(cfg_file)
+        if not scp.has_section(section):
+            Logger.print_info("Section does not exist. Skipped ...")
+            continue
+
+        scp.remove_section(section)
+        scp.write_file(cfg_file)
+
+        Logger.print_ok("OK!")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/fs_utils.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/fs_utils.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/fs_utils.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/fs_utils.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,142 @@
+#!/usr/bin/env python3
+
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import re
+import shutil
+from pathlib import Path
+from subprocess import DEVNULL, PIPE, CalledProcessError, check_output, run
+from typing import List
+from zipfile import ZipFile
+
+from core.decorators import deprecated
+from core.logger import Logger
+
+
+def check_file_exist(file_path: Path, sudo=False) -> bool:
+    """
+    Helper function for checking the existence of a file |
+    :param file_path: the absolute path of the file to check
+    :param sudo: use sudo if required
+    :return: True, if file exists, otherwise False
+    """
+    if sudo:
+        try:
+            command = ["sudo", "find", file_path.as_posix()]
+            check_output(command, stderr=DEVNULL)
+            return True
+        except CalledProcessError:
+            return False
+    else:
+        if file_path.exists():
+            return True
+        else:
+            return False
+
+
+def create_symlink(source: Path, target: Path, sudo=False) -> None:
+    try:
+        cmd = ["ln", "-sf", source.as_posix(), target.as_posix()]
+        if sudo:
+            cmd.insert(0, "sudo")
+        run(cmd, stderr=PIPE, check=True)
+    except CalledProcessError as e:
+        Logger.print_error(f"Failed to create symlink: {e}")
+        raise
+
+
+def remove_with_sudo(file: Path) -> None:
+    try:
+        cmd = ["sudo", "rm", "-rf", file.as_posix()]
+        run(cmd, stderr=PIPE, check=True)
+    except CalledProcessError as e:
+        Logger.print_error(f"Failed to remove {file}: {e}")
+        raise
+
+
+@deprecated(info="Use remove_with_sudo instead", replaced_by=remove_with_sudo)
+def remove_file(file_path: Path, sudo=False) -> None:
+    try:
+        cmd = f"{'sudo ' if sudo else ''}rm -f {file_path}"
+        run(cmd, stderr=PIPE, check=True, shell=True)
+    except CalledProcessError as e:
+        log = f"Cannot remove file {file_path}: {e.stderr.decode()}"
+        Logger.print_error(log)
+        raise
+
+
+def run_remove_routines(file: Path) -> None:
+    try:
+        if not file.is_symlink() and not file.exists():
+            Logger.print_info(f"File '{file}' does not exist. Skipped ...")
+            return
+
+        if file.is_dir():
+            shutil.rmtree(file)
+        elif file.is_file() or file.is_symlink():
+            file.unlink()
+        else:
+            raise OSError(f"File '{file}' is neither a file nor a directory!")
+        Logger.print_ok(f"File '{file}' was successfully removed!")
+    except OSError as e:
+        Logger.print_error(f"Unable to delete '{file}':\n{e}")
+        try:
+            Logger.print_info("Trying to remove with sudo ...")
+            remove_with_sudo(file)
+            Logger.print_ok(f"File '{file}' was successfully removed!")
+        except CalledProcessError as e:
+            Logger.print_error(f"Error deleting '{file}' with sudo:\n{e}")
+            Logger.print_error("Remove this directory manually!")
+
+
+def unzip(filepath: Path, target_dir: Path) -> None:
+    """
+    Helper function to unzip a zip-archive into a target directory |
+    :param filepath: the path to the zip-file to unzip
+    :param target_dir: the target directory to extract the files into
+    :return: None
+    """
+    with ZipFile(filepath, "r") as _zip:
+        _zip.extractall(target_dir)
+
+
+def create_folders(dirs: List[Path]) -> None:
+    try:
+        for _dir in dirs:
+            if _dir.exists():
+                continue
+            _dir.mkdir(exist_ok=True)
+            Logger.print_ok(f"Created directory '{_dir}'!")
+    except OSError as e:
+        Logger.print_error(f"Error creating directories: {e}")
+        raise
+
+
+def get_data_dir(instance_type: type, suffix: str) -> Path:
+    from utils.sys_utils import get_service_file_path
+
+    # if the service file exists, we read the data dir path from it
+    # this also ensures compatibility with pre v6.0.0 instances
+    service_file_path: Path = get_service_file_path(instance_type, suffix)
+    if service_file_path and service_file_path.exists():
+        with open(service_file_path, "r") as service_file:
+            lines = service_file.readlines()
+            for line in lines:
+                pattern = r"^EnvironmentFile=(.+)(/systemd/.+\.env)"
+                match = re.search(pattern, line)
+                if match:
+                    return Path(match.group(1))
+
+    if suffix != "":
+        # this is the new data dir naming scheme introduced in v6.0.0
+        return Path.home().joinpath(f"printer_{suffix}_data")
+
+    return Path.home().joinpath("printer_data")
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/git_utils.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/git_utils.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/git_utils.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/git_utils.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,295 @@
+from __future__ import annotations
+
+import json
+import shutil
+import urllib.request
+from http.client import HTTPResponse
+from json import JSONDecodeError
+from pathlib import Path
+from subprocess import DEVNULL, PIPE, CalledProcessError, check_output, run
+from typing import List, Type
+
+from core.instance_manager.instance_manager import InstanceManager
+from core.logger import Logger
+from utils.input_utils import get_confirm, get_number_input
+from utils.instance_type import InstanceType
+from utils.instance_utils import get_instances
+
+
+class GitException(Exception):
+    pass
+
+
+def git_clone_wrapper(
+    repo: str, target_dir: Path, branch: str | None = None, force: bool = False
+) -> None:
+    """
+    Clones a repository from the given URL and checks out the specified branch if given.
+
+    :param repo: The URL of the repository to clone.
+    :param branch: The branch to check out. If None, the default branch will be checked out.
+    :param target_dir: The directory where the repository will be cloned.
+    :param force: Force the cloning of the repository even if it already exists.
+    :return: None
+    """
+    log = f"Cloning repository from '{repo}'"
+    Logger.print_status(log)
+    try:
+        if Path(target_dir).exists():
+            question = f"'{target_dir}' already exists. Overwrite?"
+            if not force and not get_confirm(question, default_choice=False):
+                Logger.print_info("Skip cloning of repository ...")
+                return
+            shutil.rmtree(target_dir)
+
+        git_cmd_clone(repo, target_dir)
+        git_cmd_checkout(branch, target_dir)
+    except CalledProcessError:
+        log = "An unexpected error occured during cloning of the repository."
+        Logger.print_error(log)
+        raise GitException(log)
+    except OSError as e:
+        Logger.print_error(f"Error removing existing repository: {e.strerror}")
+        raise GitException(f"Error removing existing repository: {e.strerror}")
+
+
+def git_pull_wrapper(repo: str, target_dir: Path) -> None:
+    """
+    A function that updates a repository using git pull.
+
+    :param repo: The repository to update.
+    :param target_dir: The directory of the repository.
+    :return: None
+    """
+    Logger.print_status(f"Updating repository '{repo}' ...")
+    try:
+        git_cmd_pull(target_dir)
+    except CalledProcessError:
+        log = "An unexpected error occured during updating the repository."
+        Logger.print_error(log)
+        return
+
+
+def get_repo_name(repo: Path) -> tuple[str, str] | None:
+    """
+    Helper method to extract the organisation and name of a repository |
+    :param repo: repository to extract the values from
+    :return: String in form of "<orga>/<name>" or None
+    """
+    if not repo.exists() or not repo.joinpath(".git").exists():
+        return "-", "-"
+
+    try:
+        cmd = ["git", "-C", repo.as_posix(), "config", "--get", "remote.origin.url"]
+        result: str = check_output(cmd, stderr=DEVNULL).decode(encoding="utf-8")
+        substrings: List[str] = result.strip().split("/")[-2:]
+        return substrings[0], substrings[1]
+
+        # return "/".join(substrings).replace(".git", "")
+    except CalledProcessError:
+        return None
+
+
+def get_local_tags(repo_path: Path, _filter: str | None = None) -> List[str]:
+    """
+    Get all tags of a local Git repository
+    :param repo_path: Path to the local Git repository
+    :param _filter: Optional filter to filter the tags by
+    :return: List of tags
+    """
+    try:
+        cmd = ["git", "tag", "-l"]
+
+        if _filter is not None:
+            cmd.append(f"'${_filter}'")
+
+        result: str = check_output(
+            cmd,
+            stderr=DEVNULL,
+            cwd=repo_path.as_posix(),
+        ).decode(encoding="utf-8")
+
+        tags = result.split("\n")
+        return tags[:-1]
+
+    except CalledProcessError:
+        return []
+
+
+def get_remote_tags(repo_path: str) -> List[str]:
+    """
+    Gets the tags of a GitHub repostiory
+    :param repo_path: path of the GitHub repository - e.g. `<owner>/<name>`
+    :return: List of tags
+    """
+    try:
+        url = f"https://api.github.com/repos/{repo_path}/tags"
+        with urllib.request.urlopen(url) as r:
+            response: HTTPResponse = r
+            if response.getcode() != 200:
+                Logger.print_error(
+                    f"Error retrieving tags: HTTP status code {response.getcode()}"
+                )
+                return []
+
+            data = json.loads(response.read())
+            return [item["name"] for item in data]
+    except (JSONDecodeError, TypeError) as e:
+        Logger.print_error(f"Error while processing the response: {e}")
+        raise
+
+
+def get_latest_remote_tag(repo_path: str) -> str:
+    """
+    Gets the latest stable tag of a GitHub repostiory
+    :param repo_path: path of the GitHub repository - e.g. `<owner>/<name>`
+    :return: tag or empty string
+    """
+    try:
+        if len(latest_tag := get_remote_tags(repo_path)) > 0:
+            return latest_tag[0]
+        else:
+            return ""
+    except Exception:
+        raise
+
+
+def get_latest_unstable_tag(repo_path: str) -> str:
+    """
+    Gets the latest unstable (alpha, beta, rc) tag of a GitHub repository
+    :param repo_path: path of the GitHub repository - e.g. `<owner>/<name>`
+    :return: tag or empty string
+    """
+    try:
+        if (
+            len(unstable_tags := [t for t in get_remote_tags(repo_path) if "-" in t])
+            > 0
+        ):
+            return unstable_tags[0]
+        else:
+            return ""
+    except Exception:
+        Logger.print_error("Error while getting the latest unstable tag")
+        raise
+
+
+def compare_semver_tags(tag1: str, tag2: str) -> bool:
+    """
+    Compare two semver version strings.
+    Does not support comparing pre-release versions (e.g. 1.0.0-rc.1, 1.0.0-beta.1)
+    :param tag1: First version string
+    :param tag2: Second version string
+    :return: True if tag1 is greater than tag2, False otherwise
+    """
+    if tag1 == tag2:
+        return False
+
+    def parse_version(v):
+        return list(map(int, v[1:].split(".")))
+
+    tag1_parts = parse_version(tag1)
+    tag2_parts = parse_version(tag2)
+
+    max_len = max(len(tag1_parts), len(tag2_parts))
+    tag1_parts += [0] * (max_len - len(tag1_parts))
+    tag2_parts += [0] * (max_len - len(tag2_parts))
+
+    for part1, part2 in zip(tag1_parts, tag2_parts):
+        if part1 != part2:
+            return part1 > part2
+
+    return False
+
+
+def get_local_commit(repo: Path) -> str | None:
+    if not repo.exists() or not repo.joinpath(".git").exists():
+        return None
+
+    try:
+        cmd = f"cd {repo} && git describe HEAD --always --tags | cut -d '-' -f 1,2"
+        return check_output(cmd, shell=True, text=True).strip()
+    except CalledProcessError:
+        return None
+
+
+def get_remote_commit(repo: Path) -> str | None:
+    if not repo.exists() or not repo.joinpath(".git").exists():
+        return None
+
+    try:
+        # get locally checked out branch
+        branch_cmd = f"cd {repo} && git branch | grep -E '\*'"
+        branch = check_output(branch_cmd, shell=True, text=True)
+        branch = branch.split("*")[-1].strip()
+        cmd = f"cd {repo} && git describe 'origin/{branch}' --always --tags | cut -d '-' -f 1,2"
+        return check_output(cmd, shell=True, text=True).strip()
+    except CalledProcessError:
+        return None
+
+
+def git_cmd_clone(repo: str, target_dir: Path) -> None:
+    try:
+        command = ["git", "clone", repo, target_dir.as_posix()]
+        run(command, check=True)
+
+        Logger.print_ok("Clone successful!")
+    except CalledProcessError as e:
+        error = e.stderr.decode() if e.stderr else "Unknown error"
+        log = f"Error cloning repository {repo}: {error}"
+        Logger.print_error(log)
+        raise
+
+
+def git_cmd_checkout(branch: str | None, target_dir: Path) -> None:
+    if branch is None:
+        return
+
+    try:
+        command = ["git", "checkout", f"{branch}"]
+        run(command, cwd=target_dir, check=True)
+
+        Logger.print_ok("Checkout successful!")
+    except CalledProcessError as e:
+        log = f"Error checking out branch {branch}: {e.stderr.decode()}"
+        Logger.print_error(log)
+        raise
+
+
+def git_cmd_pull(target_dir: Path) -> None:
+    try:
+        command = ["git", "pull"]
+        run(command, cwd=target_dir, check=True)
+    except CalledProcessError as e:
+        log = f"Error on git pull: {e.stderr.decode()}"
+        Logger.print_error(log)
+        raise
+
+
+def rollback_repository(repo_dir: Path, instance: Type[InstanceType]) -> None:
+    q1 = "How many commits do you want to roll back"
+    amount = get_number_input(q1, 1, allow_go_back=True)
+
+    instances = get_instances(instance)
+
+    Logger.print_warn("Do not continue if you have ongoing prints!", start="\n")
+    Logger.print_warn(
+        f"All currently running {instance.__name__} services will be stopped!"
+    )
+    if not get_confirm(
+        f"Roll back {amount} commit{'s' if amount > 1 else ''}",
+        default_choice=False,
+        allow_go_back=True,
+    ):
+        Logger.print_info("Aborting roll back ...")
+        return
+
+    InstanceManager.stop_all(instances)
+
+    try:
+        cmd = ["git", "reset", "--hard", f"HEAD~{amount}"]
+        run(cmd, cwd=repo_dir, check=True, stdout=PIPE, stderr=PIPE)
+        Logger.print_ok(f"Rolled back {amount} commits!", start="\n")
+    except CalledProcessError as e:
+        Logger.print_error(f"An error occured during repo rollback:\n{e}")
+
+    InstanceManager.start_all(instances)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/__init__.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/__init__.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/__init__.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/__init__.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,12 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from pathlib import Path
+
+MODULE_PATH = Path(__file__).resolve().parent
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/input_utils.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/input_utils.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/input_utils.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/input_utils.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,172 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import re
+from typing import Dict, List
+
+from core.constants import COLOR_CYAN, INVALID_CHOICE, RESET_FORMAT
+from core.logger import Logger
+
+
+def get_confirm(question: str, default_choice=True, allow_go_back=False) -> bool | None:
+    """
+    Helper method for validating confirmation (yes/no) user input. |
+    :param question: The question to display
+    :param default_choice: A default if input was submitted without input
+    :param allow_go_back: Navigate back to a previous dialog
+    :return: Either True or False, or None on go_back
+    """
+    options_confirm = ["y", "yes"]
+    options_decline = ["n", "no"]
+    options_go_back = ["b", "B"]
+
+    if default_choice:
+        def_choice = "(Y/n)"
+        options_confirm.append("")
+    else:
+        def_choice = "(y/N)"
+        options_decline.append("")
+
+    while True:
+        choice = (
+            input(format_question(question + f" {def_choice}", None)).strip().lower()
+        )
+
+        if choice in options_confirm:
+            return True
+        elif choice in options_decline:
+            return False
+        elif allow_go_back and choice in options_go_back:
+            return None
+        else:
+            Logger.print_error(INVALID_CHOICE)
+
+
+def get_number_input(
+    question: str,
+    min_count: int,
+    max_count: int | None = None,
+    default: int | None = None,
+    allow_go_back: bool = False,
+) -> int | None:
+    """
+    Helper method to get a number input from the user
+    :param question: The question to display
+    :param min_count: The lowest allowed value
+    :param max_count: The highest allowed value (or None)
+    :param default: Optional default value
+    :param allow_go_back: Navigate back to a previous dialog
+    :return: Either the validated number input, or None on go_back
+    """
+    options_go_back = ["b", "B"]
+    _question = format_question(question, default)
+    while True:
+        _input = input(_question)
+        if allow_go_back and _input in options_go_back:
+            return None
+
+        if _input == "" and default is not None:
+            return default
+
+        try:
+            return validate_number_input(_input, min_count, max_count)
+        except ValueError:
+            Logger.print_error(INVALID_CHOICE)
+
+
+def get_string_input(
+    question: str,
+    regex: str | None = None,
+    exclude: List[str] | None = None,
+    allow_special_chars: bool = False,
+    default: str | None = None,
+) -> str:
+    """
+    Helper method to get a string input from the user
+    :param question: The question to display
+    :param regex: An optional regex pattern to validate the input against
+    :param exclude: List of strings which are not allowed
+    :param allow_special_chars: Wheter to allow special characters in the input
+    :param default: Optional default value
+    :return: The validated string value
+    """
+    _exclude = [] if exclude is None else exclude
+    _question = format_question(question, default)
+    _pattern = re.compile(regex) if regex is not None else None
+    while True:
+        _input = input(_question)
+
+        if _input.lower() in _exclude:
+            Logger.print_error("This value is already in use/reserved.")
+        elif default is not None and _input == "":
+            return default
+        elif _pattern is not None and _pattern.match(_input):
+            return _input
+        elif allow_special_chars:
+            return _input
+        elif not allow_special_chars and _input.isalnum():
+            return _input
+        else:
+            Logger.print_error(INVALID_CHOICE)
+
+
+def get_selection_input(question: str, option_list: List | Dict, default=None) -> str:
+    """
+    Helper method to get a selection from a list of options from the user
+    :param question: The question to display
+    :param option_list: The list of options the user can select from
+    :param default: Optional default value
+    :return: The option that was selected by the user
+    """
+    while True:
+        _input = input(format_question(question, default)).strip().lower()
+
+        if isinstance(option_list, list):
+            if _input in option_list:
+                return _input
+        elif isinstance(option_list, dict):
+            if _input in option_list.keys():
+                return _input
+        else:
+            raise ValueError("Invalid option_list type")
+
+        Logger.print_error("Invalid option! Please select a valid option.", False)
+
+
+def format_question(question: str, default=None) -> str:
+    """
+    Helper method to have a standardized formatting of questions |
+    :param question: The question to display
+    :param default: If defined, the default option will be displayed to the user
+    :return: The formatted question string
+    """
+    formatted_q = question
+    if default is not None:
+        formatted_q += f" (default={default})"
+
+    return f"{COLOR_CYAN}###### {formatted_q}: {RESET_FORMAT}"
+
+
+def validate_number_input(value: str, min_count: int, max_count: int | None) -> int:
+    """
+    Helper method for a simple number input validation. |
+    :param value: The value to validate
+    :param min_count: The lowest allowed value
+    :param max_count: The highest allowed value (or None)
+    :return: The validated value as Integer
+    :raises: ValueError if value is invalid
+    """
+    if max_count is not None:
+        if min_count <= int(value) <= max_count:
+            return int(value)
+    elif int(value) >= min_count:
+        return int(value)
+
+    raise ValueError
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/instance_type.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/instance_type.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/instance_type.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/instance_type.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,27 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from typing import TypeVar
+
+from components.klipper.klipper import Klipper
+from components.moonraker.moonraker import Moonraker
+from extensions.obico.moonraker_obico import MoonrakerObico
+from extensions.octoeverywhere.octoeverywhere import Octoeverywhere
+from extensions.octoapp.octoapp import Octoapp
+from extensions.telegram_bot.moonraker_telegram_bot import MoonrakerTelegramBot
+
+InstanceType = TypeVar(
+    "InstanceType",
+    Klipper,
+    Moonraker,
+    MoonrakerTelegramBot,
+    MoonrakerObico,
+    Octoeverywhere,
+    Octoapp,
+)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/instance_utils.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/instance_utils.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/instance_utils.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/instance_utils.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,56 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import re
+from pathlib import Path
+from typing import List
+
+from core.constants import SYSTEMD
+from core.instance_manager.base_instance import SUFFIX_BLACKLIST
+from utils.instance_type import InstanceType
+
+
+def get_instances(instance_type: type, suffix_blacklist: List[str] = SUFFIX_BLACKLIST) -> List[InstanceType]:
+    from utils.common import convert_camelcase_to_kebabcase
+
+    if not isinstance(instance_type, type):
+        raise ValueError("instance_type must be a class")
+
+    name = convert_camelcase_to_kebabcase(instance_type.__name__)
+    pattern = re.compile(f"^{name}(-[0-9a-zA-Z]+)?.service$")
+
+    service_list = [
+        Path(SYSTEMD, service)
+        for service in SYSTEMD.iterdir()
+        if pattern.search(service.name)
+        and not any(s in service.name for s in suffix_blacklist)
+    ]
+
+    instance_list = [
+        instance_type(get_instance_suffix(name, service)) for service in service_list
+    ]
+
+    def _sort_instance_list(suffix: int | str | None):
+        if suffix is None:
+            return
+        elif isinstance(suffix, str) and suffix.isdigit():
+            return f"{int(suffix):04}"
+        else:
+            return suffix
+
+    return sorted(instance_list, key=lambda x: _sort_instance_list(x.suffix))
+
+
+def get_instance_suffix(name: str, file_path: Path) -> str:
+    # to get the suffix of the instance, we remove the name of the instance from
+    # the file name, if the remaining part an empty string we return it
+    # otherwise there is and hyphen left, and we return the part after the hyphen
+    suffix = file_path.stem[len(name) :]
+    return suffix[1:] if suffix else ""
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/sys_utils.py /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/sys_utils.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh/utils/sys_utils.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh/utils/sys_utils.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,541 @@
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+from __future__ import annotations
+
+import os
+import re
+import select
+import shutil
+import socket
+import sys
+import time
+import urllib.error
+import urllib.request
+from pathlib import Path
+from subprocess import DEVNULL, PIPE, CalledProcessError, Popen, check_output, run
+from typing import List, Literal, Set
+
+from core.constants import SYSTEMD
+from core.logger import Logger
+from utils.fs_utils import check_file_exist, remove_with_sudo
+from utils.input_utils import get_confirm
+
+SysCtlServiceAction = Literal[
+    "start",
+    "stop",
+    "restart",
+    "reload",
+    "enable",
+    "disable",
+    "mask",
+    "unmask",
+]
+SysCtlManageAction = Literal["daemon-reload", "reset-failed"]
+
+
+class VenvCreationFailedException(Exception):
+    pass
+
+
+def kill(opt_err_msg: str = "") -> None:
+    """
+    Kills the application |
+    :param opt_err_msg: an optional, additional error message
+    :return: None
+    """
+
+    if opt_err_msg:
+        Logger.print_error(opt_err_msg)
+    Logger.print_error("A critical error has occured. KIAUH was terminated.")
+    sys.exit(1)
+
+
+def check_python_version(major: int, minor: int) -> bool:
+    """
+    Checks the python version and returns True if it's at least the given version
+    :param major: the major version to check
+    :param minor: the minor version to check
+    :return: bool
+    """
+    if not (sys.version_info.major >= major and sys.version_info.minor >= minor):
+        Logger.print_error("Versioncheck failed!")
+        Logger.print_error(f"Python {major}.{minor} or newer required.")
+        return False
+    return True
+
+
+def parse_packages_from_file(source_file: Path) -> List[str]:
+    """
+    Read the package names from bash scripts, when defined like:
+    PKGLIST="package1 package2 package3" |
+    :param source_file: path of the sourcefile to read from
+    :return: A list of package names
+    """
+
+    packages = []
+    with open(source_file, "r") as file:
+        for line in file:
+            line = line.strip()
+            if line.startswith("PKGLIST="):
+                line = line.replace('"', "")
+                line = line.replace("PKGLIST=", "")
+                line = line.replace("${PKGLIST}", "")
+                packages.extend(line.split())
+
+    return packages
+
+
+def create_python_venv(
+    target: Path,
+    force: bool = False,
+    allow_access_to_system_site_packages: bool = False,
+) -> bool:
+    """
+    Create a python 3 virtualenv at the provided target destination.
+    Returns True if the virtualenv was created successfully.
+    Returns False if the virtualenv already exists, recreation was declined or creation failed.
+    :param target: Path where to create the virtualenv at
+    :param force: Force recreation of the virtualenv
+    :param allow_access_to_system_site_packages: give the virtual environment access to the system site-packages dir
+    :return: bool
+    """
+    Logger.print_status("Set up Python virtual environment ...")
+    cmd = ["virtualenv", "-p", "/usr/bin/python3", target.as_posix()]
+    cmd.append(
+        "--system-site-packages"
+    ) if allow_access_to_system_site_packages else None
+    if not target.exists():
+        try:
+            run(cmd, check=True)
+            Logger.print_ok("Setup of virtualenv successful!")
+            return True
+        except CalledProcessError as e:
+            Logger.print_error(f"Error setting up virtualenv:\n{e}")
+            return False
+    else:
+        if not force and not get_confirm(
+            "Virtualenv already exists. Re-create?", default_choice=False
+        ):
+            Logger.print_info("Skipping re-creation of virtualenv ...")
+            return False
+
+        try:
+            shutil.rmtree(target)
+            create_python_venv(target)
+            return True
+        except OSError as e:
+            log = f"Error removing existing virtualenv: {e.strerror}"
+            Logger.print_error(log, False)
+            return False
+
+
+def update_python_pip(target: Path) -> None:
+    """
+    Updates pip in the provided target destination |
+    :param target: Path of the virtualenv
+    :return: None
+    """
+    Logger.print_status("Updating pip ...")
+    try:
+        pip_location: Path = target.joinpath("bin/pip")
+        pip_exists: bool = check_file_exist(pip_location)
+
+        if not pip_exists:
+            raise FileNotFoundError("Error updating pip! Not found.")
+
+        command = [pip_location.as_posix(), "install", "-U", "pip"]
+        result = run(command, stderr=PIPE, text=True)
+        if result.returncode != 0 or result.stderr:
+            Logger.print_error(f"{result.stderr}", False)
+            Logger.print_error("Updating pip failed!")
+            return
+
+        Logger.print_ok("Updating pip successful!")
+    except FileNotFoundError as e:
+        Logger.print_error(e)
+        raise
+    except CalledProcessError as e:
+        Logger.print_error(f"Error updating pip:\n{e.output.decode()}")
+        raise
+
+
+def install_python_requirements(target: Path, requirements: Path) -> None:
+    """
+    Installs the python packages based on a provided requirements.txt |
+    :param target: Path of the virtualenv
+    :param requirements: Path to the requirements.txt file
+    :return: None
+    """
+    try:
+        # always update pip before installing requirements
+        update_python_pip(target)
+
+        Logger.print_status("Installing Python requirements ...")
+        command = [
+            target.joinpath("bin/pip").as_posix(),
+            "install",
+            "-r",
+            f"{requirements}",
+        ]
+        result = run(command, stderr=PIPE, text=True)
+
+        if result.returncode != 0 or result.stderr:
+            Logger.print_error(f"{result.stderr}", False)
+            raise VenvCreationFailedException("Installing Python requirements failed!")
+
+        Logger.print_ok("Installing Python requirements successful!")
+
+    except Exception as e:
+        log = f"Error installing Python requirements: {e}"
+        Logger.print_error(log)
+        raise VenvCreationFailedException(log)
+
+
+def update_system_package_lists(silent: bool, rls_info_change=False) -> None:
+    """
+    Updates the systems package list |
+    :param silent: Log info to the console or not
+    :param rls_info_change: Flag for "--allow-releaseinfo-change"
+    :return: None
+    """
+    cache_mtime: float = 0
+    cache_files: List[Path] = [
+        Path("/var/lib/apt/periodic/update-success-stamp"),
+        Path("/var/lib/apt/lists"),
+    ]
+    for cache_file in cache_files:
+        if cache_file.exists():
+            cache_mtime = max(cache_mtime, os.path.getmtime(cache_file))
+
+    update_age = int(time.time() - cache_mtime)
+    update_interval = 6 * 3600  # 48hrs
+
+    if update_age <= update_interval:
+        return
+
+    if not silent:
+        Logger.print_status("Updating package list...")
+
+    try:
+        command = ["sudo", "apt-get", "update"]
+        if rls_info_change:
+            command.append("--allow-releaseinfo-change")
+
+        result = run(command, stderr=PIPE, text=True)
+        if result.returncode != 0 or result.stderr:
+            Logger.print_error(f"{result.stderr}", False)
+            Logger.print_error("Updating system package list failed!")
+            return
+
+        Logger.print_ok("System package list update successful!")
+    except CalledProcessError as e:
+        Logger.print_error(f"Error updating system package list:\n{e.stderr.decode()}")
+        raise
+
+
+def get_upgradable_packages() -> List[str]:
+    """
+    Reads all system packages that can be upgraded.
+    :return: A list of package names available for upgrade
+    """
+    try:
+        command = ["apt", "list", "--upgradable"]
+        output: str = check_output(command, stderr=DEVNULL, text=True, encoding="utf-8")
+        pkglist = []
+        for line in output.split("\n"):
+            if "/" not in line:
+                continue
+            pkg = line.split("/")[0]
+            pkglist.append(pkg)
+        return pkglist
+    except CalledProcessError as e:
+        raise Exception(f"Error reading upgradable packages: {e}")
+
+
+def check_package_install(packages: Set[str]) -> List[str]:
+    """
+    Checks the system for installed packages |
+    :param packages: List of strings of package names
+    :return: A list containing the names of packages that are not installed
+    """
+    not_installed = []
+    for package in packages:
+        command = ["dpkg-query", "-f'${Status}'", "--show", package]
+        result = run(
+            command,
+            stdout=PIPE,
+            stderr=DEVNULL,
+            text=True,
+        )
+        if "installed" not in result.stdout.strip("'").split():
+            not_installed.append(package)
+
+    return not_installed
+
+
+def install_system_packages(packages: List[str]) -> None:
+    """
+    Installs a list of system packages |
+    :param packages: List of system package names
+    :return: None
+    """
+    try:
+        command = ["sudo", "apt-get", "install", "-y"]
+        for pkg in packages:
+            command.append(pkg)
+        run(command, stderr=PIPE, check=True)
+
+        Logger.print_ok("Packages successfully installed.")
+    except CalledProcessError as e:
+        Logger.print_error(f"Error installing packages:\n{e.stderr.decode()}")
+        raise
+
+
+def upgrade_system_packages(packages: List[str]) -> None:
+    """
+    Updates a list of system packages |
+    :param packages: List of system package names
+    :return: None
+    """
+    try:
+        command = ["sudo", "apt-get", "upgrade", "-y"]
+        for pkg in packages:
+            command.append(pkg)
+        run(command, stderr=PIPE, check=True)
+
+        Logger.print_ok("Packages successfully upgraded.")
+    except CalledProcessError as e:
+        raise Exception(f"Error upgrading packages:\n{e.stderr.decode()}")
+
+
+# this feels hacky and not quite right, but for now it works
+# see: https://stackoverflow.com/questions/166506/finding-local-ip-addresses-using-pythons-stdlib
+def get_ipv4_addr() -> str:
+    """
+    Helper function that returns the IPv4 of the current machine
+    by opening a socket and sending a package to an arbitrary IP. |
+    :return: Local IPv4 of the current machine
+    """
+    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
+    s.settimeout(0)
+    try:
+        # doesn't even have to be reachable
+        s.connect(("192.255.255.255", 1))
+        return str(s.getsockname()[0])
+    except Exception:
+        return "127.0.0.1"
+    finally:
+        s.close()
+
+
+def download_file(url: str, target: Path, show_progress=True) -> None:
+    """
+    Helper method for downloading files from a provided URL |
+    :param url: the url to the file
+    :param target: the target path incl filename
+    :param show_progress: show download progress or not
+    :return: None
+    """
+    try:
+        if show_progress:
+            urllib.request.urlretrieve(url, target, download_progress)
+            sys.stdout.write("\n")
+        else:
+            urllib.request.urlretrieve(url, target)
+    except urllib.error.HTTPError as e:
+        Logger.print_error(f"Download failed! HTTP error occured: {e}")
+        raise
+    except urllib.error.URLError as e:
+        Logger.print_error(f"Download failed! URL error occured: {e}")
+        raise
+    except Exception as e:
+        Logger.print_error(f"Download failed! An error occured: {e}")
+        raise
+
+
+def download_progress(block_num, block_size, total_size) -> None:
+    """
+    Reporthook method for urllib.request.urlretrieve() method call in download_file() |
+    :param block_num:
+    :param block_size:
+    :param total_size: total filesize in bytes
+    :return: None
+    """
+    downloaded = block_num * block_size
+    percent = 100 if downloaded >= total_size else downloaded / total_size * 100
+    mb = 1024 * 1024
+    progress = int(percent / 5)
+    remaining = "-" * (20 - progress)
+    dl = f"\rDownloading: [{'#' * progress}{remaining}]{percent:.2f}% ({downloaded / mb:.2f}/{total_size / mb:.2f}MB)"
+    sys.stdout.write(dl)
+    sys.stdout.flush()
+
+
+def set_nginx_permissions() -> None:
+    """
+    Check if permissions of the users home directory
+    grant execution rights to group and other and set them if not set.
+    Required permissions for NGINX to be able to serve Mainsail/Fluidd.
+    This seems to have become necessary with Ubuntu 21+. |
+    :return: None
+    """
+    cmd = f"ls -ld {Path.home()} | cut -d' ' -f1"
+    homedir_perm = run(cmd, shell=True, stdout=PIPE, text=True)
+    permissions = homedir_perm.stdout
+
+    if permissions.count("x") < 3:
+        Logger.print_status("Granting NGINX the required permissions ...")
+        run(["chmod", "og+x", Path.home()])
+        Logger.print_ok("Permissions granted.")
+
+
+def cmd_sysctl_service(name: str, action: SysCtlServiceAction) -> None:
+    """
+    Helper method to execute several actions for a specific systemd service. |
+    :param name: the service name
+    :param action: Either "start", "stop", "restart" or "disable"
+    :return: None
+    """
+    try:
+        Logger.print_status(f"{action.capitalize()} {name} ...")
+        run(["sudo", "systemctl", action, name], stderr=PIPE, check=True)
+        Logger.print_ok("OK!")
+    except CalledProcessError as e:
+        log = f"Failed to {action} {name}: {e.stderr.decode()}"
+        Logger.print_error(log)
+        raise
+
+
+def cmd_sysctl_manage(action: SysCtlManageAction) -> None:
+    try:
+        run(["sudo", "systemctl", action], stderr=PIPE, check=True)
+    except CalledProcessError as e:
+        log = f"Failed to run {action}: {e.stderr.decode()}"
+        Logger.print_error(log)
+        raise
+
+
+def unit_file_exists(
+    name: str, suffix: Literal["service", "timer"], exclude: List[str] | None = None
+) -> bool:
+    """
+    Checks if a systemd unit file of the provided suffix exists.
+    :param name: the name of the unit file
+    :param suffix: suffix of the unit file, either "service" or "timer"
+    :param exclude: List of strings of names to exclude
+    :return: True if the unit file exists, False otherwise
+    """
+    exclude = exclude or []
+    pattern = re.compile(f"^{name}(-[0-9a-zA-Z]+)?.{suffix}$")
+    service_list = [
+        Path(SYSTEMD, service)
+        for service in SYSTEMD.iterdir()
+        if pattern.search(service.name) and not any(s in service.name for s in exclude)
+    ]
+    return any(service_list)
+
+
+def log_process(process: Popen) -> None:
+    """
+    Helper method to print stdout of a process in near realtime to the console.
+    :param process: Process to log the output from
+    :return: None
+    """
+    while True:
+        if process.stdout is not None:
+            reads = [process.stdout.fileno()]
+            ret = select.select(reads, [], [])
+            for fd in ret[0]:
+                if fd == process.stdout.fileno():
+                    line = process.stdout.readline()
+                    if line:
+                        print(line.strip(), flush=True)
+                    else:
+                        break
+
+        if process.poll() is not None:
+            break
+
+
+def create_service_file(name: str, content: str) -> None:
+    """
+    Creates a service file at the provided path with the provided content.
+    :param name: the name of the service file
+    :param content: the content of the service file
+    :return: None
+    """
+    try:
+        run(
+            ["sudo", "tee", SYSTEMD.joinpath(name)],
+            input=content.encode(),
+            stdout=DEVNULL,
+            check=True,
+        )
+        Logger.print_ok(f"Service file created: {SYSTEMD.joinpath(name)}")
+    except CalledProcessError as e:
+        Logger.print_error(f"Error creating service file: {e}")
+        raise
+
+
+def create_env_file(path: Path, content: str) -> None:
+    """
+    Creates an env file at the provided path with the provided content.
+    :param path: the path of the env file
+    :param content: the content of the env file
+    :return: None
+    """
+    try:
+        with open(path, "w") as env_file:
+            env_file.write(content)
+        Logger.print_ok(f"Env file created: {path}")
+    except OSError as e:
+        Logger.print_error(f"Error creating env file: {e}")
+        raise
+
+
+def remove_system_service(service_name: str) -> None:
+    """
+    Disables and removes a systemd service
+    :param service_name: name of the service unit file - must end with '.service'
+    :return: None
+    """
+    try:
+        if not service_name.endswith(".service"):
+            raise ValueError(f"service_name '{service_name}' must end with '.service'")
+
+        file: Path = SYSTEMD.joinpath(service_name)
+        if not file.exists() or not file.is_file():
+            Logger.print_info(f"Service '{service_name}' does not exist! Skipped ...")
+            return
+
+        Logger.print_status(f"Removing {service_name} ...")
+        cmd_sysctl_service(service_name, "stop")
+        cmd_sysctl_service(service_name, "disable")
+        remove_with_sudo(file)
+        cmd_sysctl_manage("daemon-reload")
+        cmd_sysctl_manage("reset-failed")
+        Logger.print_ok(f"{service_name} successfully removed!")
+    except Exception as e:
+        Logger.print_error(f"Error removing {service_name}: {e}")
+        raise
+
+
+def get_service_file_path(instance_type: type, suffix: str) -> Path:
+    from utils.common import convert_camelcase_to_kebabcase
+
+    if not isinstance(instance_type, type):
+        raise ValueError("instance_type must be a class")
+
+    name: str = convert_camelcase_to_kebabcase(instance_type.__name__)
+    if suffix != "":
+        name += f"-{suffix}"
+
+    file_path: Path = SYSTEMD.joinpath(f"{name}.service")
+
+    return file_path
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh.py /home/mks/firmware_comparison/downloads/kiauh/kiauh.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh.py	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh.py	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,15 @@
+#!/usr/bin/env python3
+
+# ======================================================================= #
+#  Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>        #
+#                                                                         #
+#  This file is part of KIAUH - Klipper Installation And Update Helper    #
+#  https://github.com/dw-0/kiauh                                          #
+#                                                                         #
+#  This file may be distributed under the terms of the GNU GPLv3 license  #
+# ======================================================================= #
+
+from kiauh.main import main
+
+if __name__ == "__main__":
+    main()
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh.sh /home/mks/firmware_comparison/downloads/kiauh/kiauh.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/kiauh.sh	2023-12-15 01:08:34.841257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/kiauh.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -12,6 +12,9 @@
 set -e
 clear
 
+# make sure we have the correct permissions while running the script
+umask 022
+
 ### sourcing all additional scripts
 KIAUH_SRCDIR="$(dirname -- "$(readlink -f "${BASH_SOURCE[0]}")")"
 for script in "${KIAUH_SRCDIR}/scripts/"*.sh; do . "${script}"; done
@@ -54,6 +57,15 @@
   fi
 }
 
+function save_startup_version() {
+  local launch_version
+
+  echo "${1}"
+
+  sed -i "/^version_to_launch=/d" "${INI_FILE}"
+  sed -i '$a'"version_to_launch=${1}" "${INI_FILE}"
+}
+
 function kiauh_update_dialog() {
   [[ ! $(kiauh_update_avail) == "true" ]] && return
   top_border
@@ -70,19 +82,96 @@
   read -p "${cyan}###### Do you want to update now? (Y/n):${white} " yn
   while true; do
     case "${yn}" in
-      Y|y|Yes|yes|"")
-        do_action "update_kiauh"
-        break;;
-      N|n|No|no)
-        break;;
-      *)
-        deny_action "kiauh_update_dialog";;
+     Y|y|Yes|yes|"")
+       do_action "update_kiauh"
+       break;;
+     N|n|No|no)
+       break;;
+     *)
+       deny_action "kiauh_update_dialog";;
     esac
   done
 }
 
+function launch_kiauh_v5() {
+    main_menu
+}
+
+function launch_kiauh_v6() {
+  local entrypoint
+
+  if ! command -v python3 &>/dev/null || [[ $(python3 -V | cut -d " " -f2 | cut -d "." -f2) -lt 8 ]]; then
+    echo "Python 3.8 or higher is not installed!"
+    echo "Please install Python 3.8 or higher and try again."
+    exit 1
+  fi
+
+  entrypoint=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
+
+  export PYTHONPATH="${entrypoint}"
+
+  clear
+  python3 "${entrypoint}/kiauh.py"
+}
+
+function main() {
+  read_kiauh_ini "${FUNCNAME[0]}"
+
+  if [[ ${version_to_launch} -eq 5 ]]; then
+    launch_kiauh_v5
+  elif [[ ${version_to_launch} -eq 6 ]]; then
+    launch_kiauh_v6
+  else
+    top_border
+    echo -e "|         ${green}KIAUH v6.0.0-alpha1 is available now!${white}         |"
+    hr
+    echo -e "|         View Changelog: ${magenta}https://git.io/JnmlX${white}          |"
+    blank_line
+    echo -e "| KIAUH v6 was completely rewritten from the ground up. |"
+    echo -e "| It's based on Python 3.8 and has many improvements.   |"
+    blank_line
+    echo -e "| ${yellow}NOTE: Version 6 is still in alpha, so bugs may occur!${white} |"
+    echo -e "| ${yellow}Yet, your feedback and bug reports are very much${white}      |"
+    echo -e "| ${yellow}appreciated and will help finalize the release.${white}       |"
+    hr
+    echo -e "| Would you like to try out KIAUH v6?                   |"
+    echo -e "| 1) Yes                                                |"
+    echo -e "| 2) No                                                 |"
+    echo -e "| 3) Yes, remember my choice for next time              |"
+    echo -e "| 4) No, remember my choice for next time               |"
+    quit_footer
+    while true; do
+      read -p "${cyan}###### Select action:${white} " -e input
+      case "${input}" in
+        1)
+          launch_kiauh_v6
+          break;;
+        2)
+          launch_kiauh_v5
+          break;;
+        3)
+          save_startup_version 6
+          launch_kiauh_v6
+          break;;
+        4)
+          save_startup_version 5
+          launch_kiauh_v5
+          break;;
+        Q|q)
+          echo -e "${green}###### Happy printing! ######${white}"; echo
+          exit 0;;
+        *)
+          error_msg "Invalid Input!\n";;
+      esac
+    done && input=""
+  fi
+}
+
+check_if_ratos
 check_euid
 init_logfile
 set_globals
 kiauh_update_dialog
-main_menu
+read_kiauh_ini
+init_ini
+main
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/klipper_repos.txt.example /home/mks/firmware_comparison/downloads/kiauh/klipper_repos.txt.example
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/klipper_repos.txt.example	2022-07-25 05:41:36.758250528 -0400
+++ /home/mks/firmware_comparison/downloads/kiauh/klipper_repos.txt.example	1969-12-31 19:00:00.000000000 -0500
@@ -1,18 +0,0 @@
-# This file acts as an example file.
-#
-# 1) Make a copy of this file and rename it to 'klipper_repos.txt'
-# 2) Add your custom Klipper repository to the bottom of that copy
-# 3) Save the file
-#
-# Back in KIAUH you can now go into -> [Settings] and use action '2' to set a different Klipper repository
-#
-# Make sure to always separate the repository and the branch with a ','.
-# <repository>,<branch> -> https://github.com/Klipper3d/klipper,master
-# If you omit a branch, it will always default to 'master'
-#
-# You are allowed to omit the 'https://github.com/' part of the repository URL
-# Down below are now a few examples of what is considered as valid:
-https://github.com/Klipper3d/klipper,master
-https://github.com/Klipper3d/klipper
-Klipper3d/klipper,master
-Klipper3d/klipper
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/pyproject.toml /home/mks/firmware_comparison/downloads/kiauh/pyproject.toml
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/pyproject.toml	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/pyproject.toml	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,32 @@
+[project]
+requires-python = ">=3.8"
+
+[project.optional-dependencies]
+dev=["ruff", "mypy"]
+
+[tool.ruff]
+required-version = ">=0.3.4"
+respect-gitignore = true
+exclude = [".git",".github", "./docs"]
+line-length = 88
+indent-width = 4
+output-format = "full"
+
+[tool.ruff.format]
+indent-style = "space"
+line-ending = "lf"
+quote-style = "double"
+
+[tool.ruff.lint]
+extend-select = ["I"]
+
+[tool.mypy]
+python_version = "3.8"
+platform = "linux"
+# strict = true # TODO: enable this once everything is else is handled
+check_untyped_defs = true
+ignore_missing_imports = true
+warn_redundant_casts = true
+warn_unused_ignores = true
+warn_return_any = true
+warn_unreachable = true
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/README.md /home/mks/firmware_comparison/downloads/kiauh/README.md
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/README.md	2023-12-15 01:08:34.837257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/README.md	2024-10-08 17:45:33.575241837 -0400
@@ -29,7 +29,7 @@
 ### 📋 Prerequisites
 KIAUH is a script that assists you in installing Klipper on a Linux operating system that has
 already been flashed to your Raspberry Pi's (or other SBC's) SD card. As a result, you must ensure 
-that you have a functional Linux system on hand. `Raspberry Pi OS Lite (32bit)` is a recommended Linux image 
+that you have a functional Linux system on hand. `Raspberry Pi OS Lite (either 32bit or 64bit)` is a recommended Linux image 
 if you are using a Raspberry Pi. The [official Raspberry Pi Imager](https://www.raspberrypi.com/software/) 
 is the simplest way to flash an image like this to an SD card.
 
@@ -39,7 +39,7 @@
   <img src="https://raw.githubusercontent.com/dw-0/kiauh/master/resources/screenshots/rpi_imager1.png" alt="KIAUH logo" height="350">
 </p>
 
-* Then select `Raspberry Pi OS Lite (32bit)`:
+* Then select `Raspberry Pi OS Lite (32bit)` (or 64bit if you want to use that instead):
 <p align="center">
   <img src="https://raw.githubusercontent.com/dw-0/kiauh/master/resources/screenshots/rpi_imager2.png" alt="KIAUH logo" height="350">
 </p>
@@ -125,7 +125,7 @@
 <tr>
 <th><img src="https://raw.githubusercontent.com/fluidd-core/fluidd/master/docs/assets/images/logo.svg" alt="Fluidd Logo" height="64"></th>
 <th><img src="https://avatars.githubusercontent.com/u/31575189?v=4" alt="jordanruthe avatar" height="64"></th>
-<th><img src="https://camo.githubusercontent.com/627be7fc67195b626b298af9b9677d7c58e698c67305e54324cffbe06130d4a4/68747470733a2f2f6f63746f7072696e742e6f72672f6173736574732f696d672f6c6f676f2e706e67" alt="OctoPrint Logo" height="64"></th>
+<th><img src="https://raw.githubusercontent.com/OctoPrint/OctoPrint/master/docs/images/octoprint-logo.png" alt="OctoPrint Logo" height="64"></th>
 </tr>
 <tr>
 <th>by <a href="https://github.com/fluidd-core">fluidd-core</a></th>
@@ -154,18 +154,20 @@
 <tr>
 <th><h3><a href="https://github.com/Clon1998/mobileraker_companion">Mobileraker's Companion</a></h3></th>
 <th><h3><a href="https://octoeverywhere.com/?source=kiauh_readme">OctoEverywhere For Klipper</a></h3></th>
+<th><h3><a href="https://github.com/crysxd/OctoApp-Plugin">OctoApp For Klipper</a></h3></th>
 <th><h3></h3></th>
 </tr>
 
 <tr>
-<th><a href="https://github.com/Clon1998/mobileraker_companion"><img src="https://raw.githubusercontent.com/Clon1998/mobileraker/master/assets/icon/mr_appicon.png" alt="OctoEverywhere Logo" height="64"></th>
+<th><a href="https://github.com/Clon1998/mobileraker_companion"><img src="https://raw.githubusercontent.com/Clon1998/mobileraker/master/assets/icon/mr_appicon.png" alt="OctoEverywhere Logo" height="64"></a></th>
 <th><a href="https://octoeverywhere.com/?source=kiauh_readme"><img src="https://octoeverywhere.com/img/logo.svg" alt="OctoEverywhere Logo" height="64"></a></th>
-<th></th>
+<th><a href="https://octoapp.eu/?source=kiauh_readme"><img src="https://octoapp.eu/octoapp.webp" alt="OctoApp Logo" height="64"></a></th>
 </tr>
 
 <tr>
 <th>by <a href="https://github.com/Clon1998">Patrick Schmidt</a></th>
 <th>by <a href="https://github.com/QuinnDamerell">Quinn Damerell</a></th>
+<th>by <a href="https://github.com/crysxd">Christian Würthner</a></th>
 <th></th>
 </tr>
 
@@ -174,6 +176,16 @@
 
 <hr>
 
+<h2 align="center">🎖️ Contributors 🎖️</h2>
+
+<div align="center">
+  <a href="https://github.com/dw-0/kiauh/graphs/contributors">
+    <img src="https://contrib.rocks/image?repo=dw-0/kiauh" alt=""/>
+  </a>
+</div>
+
+<hr>
+
 <h2 align="center">✨ Credits ✨</h2>
 
 * A big thank you to [lixxbox](https://github.com/lixxbox) for that awesome KIAUH-Logo!
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/resources/gcode_shell_command.py /home/mks/firmware_comparison/downloads/kiauh/resources/gcode_shell_command.py
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/resources/gcode_shell_command.py	2022-07-25 05:41:36.758250528 -0400
+++ /home/mks/firmware_comparison/downloads/kiauh/resources/gcode_shell_command.py	2024-10-08 17:45:33.575241837 -0400
@@ -8,22 +8,26 @@
 import subprocess
 import logging
 
+
 class ShellCommand:
     def __init__(self, config):
         self.name = config.get_name().split()[-1]
         self.printer = config.get_printer()
-        self.gcode = self.printer.lookup_object('gcode')
-        cmd = config.get('command')
+        self.gcode = self.printer.lookup_object("gcode")
+        cmd = config.get("command")
         cmd = os.path.expanduser(cmd)
         self.command = shlex.split(cmd)
-        self.timeout = config.getfloat('timeout', 2., above=0.)
-        self.verbose = config.getboolean('verbose', True)
+        self.timeout = config.getfloat("timeout", 2.0, above=0.0)
+        self.verbose = config.getboolean("verbose", True)
         self.proc_fd = None
         self.partial_output = ""
         self.gcode.register_mux_command(
-            "RUN_SHELL_COMMAND", "CMD", self.name,
+            "RUN_SHELL_COMMAND",
+            "CMD",
+            self.name,
             self.cmd_RUN_SHELL_COMMAND,
-            desc=self.cmd_RUN_SHELL_COMMAND_help)
+            desc=self.cmd_RUN_SHELL_COMMAND_help,
+        )
 
     def _process_output(self, eventime):
         if self.proc_fd is None:
@@ -33,11 +37,11 @@
         except Exception:
             pass
         data = self.partial_output + data.decode()
-        if '\n' not in data:
+        if "\n" not in data:
             self.partial_output = data
             return
-        elif data[-1] != '\n':
-            split = data.rfind('\n') + 1
+        elif data[-1] != "\n":
+            split = data.rfind("\n") + 1
             self.partial_output = data[split:]
             data = data[:split]
         else:
@@ -45,16 +49,19 @@
         self.gcode.respond_info(data)
 
     cmd_RUN_SHELL_COMMAND_help = "Run a linux shell command"
+
     def cmd_RUN_SHELL_COMMAND(self, params):
-        gcode_params = params.get('PARAMS','')
+        gcode_params = params.get("PARAMS", "")
         gcode_params = shlex.split(gcode_params)
         reactor = self.printer.get_reactor()
         try:
             proc = subprocess.Popen(
-                self.command + gcode_params, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
+                self.command + gcode_params,
+                stdout=subprocess.PIPE,
+                stderr=subprocess.STDOUT,
+            )
         except Exception:
-            logging.exception(
-                "shell_command: Command {%s} failed" % (self.name))
+            logging.exception("shell_command: Command {%s} failed" % (self.name))
             raise self.gcode.error("Error running command {%s}" % (self.name))
         if self.verbose:
             self.proc_fd = proc.stdout.fileno()
@@ -64,7 +71,7 @@
         endtime = eventtime + self.timeout
         complete = False
         while eventtime < endtime:
-            eventtime = reactor.pause(eventtime + .05)
+            eventtime = reactor.pause(eventtime + 0.05)
             if proc.poll() is not None:
                 complete = True
                 break
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/backup.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/backup.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/backup.sh	2023-12-15 01:08:34.853257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/backup.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -43,15 +43,17 @@
 
     local i=0 folder folder_name target_dir
     for folder in ${config_pathes}; do
-      status_msg "Create backup of ${folder} ..."
+      if [[ -d ${folder} ]]; then
+        status_msg "Create backup of ${folder} ..."
 
-      folder_name=$(echo "${folder}" | rev | cut -d"/" -f2 | rev)
-      target_dir="${BACKUP_DIR}/configs/${current_date}/${folder_name}"
-      mkdir -p "${target_dir}"
-      cp -r "${folder}" "${target_dir}"
-      i=$(( i + 1 ))
+        folder_name=$(echo "${folder}" | rev | cut -d"/" -f2 | rev)
+        target_dir="${BACKUP_DIR}/configs/${current_date}/${folder_name}"
+        mkdir -p "${target_dir}"
+        cp -r "${folder}" "${target_dir}"
+        i=$(( i + 1 ))
 
-      ok_msg "Backup created in:\n${target_dir}"
+        ok_msg "Backup created in:\n${target_dir}"
+      fi
     done
   else
     ok_msg "No config directory found! Skipping backup ..."
@@ -211,3 +213,19 @@
     print_error "Can't back up OctoEverywhere directory!\n Not found!"
   fi
 }
+
+function backup_spoolman() {
+  local current_date
+
+  if [[ -d ${SPOOLMAN_DIR} ]] ; then
+    status_msg "Creating Spoolman backup ..."
+    check_for_backup_dir
+    current_date=$(get_date)
+    status_msg "Timestamp: ${current_date}"
+    mkdir -p "${BACKUP_DIR}/Spoolman-backups/${current_date}"
+    cp -r "${SPOOLMAN_DIR}" "${_}" && cp -r "${SPOOLMAN_DB_DIR}/spoolman.db" "${_}"
+    print_confirm "Spoolman backup complete!"
+  else
+    print_error "Can't back up Spoolman directory!\n Not found!"
+  fi
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/crowsnest.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/crowsnest.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/crowsnest.sh	2023-12-15 01:08:34.853257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/crowsnest.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/flash_klipper.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/flash_klipper.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/flash_klipper.sh	2023-12-15 01:08:34.853257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/flash_klipper.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/fluidd.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/fluidd.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/fluidd.sh	2023-12-15 01:08:34.853257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/fluidd.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -37,7 +37,7 @@
   fi
 
   ### checking dependencies
-  local dep=(wget nginx)
+  local dep=(wget nginx unzip)
   dependency_check "${dep[@]}"
   ### detect conflicting Haproxy and Apache2 installations
   detect_conflicting_packages
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/gcode_shell_command.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/gcode_shell_command.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/gcode_shell_command.sh	2023-12-15 01:08:34.853257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/gcode_shell_command.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/globals.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/globals.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/globals.sh	2023-12-15 01:08:34.853257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/globals.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -83,4 +83,13 @@
   MOBILERAKER_DIR="${HOME}/mobileraker_companion"
   MOBILERAKER_REPO="https://github.com/Clon1998/mobileraker_companion.git"
 
+  #=============== OCTOAPP ================#
+  OCTOAPP_ENV="${HOME}/octoapp-env"
+  OCTOAPP_DIR="${HOME}/octoapp"
+  OCTOAPP_REPO="https://github.com/crysxd/OctoApp-Plugin.git"
+
+  #=============== Spoolman ================#
+  SPOOLMAN_DIR="${HOME}/Spoolman"
+  SPOOLMAN_DB_DIR="${HOME}/.local/share/spoolman"
+  SPOOLMAN_REPO="https://api.github.com/repos/Donkie/Spoolman/releases/latest"
 }
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/klipperscreen.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/klipperscreen.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/klipperscreen.sh	2023-12-15 01:08:34.857257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/klipperscreen.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/klipper.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/klipper.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/klipper.sh	2023-12-15 01:08:34.857257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/klipper.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/mainsail.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/mainsail.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/mainsail.sh	2023-12-15 01:08:34.857257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/mainsail.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -37,7 +37,7 @@
   fi
 
   ### checking dependencies
-  local dep=(wget nginx)
+  local dep=(wget nginx unzip)
   dependency_check "${dep[@]}"
   ### detect conflicting Haproxy and Apache2 installations
   detect_conflicting_packages
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/mjpg-streamer.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/mjpg-streamer.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/mjpg-streamer.sh	2023-12-15 01:08:34.857257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/mjpg-streamer.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/mobileraker.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/mobileraker.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/mobileraker.sh	2023-12-15 01:08:34.857257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/mobileraker.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -61,8 +61,8 @@
     exit 1
   fi
 
-  status_msg "Installing Mobileraker's companion ..."
-  if "${MOBILERAKER_DIR}"/scripts/install-mobileraker-companion.sh; then
+  status_msg "Starting installer of Mobileraker's companion ..."
+  if "${MOBILERAKER_DIR}"/scripts/install.sh; then
     ok_msg "Mobileraker's companion successfully installed!"
   else
     print_error "Mobileraker's companion installation failed!"
@@ -233,7 +233,7 @@
 managed_services: mobileraker
 env: ${HOME}/mobileraker-env/bin/python
 requirements: scripts/mobileraker-requirements.txt
-install_script: scripts/install-mobileraker-companion.sh
+install_script: scripts/install.sh
 MOONRAKER_CONF
 
     fi
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/moonraker.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/moonraker.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/moonraker.sh	2023-12-15 01:08:34.857257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/moonraker.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -142,12 +142,12 @@
 
 function install_moonraker_dependencies() {
   local packages log_name="Moonraker"
-  local install_script="${MOONRAKER_DIR}/scripts/install-moonraker.sh"
+  local package_json="${MOONRAKER_DIR}/scripts/system-dependencies.json"
 
   ### read PKGLIST from official install-script
   status_msg "Reading dependencies..."
   # shellcheck disable=SC2016
-  packages="$(grep "PKGLIST=" "${install_script}" | cut -d'"' -f2 | sed 's/\${PKGLIST}//g' | tr -d '\n')"
+  packages=$(cat $package_json | tr -d ' \n{}' | cut -d "]" -f1 | cut -d":" -f2 | tr -d '"[' | sed 's/,/ /g')
 
   echo "${cyan}${packages}${white}" | tr '[:space:]' '\n'
   read -r -a packages <<< "${packages}"
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/moonraker-telegram-bot.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/moonraker-telegram-bot.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/moonraker-telegram-bot.sh	2023-12-15 01:08:34.857257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/moonraker-telegram-bot.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/nginx.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/nginx.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/nginx.sh	2023-12-15 01:08:34.861257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/nginx.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/obico.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/obico.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/obico.sh	2023-12-15 01:08:34.861257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/obico.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/octoapp.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/octoapp.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/octoapp.sh	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/octoapp.sh	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,369 @@
+#!/usr/bin/env bash
+
+#=======================================================================#
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
+#                                                                       #
+# This file is part of KIAUH - Klipper Installation And Update Helper   #
+# https://github.com/dw-0/kiauh                                         #
+#                                                                       #
+# This file may be distributed under the terms of the GNU GPLv3 license #
+#=======================================================================#
+
+#
+# This file is written and maintained by Christian Würthner from OctoApp
+# Please contact me if you need any help!
+# hello@octoapp.eu
+#
+
+set -e
+
+#===================================================#
+#==============         Install         ============#
+#===================================================#
+
+function octoapp_systemd() {
+  local services
+  services=$(find "${SYSTEMD}" -maxdepth 1 -regextype posix-extended -regex "${SYSTEMD}/octoapp(-[0-9a-zA-Z]+)?.service")
+  echo "${services}"
+}
+
+function octoapp_setup_dialog() {
+  status_msg "Initializing OctoApp for Klipper installation ..."
+
+  # First, check for moonraker service instances.
+  local moonraker_count
+  local moonraker_names
+  moonraker_count=$(moonraker_systemd | wc -w)
+  if (( moonraker_count == 0 )); then
+    ### return early if moonraker is not installed
+    local error="Moonraker not installed! Please install Moonraker first!"
+    log_error   "OctoApp setup started without Moonraker being installed. Aborting setup."
+    print_error "${error}" && return
+  elif (( moonraker_count > 1 )); then
+    # moonraker_names is valid only in case of multi-instance
+    read -r -a moonraker_names <<< "$(get_multi_instance_names)"
+  fi
+
+  # Next, check for any existing OctoApp services.
+  local octoapp_services
+  local existing_octoapp_count
+  octoapp_services=$(octoapp_systemd)
+  existing_octoapp_count=$(echo "${octoapp_services}" | wc -w )
+
+  # We need to make the moonraker instance count to the OctoApp service count.
+  local allowed_octoapp_count=$(( moonraker_count - existing_octoapp_count ))
+  if (( allowed_octoapp_count > 0 )); then
+    local new_octoapp_count
+
+    ### Step 1: Ask for the number of OctoApp instances to install
+    if (( moonraker_count == 1 )); then
+      ok_msg "Moonraker installation found!\n"
+      new_octoapp_count=1
+    elif (( moonraker_count > 1 )); then
+      top_border
+      printf "|${green}%-55s${white}|\n" " ${moonraker_count} Moonraker instances found!"
+      for name in "${moonraker_names[@]}"; do
+        printf "|${cyan}%-57s${white}|\n" " ● moonraker-${name}"
+      done
+      blank_line
+      if (( existing_octoapp_count > 0 )); then
+        printf "|${green}%-55s${white}|\n" " ${existing_octoapp_count} OctoApp instances already installed!"
+        for svc in ${octoapp_services}; do
+          printf "|${cyan}%-57s${white}|\n" " ● octoapp-$(get_instance_name "${svc}")"
+        done
+      fi
+      blank_line
+      echo -e "| The setup will apply the same names to OctoApp        |"
+      blank_line
+      echo -e "| Please select the number of OctoApp instances to      |"
+      echo -e "| install. Usually one OctoApp instance per Moonraker   |"
+      echo -e "| instance is required, but you may not install more    |"
+      echo -e "| OctoApp instances than available Moonraker instances. |"
+      bottom_border
+
+      ### ask for amount of instances
+      local re="^[1-9][0-9]*$"
+      while [[ ! ${new_octoapp_count} =~ ${re} || ${new_octoapp_count} -gt ${allowed_octoapp_count} ]]; do
+        read -p "${cyan}###### Number of new OctoApp instances to set up:${white} " -i "${allowed_octoapp_count}" -e new_octoapp_count
+        ### break if input is valid
+        [[ ${new_octoapp_count} =~ ${re} && ${new_octoapp_count} -le ${allowed_octoapp_count} ]] && break
+        ### conditional error messages
+        [[ ! ${new_octoapp_count} =~ ${re} ]] && error_msg "Input not a number"
+        (( new_octoapp_count > allowed_octoapp_count )) && error_msg "Number of OctoApp instances larger than installed Moonraker instances"
+      done && select_msg "${new_octoapp_count}"
+    else
+      log_error "Internal error. moonraker_count of '${moonraker_count}' not equal or grater than one!"
+      return 1
+    fi  # (( moonraker_count == 1 ))
+  fi  # (( allowed_octoapp_count > 0 ))
+
+  # Special case for one moonraker instance with OctoApp already installed.
+  # If the user selects the install option again, they might be trying to recover the install
+  # or complete a printer link they didn't finish in the past.
+  # So in this case, we will allow them to run the install script again, since it's safe to run
+  # if the service is already installed, it will repair any missing issues.
+  if (( allowed_octoapp_count == 0 && moonraker_count == 1 )); then
+    local yn
+    while true; do
+      echo "${yellow}OctoApp is already installed.${white}"
+      echo "It is safe to run the install again to repair any issues or if the printer isn't linked, run the printer linking logic again."
+      echo ""
+      local question="Do you want to run the OctoApp recovery or linking logic again?"
+      read -p "${cyan}###### ${question} (Y/n):${white} " yn
+      case "${yn}" in
+        Y|y|Yes|yes|"")
+          select_msg "Yes"
+          break;;
+        N|n|No|no)
+          select_msg "No"
+          abort_msg "Exiting OctoApp setup ...\n"
+          return;;
+        *)
+          error_msg "Invalid Input!";;
+      esac
+    done
+    # The user responded yes, allow the install to run again.
+    allowed_octoapp_count=1
+  fi
+
+  # If there's something to install, do it!
+  if (( allowed_octoapp_count > 0 )); then
+
+    (( new_octoapp_count > 1 )) && status_msg "Installing ${new_octoapp_count} OctoApp instances ..."
+    (( new_octoapp_count == 1 )) && status_msg "Installing OctoApp ..."
+
+    # Ensure the basic system dependencies are installed.
+    local dep=(git dfu-util virtualenv python3 python3-pip python3-venv)
+    dependency_check "${dep[@]}"
+
+    # Close the repo
+    clone_octoapp "${OCTOAPP_REPO}"
+
+    # Call install with the correct args.
+    local instance_cfg_dirs
+    read -r -a instance_cfg_dirs <<< "$(get_instance_folder_path "config")"
+    echo instance_cfg_dirs[0]
+
+    if (( moonraker_count == 1 )); then
+      "${OCTOAPP_DIR}/install.sh" "${instance_cfg_dirs[0]}/moonraker.conf"
+    elif (( moonraker_count > 1 )); then
+      local j=${existing_octoapp_count}
+
+      for (( i=1; i <= new_octoapp_count; i++ )); do
+        "${OCTOAPP_DIR}/install.sh" "${instance_cfg_dirs[${j}]}/moonraker.conf"
+        j=$(( j + 1 ))
+      done && unset j
+    fi # (( moonraker_count == 1 ))
+  fi  # (( allowed_octoapp_count > 0 ))
+}
+
+function octoapp_install() {
+  "${OCTOAPP_DIR}/install.sh" "$@"
+}
+
+#===================================================#
+#=============        Remove          ==============#
+#===================================================#
+
+function remove_octoapp_systemd() {
+  [[ -z $(octoapp_systemd) ]] && return
+  status_msg "Removing OctoApp Systemd Services ..."
+
+  for service in $(octoapp_systemd | cut -d"/" -f5); do
+    status_msg "Removing ${service} ..."
+    sudo systemctl stop "${service}"
+    sudo systemctl disable "${service}"
+    sudo rm -f "${SYSTEMD}/${service}"
+    ok_msg "Done!"
+  done
+
+  ### reloading units
+  sudo systemctl daemon-reload
+  sudo systemctl reset-failed
+  ok_msg "OctoApp Services removed!"
+}
+
+function remove_octoapp_logs() {
+  local files regex="${HOME//\//\\/}\/([A-Za-z0-9_]+)\/logs\/octoapp(-[0-9a-zA-Z]+)?\.log(.*)?"
+  files=$(find "${HOME}" -maxdepth 3 -regextype posix-extended -regex "${regex}" | sort)
+
+  if [[ -n ${files} ]]; then
+    for file in ${files}; do
+      status_msg "Removing ${file} ..."
+      rm -f "${file}"
+      ok_msg "${file} removed!"
+    done
+  fi
+}
+
+function remove_octoapp_dir() {
+  [[ ! -d ${OCTOAPP_DIR} ]] && return
+
+  status_msg "Removing OctoApp directory ..."
+  rm -rf "${OCTOAPP_DIR}"
+  ok_msg "Directory removed!"
+}
+
+function remove_octoapp_config() {
+  # Remove the system config but not the main config, so the printer id doesn't get lost.
+  local files regex="${HOME//\//\\/}\/([A-Za-z0-9_]+)\/config\/octoapp-system(-[0-9a-zA-Z]+)?\.cfg(.*)?"
+  files=$(find "${HOME}" -maxdepth 4 -regextype posix-extended -regex "${regex}" | sort)
+
+  if [[ -n ${files} ]]; then
+    for file in ${files}; do
+      status_msg "Removing ${file} ..."
+      rm -f "${file}"
+      ok_msg "${file} removed!"
+    done
+  fi
+}
+
+function remove_octoapp_store_dir() {
+  local files regex="${HOME//\//\\/}\/([A-Za-z0-9_]+)\/octoapp-store"
+  files=$(find "${HOME}" -maxdepth 2 -type d -regextype posix-extended -regex "${regex}" | sort)
+
+  if [[ -n ${files} ]]; then
+    for file in ${files}; do
+      status_msg "Removing ${file} ..."
+      rm -rf "${file}"
+      ok_msg "${file} removed!"
+    done
+  fi
+}
+
+function remove_octoapp_env() {
+  [[ ! -d "${HOME}/octoapp-env" ]] && return
+
+  status_msg "Removing octoapp-env directory ..."
+  rm -rf "${HOME}/octoapp-env"
+  ok_msg "Directory removed!"
+}
+
+function remove_octoapp()
+{
+  remove_octoapp_systemd
+  remove_octoapp_logs
+  remove_octoapp_dir
+  remove_octoapp_env
+  remove_octoapp_config
+  remove_octoapp_store_dir
+
+  print_confirm "OctoApp was successfully removed!"
+  return
+}
+
+#===================================================#
+#=============        UPDATE          ==============#
+#===================================================#
+
+function update_octoapp() {
+  do_action_service "stop" "octoapp"
+
+  if [[ ! -d ${OCTOAPP_DIR} ]]; then
+    clone_octoapp "${OCTOAPP_REPO}"
+  else
+    backup_before_update "octoapp"
+    status_msg "Updating OctoApp for Klipper ..."
+    cd "${OCTOAPP_DIR}" && git pull
+    ### read PKGLIST and install possible new dependencies
+    install_octoapp_dependencies
+    ### install possible new python dependencies
+    "${OCTOAPP_ENV}"/bin/pip install -r "${OCTOAPP_DIR}/requirements.txt"
+  fi
+
+  ok_msg "Update complete!"
+  do_action_service "restart" "octoapp"
+}
+
+function clone_octoapp() {
+  local repo=${1}
+
+  status_msg "Cloning OctoApp from ${repo} ..."
+
+  ### force remove existing octoapp dir and clone into fresh octoapp dir
+  [[ -d ${OCTOAPP_DIR} ]] && rm -rf "${OCTOAPP_DIR}"
+
+  cd "${HOME}" || exit 1
+  if ! git clone "${OCTOAPP_REPO}" "${OCTOAPP_DIR}"; then
+    print_error "Cloning OctoApp from\n ${repo}\n failed!"
+    exit 1
+  fi
+}
+
+function install_octoapp_dependencies() {
+  local packages log_name="OctoApp"
+  local install_script="${OCTOAPP_DIR}/install.sh"
+
+  ### read PKGLIST from official install-script
+  status_msg "Reading dependencies..."
+  # shellcheck disable=SC2016
+  packages="$(grep "PKGLIST=" "${install_script}" | cut -d'"' -f2 | sed 's/\${PKGLIST}//g' | tr -d '\n')"
+
+  echo "${cyan}${packages}${white}" | tr '[:space:]' '\n'
+  read -r -a packages <<< "${packages}"
+
+  ### Update system package lists if stale
+  update_system_package_lists
+
+  ### Install required packages
+  install_system_packages "${log_name}" "packages[@]"
+}
+
+#===================================================#
+#=============        STATUS          ==============#
+#===================================================#
+
+function get_octoapp_status() {
+  local status
+  local service_count
+  local octoapp_services
+
+  octoapp_services=$(octoapp_systemd)
+  service_count=$(echo "${octoapp_services}" | wc -w )
+
+  if (( service_count == 0 )); then
+    status="Not installed!"
+  elif [[ ! -d "${OCTOAPP_DIR}" ]]; then
+    status="Incomplete!"
+  else
+    status="Installed!"
+  fi
+
+  echo "${status}"
+}
+
+function get_local_octoapp_commit() {
+  [[ ! -d ${OCTOAPP_DIR} || ! -d "${OCTOAPP_DIR}/.git" ]] && return
+
+  local commit
+  cd "${OCTOAPP_DIR}"
+  commit="$(git describe HEAD --always --tags | cut -d "-" -f 1,2)"
+  echo "${commit}"
+}
+
+function get_remote_octoapp_commit() {
+  [[ ! -d ${OCTOAPP_DIR} || ! -d "${OCTOAPP_DIR}/.git" ]] && return
+
+  local commit
+  cd "${OCTOAPP_DIR}" && git fetch origin -q
+  commit=$(git describe origin/release --always --tags | cut -d "-" -f 1,2)
+  echo "${commit}"
+}
+
+function compare_octoapp_versions() {
+  local versions local_ver remote_ver
+  local_ver="$(get_local_octoapp_commit)"
+  remote_ver="$(get_remote_octoapp_commit)"
+
+  if [[ ${local_ver} != "${remote_ver}" ]]; then
+    versions="${yellow}$(printf " %-14s" "${local_ver}")${white}"
+    versions+="|${green}$(printf " %-13s" "${remote_ver}")${white}"
+    # Add us to the update file, so if the user selects "update all" it includes us.
+    add_to_application_updates "octoapp"
+  else
+    versions="${green}$(printf " %-14s" "${local_ver}")${white}"
+    versions+="|${green}$(printf " %-13s" "${remote_ver}")${white}"
+  fi
+
+  echo "${versions}"
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/octoeverywhere.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/octoeverywhere.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/octoeverywhere.sh	2023-12-15 01:08:34.861257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/octoeverywhere.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/octoprint.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/octoprint.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/octoprint.sh	2023-12-15 01:08:34.861257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/octoprint.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/pretty_gcode.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/pretty_gcode.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/pretty_gcode.sh	2023-12-15 01:08:34.861257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/pretty_gcode.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/rollback.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/rollback.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/rollback.sh	2023-12-15 01:08:34.861257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/rollback.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/spoolman.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/spoolman.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/spoolman.sh	1969-12-31 19:00:00.000000000 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/spoolman.sh	2024-10-08 17:45:33.575241837 -0400
@@ -0,0 +1,281 @@
+#!/usr/bin/env bash
+
+#=======================================================================#
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
+#                                                                       #
+# This file is part of KIAUH - Klipper Installation And Update Helper   #
+# https://github.com/dw-0/kiauh                                         #
+#                                                                       #
+# This file may be distributed under the terms of the GNU GPLv3 license #
+#=======================================================================#
+
+# Error Handling
+set -e
+
+function install_spoolman() {
+
+  pushd "${HOME}" &> /dev/null || exit 1
+
+  dependency_check curl jq
+
+  if [[ ! -d "${SPOOLMAN_DIR}" && -z "$(ls -A "${SPOOLMAN_DIR}" 2> /dev/null)" ]]; then
+    status_msg "Downloading spoolman..."
+    setup_spoolman_folder
+    status_msg "Downloading complete"
+    start_install_script
+    advanced_config_prompt
+  else
+    ### In case spoolman is "incomplete" rerun install script
+    if get_spoolman_status | grep -q "Incomplete!"; then
+      start_install_script
+      exit 1
+    fi
+
+    ok_msg "Spoolman already installed"
+    exit 1
+  fi
+
+  enable_moonraker_integration_prompt
+  patch_spoolman_update_manager
+
+  do_action_service "restart" "moonraker"
+}
+
+function update_spoolman() {
+  ### stop and disable old spoolman service
+  do_action_service "stop" "Spoolman"
+  do_action_service "disable" "Spoolman"
+
+  mv "${SPOOLMAN_DIR}" "${SPOOLMAN_DIR}_old"
+
+  setup_spoolman_folder
+  cp "${SPOOLMAN_DIR}_old/.env" "${SPOOLMAN_DIR}/.env"
+
+  start_install_script
+
+  rm -rf "${SPOOLMAN_DIR}_old"
+}
+
+function remove_spoolman(){
+  if [[ -d "${SPOOLMAN_DIR}" ]]; then
+    status_msg "Removing spoolman service..."
+    do_action_service "stop" "Spoolman"
+    do_action_service "disable" "Spoolman"
+    sudo rm -f "${SYSTEMD}/Spoolman.service"
+    sudo systemctl daemon-reload
+    sudo systemctl reset-failed
+    ok_msg "Spoolman service removed!"
+
+    status_msg "Removing spoolman directory..."
+    rm -rf "${SPOOLMAN_DIR}"
+    ok_msg "Spoolman directory removed!"
+  fi
+
+  print_confirm "Spoolman successfully removed!"
+}
+
+function update_moonraker_configs() {
+  local moonraker_configs regex
+  regex="${HOME//\//\\/}\/([A-Za-z0-9_]+)\/config\/moonraker\.conf"
+  moonraker_configs=$(find "${HOME}" -maxdepth 3 -type f -regextype posix-extended -regex "${regex}" | sort)
+
+  for conf in ${moonraker_configs}; do
+    if ! grep -Eq "^\[update_manager Spoolman\]\s*$" "${conf}"; then
+      ### add new line to conf if it doesn't end with one
+      [[ $(tail -c1 "${conf}" | wc -l) -eq 0 ]] && echo "" >> "${conf}"
+      /bin/sh -c "cat >> ${conf}" << MOONRAKER_CONF
+${1}
+MOONRAKER_CONF
+    fi
+  done
+}
+
+function enable_moonraker_integration() {
+  local integration_str env_port
+  # get spoolman port from .env
+  env_port=$(grep "^SPOOLMAN_PORT=" "${SPOOLMAN_DIR}/.env" | cut -d"=" -f2)
+
+  integration_str="
+[spoolman]
+server: http://$(hostname -I | cut -d" " -f1):${env_port}
+"
+
+  status_msg "Adding Spoolman integration..."
+  update_moonraker_configs "${integration_str}"
+}
+
+function patch_spoolman_update_manager() {
+  local updater_str
+  updater_str="
+[update_manager Spoolman]
+type: zip
+channel: stable
+repo: Donkie/Spoolman
+path: ${SPOOLMAN_DIR}
+virtualenv: .venv
+requirements: requirements.txt
+persistent_files:
+  .venv
+  .env
+managed_services: Spoolman
+"
+
+  update_moonraker_configs "${updater_str}"
+
+  # add spoolman service to moonraker.asvc
+  local moonraker_asvc regex
+  regex="${HOME//\//\\/}\/([A-Za-z0-9_]+)\/moonraker\.asvc"
+  moonraker_asvc=$(find "${HOME}" -maxdepth 2 -type f -regextype posix-extended -regex "${regex}" | sort)
+
+  if [[ -n ${moonraker_asvc} ]]; then
+    status_msg "Adding Spoolman service to moonraker.asvc..."
+    /bin/sh -c "echo 'Spoolman' >> ${moonraker_asvc}"
+  fi
+}
+
+function advanced_config_prompt() {
+  local reply
+  while true; do
+    read -erp "${cyan}###### Continue with default configuration? (Y/n):${white} " reply
+    case "${reply}" in
+      Y|y|Yes|yes|"")
+        select_msg "Yes"
+        break;;
+      N|n|No|no)
+        select_msg "No"
+        advanced_config
+        break;;
+      *)
+        error_msg "Invalid Input!\n";;
+    esac
+  done
+  return 0
+}
+
+function enable_moonraker_integration_prompt() {
+  local reply
+  while true; do
+    read -erp "${cyan}###### Enable Moonraker integration? (Y/n):${white} " reply
+    case "${reply}" in
+      Y|y|Yes|yes|"")
+        select_msg "Yes"
+        enable_moonraker_integration
+        break;;
+      N|n|No|no)
+        select_msg "No"
+        break;;
+      *)
+        error_msg "Invalid Input!\n";;
+    esac
+  done
+  return 0
+}
+
+function advanced_config() {
+  status_msg "###### Advanced configuration"
+
+  local reply
+  while true; do
+    read -erp "${cyan}###### Select spoolman port (7912):${white} " reply
+    ### set default
+    if [[ -z "${reply}" ]]; then
+      reply="7912"
+    fi
+
+    select_msg "${reply}"
+    ### check if port is valid
+    if ! [[ "${reply}" =~ ^[0-9]+$ && "${reply}" -ge 1024 && "${reply}" -le 65535 ]]; then
+      error_msg "Invalid port number!\n"
+      continue
+    fi
+
+    ### update .env
+    sed -i "s/^SPOOLMAN_PORT=.*$/SPOOLMAN_PORT=${reply}/" "${SPOOLMAN_DIR}/.env"
+    do_action_service "restart" "Spoolman"
+    break
+  done
+  return 0
+}
+
+function setup_spoolman_folder() {
+  local source_url
+  ### get latest spoolman release url
+  source_url="$(curl -s "${SPOOLMAN_REPO}" | jq -r '.assets[] | select(.name == "spoolman.zip").browser_download_url')"
+
+  mkdir -p "${SPOOLMAN_DIR}"
+  curl -sSL "${source_url}" -o /tmp/temp.zip
+  unzip /tmp/temp.zip -d "${SPOOLMAN_DIR}" &> /dev/null
+  rm /tmp/temp.zip
+
+  chmod +x "${SPOOLMAN_DIR}"/scripts/install.sh
+}
+
+function start_install_script() {
+
+  pushd "${SPOOLMAN_DIR}" &> /dev/null || exit 1
+
+  if bash ./scripts/install.sh; then
+    ok_msg "Spoolman successfully installed!"
+  else
+    print_error "Spoolman installation failed!"
+    exit 1
+  fi
+}
+
+function get_spoolman_status() {
+  local -a files
+  files=(
+      "${SPOOLMAN_DIR}"
+      "${SYSTEMD}/Spoolman.service"
+      "${SPOOLMAN_DB_DIR}"
+    )
+
+  local count
+  count=0
+
+  for file in "${files[@]}"; do
+    [[ -e "${file}" ]] && count=$(( count +1 ))
+  done
+
+  if [[ "${count}" -eq "${#files[*]}" ]]; then
+    echo "Installed"
+  elif [[ "${count}" -gt 0 ]]; then
+    echo "Incomplete!"
+  else
+    echo "Not installed!"
+  fi
+}
+
+function get_local_spoolman_version() {
+  [[ ! -d "${SPOOLMAN_DIR}" ]] && return
+  
+  local version
+  version=$(grep -o '"version":\s*"[^"]*' "${SPOOLMAN_DIR}"/release_info.json | cut -d'"' -f4)
+  echo "${version}"
+}
+
+function get_remote_spoolman_version() {
+  [[ ! -d "${SPOOLMAN_DIR}" ]] && return
+
+  local version
+  version=$(curl -s "${SPOOLMAN_REPO}" | grep -o '"tag_name":\s*"v[^"]*"' | cut -d'"' -f4)
+  echo "${version}"
+}
+
+function compare_spoolman_versions() {
+  local local_ver remote_ver
+  local_ver="$(get_local_spoolman_version)"
+  remote_ver="$(get_remote_spoolman_version)"
+
+  if [[ ${local_ver} != "${remote_ver}" ]]; then
+    versions="${yellow}$(printf " %-14s" "${local_ver}")${white}"
+    versions+="|${green}$(printf " %-13s" "${remote_ver}")${white}"
+    # add spoolman to application_updates_available in kiauh.ini
+    add_to_application_updates "spoolman"
+  else
+    versions="${green}$(printf " %-14s" "${local_ver}")${white}"
+    versions+="|${green}$(printf " %-13s" "${remote_ver}")${white}"
+  fi
+
+  echo "${versions}"
+}
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/switch_klipper_repo.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/switch_klipper_repo.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/switch_klipper_repo.sh	2023-12-15 01:08:34.861257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/switch_klipper_repo.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/advanced_menu.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/advanced_menu.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/advanced_menu.sh	2023-12-15 01:08:34.865257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/advanced_menu.sh	2024-10-08 17:45:33.575241837 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/backup_menu.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/backup_menu.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/backup_menu.sh	2023-12-15 01:08:34.865257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/backup_menu.sh	2024-10-08 17:45:33.588241884 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -26,6 +26,7 @@
   echo -e "| Klipper Webinterface:      | Other:                   |"
   echo -e "|  5) [Mainsail]             |  9) [Telegram Bot]       |"
   echo -e "|  6) [Fluidd]               | 10) [OctoEverywhere]     |"
+  echo -e "|                            | 11) [Spoolman]           |"
   back_footer
 }
 
@@ -56,6 +57,8 @@
         do_action "backup_telegram_bot" "backup_ui";;
       10)
         do_action "backup_octoeverywhere" "backup_ui";;
+      11)
+        do_action "backup_spoolman" "backup_ui";;
       B|b)
         clear; main_menu; break;;
       *)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/general_ui.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/general_ui.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/general_ui.sh	2023-12-15 01:08:34.865257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/general_ui.sh	2024-10-08 17:45:33.588241884 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/install_menu.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/install_menu.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/install_menu.sh	2023-12-15 01:08:34.865257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/install_menu.sh	2024-10-08 17:45:33.588241884 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -19,23 +19,24 @@
   echo -e "|  all necessary dependencies for the various           |"
   echo -e "|  functions on a completely fresh system.              |"
   hr
-  echo -e "| Firmware & API:          | 3rd Party Webinterface:    |"
-  echo -e "|  1) [Klipper]            |  6) [OctoPrint]            |"
-  echo -e "|  2) [Moonraker]          |                            |"
-  echo -e "|                          | Other:                     |"
-  echo -e "| Klipper Webinterface:    |  7) [PrettyGCode]          |"
-  echo -e "|  3) [Mainsail]           |  8) [Telegram Bot]         |"
-  echo -e "|  4) [Fluidd]             |  9) $(obico_install_title) |"
-  echo -e "|                          | 10) [OctoEverywhere]       |"
-  echo -e "|                          | 11) [Mobileraker]          |"
+  echo -e "| Firmware & API:          | Other:                     |"
+  echo -e "|  1) [Klipper]            |  7) [PrettyGCode]          |"
+  echo -e "|  2) [Moonraker]          |  8) [Telegram Bot]         |"
+  echo -e "|                          |  9) $(obico_install_title) |"
+  echo -e "| Klipper Webinterface:    | 10) [OctoEverywhere]       |"
+  echo -e "|  3) [Mainsail]           | 11) [Mobileraker]          |"
+  echo -e "|  4) [Fluidd]             | 12) [OctoApp for Klipper]  |"
+  echo -e "|                          | 13) [Spoolman]             |"
   echo -e "| Touchscreen GUI:         |                            |"
   echo -e "|  5) [KlipperScreen]      | Webcam Streamer:           |"
-  echo -e "|                          | 12) [Crowsnest]            |"
+  echo -e "|                          | 14) [Crowsnest]            |"
+  echo -e "| 3rd Party Webinterface:  |                            |"
+  echo -e "|  6) [OctoPrint]          |                            |"
   back_footer
 }
 
 function install_menu() {
-  clear -x && sudo -v && clear -x # (re)cache sudo credentials so password prompt doesn't bork ui
+  clear -x && sudo true && clear -x # (re)cache sudo credentials so password prompt doesn't bork ui
   print_header
   install_ui
 
@@ -72,6 +73,10 @@
       11)
         do_action "install_mobileraker" "install_ui";;
       12)
+        do_action "octoapp_setup_dialog" "install_ui";;
+      13)
+        do_action "install_spoolman" "install_ui";;
+      14)
         do_action "install_crowsnest" "install_ui";;
       B|b)
         clear; main_menu; break;;
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/main_menu.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/main_menu.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/main_menu.sh	2023-12-15 01:08:34.865257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/main_menu.sh	2024-10-08 17:45:33.588241884 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -28,6 +28,8 @@
   echo -e "|                  |           Obico: $(print_status "moonraker_obico")|"
   echo -e "|                  |  OctoEverywhere: $(print_status "octoeverywhere")|"
   echo -e "|                  |     Mobileraker: $(print_status "mobileraker")|"
+  echo -e "|                  |         OctoApp: $(print_status "octoapp")|"
+  echo -e "|                  |        Spoolman: $(print_status "spoolman")|"
   echo -e "|                  |                                    |"
   echo -e "|                  |       Octoprint: $(print_status "octoprint")|"
   hr
@@ -38,7 +40,7 @@
 function get_kiauh_version() {
   local version
   cd "${KIAUH_SRCDIR}"
-  version="$(git describe HEAD --always --tags | cut -d "-" -f 1,2)"
+  version="$(git tag -l 'v5*' | tail -1)"
   echo "${version}"
 }
 
@@ -91,9 +93,6 @@
   clear && print_header
   main_ui
 
-  ### initialize kiauh.ini
-  init_ini
-
   local action
   while true; do
     read -p "${cyan}####### Perform action:${white} " action
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/remove_menu.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/remove_menu.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/remove_menu.sh	2023-12-15 01:08:34.865257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/remove_menu.sh	2024-10-08 17:45:33.588241884 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -17,20 +17,21 @@
   hr
   echo -e "| ${yellow}INFO: Configurations and/or any backups will be kept!${white} |"
   hr
-  echo -e "| Firmware & API:           | 3rd Party Webinterface:   |"
-  echo -e "|  1) [Klipper]             |  8) [OctoPrint]           |"
-  echo -e "|  2) [Moonraker]           |                           |"
-  echo -e "|                           | Webcam Streamer:          |"
-  echo -e "| Klipper Webinterface:     |  9) [Crowsnest]           |"
-  echo -e "|  3) [Mainsail]            | 10) [MJPG-Streamer]       |"
-  echo -e "|  4) [Mainsail-Config]     |                           |"
-  echo -e "|  5) [Fluidd]              | Other:                    |"
-  echo -e "|  6) [Fluidd-Config]       | 11) [PrettyGCode]         |"
-  echo -e "|                           | 12) [Telegram Bot]        |"
-  echo -e "| Touchscreen GUI:          | 13) [Obico for Klipper]   |"
-  echo -e "|  7) [KlipperScreen]       | 14) [OctoEverywhere]      |"
+  echo -e "| Firmware & API:           | Webcam Streamer:          |"
+  echo -e "|  1) [Klipper]             |  9) [Crowsnest]           |"
+  echo -e "|  2) [Moonraker]           | 10) [MJPG-Streamer]       |"
+  echo -e "|                           |                           |"
+  echo -e "| Klipper Webinterface:     | Other:                    |"
+  echo -e "|  3) [Mainsail]            | 11) [PrettyGCode]         |"
+  echo -e "|  4) [Mainsail-Config]     | 12) [Telegram Bot]        |"
+  echo -e "|  5) [Fluidd]              | 13) [Obico for Klipper]   |"
+  echo -e "|  6) [Fluidd-Config]       | 14) [OctoEverywhere]      |"
   echo -e "|                           | 15) [Mobileraker]         |"
-  echo -e "|                           | 16) [NGINX]               |"
+  echo -e "| Touchscreen GUI:          | 16) [NGINX]               |"
+  echo -e "|  7) [KlipperScreen]       | 17) [OctoApp]             |"
+  echo -e "|                           | 18) [Spoolman]            |"
+  echo -e "| 3rd Party Webinterface:   |                           |"
+  echo -e "|  8) [OctoPrint]           |                           |"
   back_footer
 }
 
@@ -73,6 +74,10 @@
         do_action "remove_mobileraker" "remove_ui";;
       16)
         do_action "remove_nginx" "remove_ui";;
+      17)
+        do_action "remove_octoapp" "remove_ui";;
+      18)
+        do_action "remove_spoolman" "remove_ui";;
       B|b)
         clear; main_menu; break;;
       *)
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/settings_menu.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/settings_menu.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/settings_menu.sh	2023-12-15 01:08:34.865257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/settings_menu.sh	2024-10-08 17:45:33.588241884 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/update_menu.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/update_menu.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/ui/update_menu.sh	2023-12-15 01:08:34.865257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/ui/update_menu.sh	2024-10-08 17:45:33.588241884 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -35,15 +35,17 @@
   echo -e "|  9) [OctoEverywhere]   |$(compare_octoeverywhere_versions)|"
   echo -e "| 10) [Mobileraker]      |$(compare_mobileraker_versions)|"
   echo -e "| 11) [Crowsnest]        |$(compare_crowsnest_versions)|"
+  echo -e "| 12) [OctoApp]          |$(compare_octoapp_versions)|"
+  echo -e "| 13) [Spoolman]         |$(compare_spoolman_versions)|"
   echo -e "|                        |------------------------------|"
-  echo -e "| 12) [System]           |  $(check_system_updates)   |"
+  echo -e "| 14) [System]           |  $(check_system_updates)   |"
   back_footer
 }
 
 function update_menu() {
-  clear -x && sudo -v && clear -x # (re)cache sudo credentials so password prompt doesn't bork ui
+  clear -x && sudo true && clear -x # (re)cache sudo credentials so password prompt doesn't bork ui
   do_action "" "update_ui"
-  
+
   local action
   while true; do
     read -p "${cyan}####### Perform action:${white} " action
@@ -73,6 +75,10 @@
       11)
         do_action "update_crowsnest" "update_ui";;
       12)
+        do_action "update_octoapp" "update_ui";;
+      13)
+        do_action "update_spoolman" "update_ui";;
+      14)
         do_action "upgrade_system_packages" "update_ui";;
       a)
         do_action "update_all" "update_ui";;
@@ -98,7 +104,7 @@
       print_confirm "Everything is already up-to-date!"
       echo; break
     fi
-    
+
     echo
     top_border
     echo -e "|  The following installations will be updated:         |"
@@ -118,6 +124,9 @@
     [[ "${update_arr[*]}" =~ "klipperscreen" ]] && \
     echo -e "|  ${cyan}● KlipperScreen${white}                                      |"
 
+    [[ "${update_arr[*]}" =~ "spoolman" ]] && \
+    echo -e "|  ${cyan}● SpoolMan${white}                                      |"
+
     [[ "${update_arr[*]}" =~ "pgc_for_klipper" ]] && \
     echo -e "|  ${cyan}● PrettyGCode for Klipper${white}                            |"
 
@@ -128,13 +137,16 @@
     echo -e "|  ${cyan}● OctoEverywhere${white}                                     |"
 
     [[ "${update_arr[*]}" =~ "mobileraker" ]] && \
-    echo -e "|  ${cyan}● Mobileraker${white}                                     |"
+    echo -e "|  ${cyan}● Mobileraker${white}                                        |"
+
+    [[ "${update_arr[*]}" =~ "octoapp" ]] && \
+    echo -e "|  ${cyan}● OctoApp${white}                                            |"
 
     [[ "${update_arr[*]}" =~ "system" ]] && \
     echo -e "|  ${cyan}● System${white}                                             |"
 
     bottom_border
-    
+
     local yn
     read -p "${cyan}###### Do you want to proceed? (Y/n):${white} " yn
     case "${yn}" in
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/upload_log.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/upload_log.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/upload_log.sh	2023-12-15 01:08:34.869257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/upload_log.sh	2024-10-08 17:45:33.588241884 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
diff -urN /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/utilities.sh /home/mks/firmware_comparison/downloads/kiauh/scripts/utilities.sh
--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/kiauh/scripts/utilities.sh	2023-12-15 01:08:34.869257048 -0500
+++ /home/mks/firmware_comparison/downloads/kiauh/scripts/utilities.sh	2024-10-08 17:45:33.588241884 -0400
@@ -1,7 +1,7 @@
 #!/usr/bin/env bash
 
 #=======================================================================#
-# Copyright (C) 2020 - 2023 Dominik Willner <th33xitus@gmail.com>       #
+# Copyright (C) 2020 - 2024 Dominik Willner <th33xitus@gmail.com>       #
 #                                                                       #
 # This file is part of KIAUH - Klipper Installation And Update Helper   #
 # https://github.com/dw-0/kiauh                                         #
@@ -28,6 +28,21 @@
   fi
 }
 
+function check_if_ratos() {
+  if [[ -n $(which ratos) ]]; then
+    echo -e "${red}"
+    top_border
+    echo -e "|        !!! RatOS 2.1 or greater detected !!!          |"
+    echo -e "|                                                       |"
+    echo -e "|        KIAUH does currently not support RatOS.        |"
+    echo -e "| If you have any questions, please ask for help on the |"
+    echo -e "| RatRig Community Discord: https://discord.gg/ratrig   |"
+    bottom_border
+    echo -e "${white}"
+    exit 1
+  fi
+}
+
 #================================================#
 #============= MESSAGE FORMATTING ===============#
 #================================================#
@@ -178,6 +193,10 @@
     echo -e "\nmulti_instance_names=\c" >> "${INI_FILE}"
   fi
 
+  if ! grep -Eq "^version_to_launch=" "${INI_FILE}"; then
+    echo -e "\nversion_to_launch=\n\c" >> "${INI_FILE}"
+  fi
+
   ### strip all empty lines out of the file
   sed -i "/^[[:blank:]]*$/ d" "${INI_FILE}"
 }
@@ -362,9 +381,9 @@
 
 function update_system_package_lists() {
   local cache_mtime update_age update_interval silent
-  
+
   if [[ $1 == '--silent' ]]; then silent="true"; fi
-  
+
   if [[ -e /var/lib/apt/periodic/update-success-stamp ]]; then
     cache_mtime="$(stat -c %Y /var/lib/apt/periodic/update-success-stamp)"
   elif [[ -e /var/lib/apt/lists ]]; then
@@ -396,10 +415,10 @@
 function check_system_updates() {
   local updates_avail status
   if ! update_system_package_lists --silent; then
-    status="${red}Update check failed!     ${white}" 
+    status="${red}Update check failed!     ${white}"
   else
     updates_avail="$(apt list --upgradeable 2>/dev/null | sed "1d")"
-    
+
     if [[ -n ${updates_avail} ]]; then
       status="${yellow}System upgrade available!${white}"
       # add system to application_updates_available in kiauh.ini
@@ -408,7 +427,7 @@
       status="${green}System up to date!       ${white}"
     fi
   fi
-  
+
   echo "${status}"
 }
 
