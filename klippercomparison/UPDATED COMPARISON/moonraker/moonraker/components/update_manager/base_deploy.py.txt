Differences in moonraker/components/update_manager/base_deploy.py:

- Lines with differences: 35 lines in 6 blocks

Detailed Differences:

--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/moonraker/moonraker/components/update_manager/base_deploy.py	2022-07-25 05:53:30.910869307 -0400
+++ /home/mks/firmware_comparison/downloads/moonraker/moonraker/components/update_manager/base_deploy.py	2024-10-08 17:45:43.667278026 -0400
@@ -7,11 +7,12 @@
 from __future__ import annotations
 import logging
 import time
+from ...utils import pretty_print_time
 
-from typing import TYPE_CHECKING, Dict, Any, Optional
+from typing import TYPE_CHECKING, Dict, Any, Optional, Coroutine
 if TYPE_CHECKING:
-    from confighelper import ConfigHelper
-    from utils import ServerError
+    from ...confighelper import ConfigHelper
+    from ...utils import ServerError
     from .update_manager import CommandHelper
 
 class BaseDeploy:
@@ -23,7 +24,7 @@
                  cfg_hash: Optional[str] = None
                  ) -> None:
         if name is None:
-            name = config.get_name().split()[-1]
+            name = self.parse_name(config)
         self.name = name
         if prefix:
             prefix = f"{prefix} {self.name}: "
@@ -38,6 +39,14 @@
             cfg_hash = config.get_hash().hexdigest()
         self.cfg_hash = cfg_hash
 
+    @staticmethod
+    def parse_name(config: ConfigHelper) -> str:
+        name = config.get_name().split(maxsplit=1)[-1]
+        if name.startswith("client "):
+            # allow deprecated [update_manager client app] style names
+            name = name[7:]
+        return name
+
     async def initialize(self) -> Dict[str, Any]:
         umdb = self.cmd_helper.get_umdb()
         storage: Dict[str, Any] = await umdb.get(self.name, {})
@@ -45,12 +54,14 @@
         self.last_cfg_hash: str = storage.get('last_config_hash', "")
         return storage
 
-    def needs_refresh(self) -> bool:
+    def needs_refresh(self, log_remaining_time: bool = False) -> bool:
         next_refresh_time = self.last_refresh_time + self.refresh_interval
-        return (
-            self.cfg_hash != self.last_cfg_hash or
-            time.time() > next_refresh_time
-        )
+        remaining_time = int(next_refresh_time - time.time() + .5)
+        if self.cfg_hash != self.last_cfg_hash or remaining_time <= 0:
+            return True
+        if log_remaining_time:
+            self.log_info(f"Next refresh in: {pretty_print_time(remaining_time)}")
+        return False
 
     def get_last_refresh_time(self) -> float:
         return self.last_refresh_time
@@ -61,6 +72,9 @@
     async def update(self) -> bool:
         return False
 
+    async def rollback(self) -> bool:
+        raise self.server.error(f"Rollback not available for {self.name}")
+
     def get_update_status(self) -> Dict[str, Any]:
         return {}
 
@@ -88,7 +102,14 @@
         log_msg = f"{self.prefix}{msg}"
         logging.info(log_msg)
 
+    def log_debug(self, msg: str) -> None:
+        log_msg = f"{self.prefix}{msg}"
+        logging.debug(log_msg)
+
     def notify_status(self, msg: str, is_complete: bool = False) -> None:
         log_msg = f"{self.prefix}{msg}"
         logging.debug(log_msg)
         self.cmd_helper.notify_update_response(log_msg, is_complete)
+
+    def close(self) -> Optional[Coroutine]:
+        return None
