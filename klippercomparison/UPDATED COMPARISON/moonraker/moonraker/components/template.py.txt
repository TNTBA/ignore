Differences in moonraker/components/template.py:

- Lines with differences: 44 lines in 5 blocks

Detailed Differences:

--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/moonraker/moonraker/components/template.py	2022-07-25 05:53:30.910869307 -0400
+++ /home/mks/firmware_comparison/downloads/moonraker/moonraker/components/template.py	2024-10-08 17:45:43.667278026 -0400
@@ -5,8 +5,10 @@
 # This file may be distributed under the terms of the GNU GPLv3 license.
 from __future__ import annotations
 import logging
+import asyncio
 import jinja2
-import json
+from ..utils import json_wrapper as jsonw
+from ..common import RenderableTemplate
 
 # Annotation imports
 from typing import (
@@ -16,8 +18,8 @@
 )
 
 if TYPE_CHECKING:
-    from moonraker import Server
-    from confighelper import ConfigHelper
+    from ..server import Server
+    from ..confighelper import ConfigHelper
     from .secrets import Secrets
 
 class TemplateFactory:
@@ -25,12 +27,16 @@
         self.server = config.get_server()
         secrets: Secrets = self.server.load_component(config, 'secrets')
         self.jenv = jinja2.Environment('{%', '%}', '{', '}')
-        self.async_env = jinja2.Environment('{%', '%}', '{', '}',
-                                            enable_async=True)
+        self.async_env = jinja2.Environment(
+            '{%', '%}', '{', '}', enable_async=True
+        )
+        self.ui_env = jinja2.Environment(enable_async=True)
         self.jenv.add_extension("jinja2.ext.do")
-        self.jenv.filters['fromjson'] = json.loads
+        self.jenv.filters['fromjson'] = jsonw.loads
         self.async_env.add_extension("jinja2.ext.do")
-        self.async_env.filters['fromjson'] = json.loads
+        self.async_env.filters['fromjson'] = jsonw.loads
+        self.ui_env.add_extension("jinja2.ext.do")
+        self.ui_env.filters['fromjson'] = jsonw.loads
         self.add_environment_global('raise_error', self._raise_error)
         self.add_environment_global('secrets', secrets)
 
@@ -56,8 +62,16 @@
             raise
         return JinjaTemplate(source, self.server, template, is_async)
 
+    def create_ui_template(self, source: str) -> JinjaTemplate:
+        try:
+            template = self.ui_env.from_string(source)
+        except Exception:
+            logging.exception(f"Error creating template from source:\n{source}")
+            raise
+        return JinjaTemplate(source, self.server, template, True)
 
-class JinjaTemplate:
+
+class JinjaTemplate(RenderableTemplate):
     def __init__(self,
                  source: str,
                  server: Server,
@@ -77,10 +91,21 @@
             raise self.server.error(
                 "Cannot render async templates with the render() method"
                 ", use render_async()")
-        return self.template.render(context).strip()
+        try:
+            return self.template.render(context).strip()
+        except Exception as e:
+            msg = "Error rending Jinja2 Template"
+            if self.server.is_configured():
+                raise self.server.error(msg, 500) from e
+            raise self.server.config_error(msg) from e
 
     async def render_async(self, context: Dict[str, Any] = {}) -> str:
-        ret = await self.template.render_async(context)
+        try:
+            ret = await self.template.render_async(context)
+        except asyncio.CancelledError:
+            raise
+        except Exception as e:
+            raise self.server.error("Error rending Jinja2 Template", 500) from e
         return ret.strip()
 
 def load_component(config: ConfigHelper) -> TemplateFactory:
