Differences in moonraker/components/button.py:

- Lines with differences: 43 lines in 5 blocks

Detailed Differences:

--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/home/mks/moonraker/moonraker/components/button.py	2022-07-25 05:53:30.894869266 -0400
+++ /home/mks/firmware_comparison/downloads/moonraker/moonraker/components/button.py	2024-10-08 17:45:43.662278009 -0400
@@ -6,7 +6,6 @@
 from __future__ import annotations
 import asyncio
 import logging
-from confighelper import SentinelClass
 
 from typing import (
     TYPE_CHECKING,
@@ -14,11 +13,9 @@
     Dict
 )
 if TYPE_CHECKING:
-    from confighelper import ConfigHelper
-    from .gpio import GpioFactory
-    from app import InternalTransport as ITransport
+    from ..confighelper import ConfigHelper
+    from .application import InternalTransport as ITransport
 
-SENTINEL = SentinelClass.get_instance()
 
 class ButtonManager:
     def __init__(self, config: ConfigHelper) -> None:
@@ -29,12 +26,12 @@
         for section in prefix_sections:
             cfg = config[section]
             # Reserve the "type" option for future use
-            btn_type = cfg.get('type', "gpio")
+            btn_type = cfg.get('type', "gpio")  # noqa: F841
             try:
                 btn = GpioButton(cfg)
             except Exception as e:
                 msg = f"Failed to load button [{cfg.get_name()}]\n{e}"
-                self.server.add_warning(msg)
+                self.server.add_warning(msg, exc_info=e)
                 continue
             self.buttons[btn.name] = btn
         self.server.register_notification("button:button_event")
@@ -48,25 +45,21 @@
         self.server = config.get_server()
         self.eventloop = self.server.get_event_loop()
         self.name = config.get_name().split()[-1]
-        self.itransport: ITransport = self.server.lookup_component(
-            'internal_transport')
+        self.itransport: ITransport = self.server.lookup_component("internal_transport")
         self.mutex = asyncio.Lock()
-        gpio: GpioFactory = self.server.load_component(config, 'gpio')
-        self.gpio_event = gpio.register_gpio_event(
-            config.get('pin'), self._on_gpio_event)
-        min_event_time = config.getfloat(
-            'minimum_event_time', .05, minval=.010)
-        self.gpio_event.setup_debounce(min_event_time, self._on_gpio_error)
-        self.press_template = config.gettemplate(
-            "on_press", None, is_async=True)
-        self.release_template = config.gettemplate(
-            "on_release", None, is_async=True)
+        self.gpio_event = config.getgpioevent("pin", self._on_gpio_event)
+        self.min_event_time = config.getfloat("minimum_event_time", 0, minval=0.0)
+        debounce_period = config.getfloat("debounce_period", .05, minval=0.01)
+        self.gpio_event.setup_debounce(debounce_period, self._on_gpio_error)
+        self.press_template = config.gettemplate("on_press", None, is_async=True)
+        self.release_template = config.gettemplate("on_release", None, is_async=True)
         if (
             self.press_template is None and
             self.release_template is None
         ):
             raise config.error(
-                f"[{config.get_name()}]: No template option configured")
+                f"[{config.get_name()}]: No template option configured"
+            )
         self.notification_sent: bool = False
         self.user_data: Dict[str, Any] = {}
         self.context: Dict[str, Any] = {
@@ -101,11 +94,11 @@
         data['aux'] = result
         self.server.send_event("button:button_event", data)
 
-    async def _on_gpio_event(self,
-                             eventtime: float,
-                             elapsed_time: float,
-                             pressed: int
-                             ) -> None:
+    async def _on_gpio_event(
+        self, eventtime: float, elapsed_time: float, pressed: int
+    ) -> None:
+        if elapsed_time < self.min_event_time:
+            return
         template = self.press_template if pressed else self.release_template
         if template is None:
             return
