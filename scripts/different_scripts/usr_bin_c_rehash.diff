--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/usr/bin/c_rehash	2022-06-24 16:07:00.000000000 -0400
+++ /media/mks/armbi_root/usr/bin/c_rehash	2024-03-03 04:47:43.000000000 -0500
@@ -4,7 +4,7 @@
 # Generated by Makefile from ../tools/c_rehash.in
 # Copyright 1999-2022 The OpenSSL Project Authors. All Rights Reserved.
 #
-# Licensed under the OpenSSL license (the "License").  You may not use
+# Licensed under the Apache License 2.0 (the "License").  You may not use
 # this file except in compliance with the License.  You can obtain a copy
 # in the file LICENSE in the source distribution or at
 # https://www.openssl.org/source/license.html
@@ -27,32 +27,32 @@
     my $flag = shift @ARGV;
     last if ( $flag eq '--');
     if ( $flag eq '-h' || $flag eq '-help' ) {
-	    help();
+        help();
     } elsif ( $flag eq '-n' ) {
-	    $removelinks = 0;
+        $removelinks = 0;
     } elsif ( $flag eq '-v' ) {
-	    $verbose++;
+        $verbose++;
     }
     else {
-	    print STDERR "Usage error; try -h.\n";
-	    exit 1;
+        print STDERR "Usage error; try -h.\n";
+        exit 1;
     }
 }
 
 sub help {
-	print "Usage: c_rehash [-old] [-h] [-help] [-v] [dirs...]\n";
-	print "   -old use old-style digest\n";
-	print "   -h or -help print this help text\n";
-	print "   -v print files removed and linked\n";
-	exit 0;
+    print "Usage: c_rehash [-old] [-h] [-help] [-v] [dirs...]\n";
+    print "   -old use old-style digest\n";
+    print "   -h or -help print this help text\n";
+    print "   -v print files removed and linked\n";
+    exit 0;
 }
 
 eval "require Cwd";
 if (defined(&Cwd::getcwd)) {
-	$pwd=Cwd::getcwd();
+    $pwd=Cwd::getcwd();
 } else {
-	$pwd=`pwd`;
-	chomp($pwd);
+    $pwd=`pwd`;
+    chomp($pwd);
 }
 
 # DOS/Win32 or Unix delimiter?  Prefix our installdir, then search.
@@ -60,43 +60,43 @@
 $ENV{PATH} = "$prefix/bin" . ($ENV{PATH} ? $path_delim . $ENV{PATH} : "");
 
 if (! -x $openssl) {
-	my $found = 0;
-	foreach (split /$path_delim/, $ENV{PATH}) {
-		if (-x "$_/$openssl") {
-			$found = 1;
-			$openssl = "$_/$openssl";
-			last;
-		}	
-	}
-	if ($found == 0) {
-		print STDERR "c_rehash: rehashing skipped ('openssl' program not available)\n";
-		exit 0;
-	}
+    my $found = 0;
+    foreach (split /$path_delim/, $ENV{PATH}) {
+        if (-x "$_/$openssl") {
+            $found = 1;
+            $openssl = "$_/$openssl";
+            last;
+        }
+    }
+    if ($found == 0) {
+        print STDERR "c_rehash: rehashing skipped ('openssl' program not available)\n";
+        exit 0;
+    }
 }
 
 if (@ARGV) {
-	@dirlist = @ARGV;
+    @dirlist = @ARGV;
 } elsif ($ENV{SSL_CERT_DIR}) {
-	@dirlist = split /$path_delim/, $ENV{SSL_CERT_DIR};
+    @dirlist = split /$path_delim/, $ENV{SSL_CERT_DIR};
 } else {
-	$dirlist[0] = "$dir/certs";
+    $dirlist[0] = "$dir/certs";
 }
 
 if (-d $dirlist[0]) {
-	chdir $dirlist[0];
-	$openssl="$pwd/$openssl" if (!-x $openssl);
-	chdir $pwd;
+    chdir $dirlist[0];
+    $openssl="$pwd/$openssl" if (!-x $openssl);
+    chdir $pwd;
 }
 
 foreach (@dirlist) {
-	if (-d $_ ) {
-            if ( -w $_) {
-		hash_dir($_);
-            } else {
-                print "Skipping $_, can't write\n";
-                $errorcount++;
-            }
-	}
+    if (-d $_ ) {
+        if ( -w $_) {
+            hash_dir($_);
+        } else {
+            print "Skipping $_, can't write\n";
+            $errorcount++;
+        }
+    }
 }
 exit($errorcount);
 
@@ -118,60 +118,60 @@
 
 sub hash_dir {
     my $dir = shift;
-	my %hashlist;
+    my %hashlist;
+
+    print "Doing $dir\n";
 
-	print "Doing $dir\n";
+    if (!chdir $dir) {
+        print STDERR "WARNING: Cannot chdir to '$dir', $!\n";
+        return;
+    }
 
-	if (!chdir $dir) {
-		print STDERR "WARNING: Cannot chdir to '$dir', $!\n";
-		return;
-	}
-
-	opendir(DIR, ".") || print STDERR "WARNING: Cannot opendir '.', $!\n";
-	my @flist = sort readdir(DIR);
-	closedir DIR;
-	if ( $removelinks ) {
-		# Delete any existing symbolic links
-		foreach (grep {/^[\da-f]+\.r{0,1}\d+$/} @flist) {
-			if (-l $_) {
-				print "unlink $_\n" if $verbose;
-				unlink $_ || warn "Can't unlink $_, $!\n";
-			}
-		}
-	}
-	FILE: foreach $fname (grep {/\.(pem)|(crt)|(cer)|(crl)$/} @flist) {
-		# Check to see if certificates and/or CRLs present.
-		my ($cert, $crl) = check_file($fname);
-		if (!$cert && !$crl) {
-			print STDERR "WARNING: $fname does not contain a certificate or CRL: skipping\n";
-			next;
-		}
-		link_hash_cert($fname) if ($cert);
-		link_hash_crl($fname) if ($crl);
-	}
+    opendir(DIR, ".") || print STDERR "WARNING: Cannot opendir '.', $!\n";
+    my @flist = sort readdir(DIR);
+    closedir DIR;
+    if ( $removelinks ) {
+        # Delete any existing symbolic links
+        foreach (grep {/^[\da-f]+\.r{0,1}\d+$/} @flist) {
+            if (-l $_) {
+                print "unlink $_\n" if $verbose;
+                unlink $_ || warn "Can't unlink $_, $!\n";
+            }
+        }
+    }
+    FILE: foreach $fname (grep {/\.(pem)|(crt)|(cer)|(crl)$/} @flist) {
+        # Check to see if certificates and/or CRLs present.
+        my ($cert, $crl) = check_file($fname);
+        if (!$cert && !$crl) {
+            print STDERR "WARNING: $fname does not contain a certificate or CRL: skipping\n";
+            next;
+        }
+        link_hash_cert($fname) if ($cert);
+        link_hash_crl($fname) if ($crl);
+    }
 
-	chdir $pwd;
+    chdir $pwd;
 }
 
 sub check_file {
-	my ($is_cert, $is_crl) = (0,0);
-	my $fname = $_[0];
+    my ($is_cert, $is_crl) = (0,0);
+    my $fname = $_[0];
 
-	open(my $in, "<", $fname);
-	while(<$in>) {
-		if (/^-----BEGIN (.*)-----/) {
-			my $hdr = $1;
-			if ($hdr =~ /^(X509 |TRUSTED |)CERTIFICATE$/) {
-				$is_cert = 1;
-				last if ($is_crl);
-			} elsif ($hdr eq "X509 CRL") {
-				$is_crl = 1;
-				last if ($is_cert);
-			}
-		}
-	}
-	close $in;
-	return ($is_cert, $is_crl);
+    open(my $in, "<", $fname);
+    while(<$in>) {
+        if (/^-----BEGIN (.*)-----/) {
+            my $hdr = $1;
+            if ($hdr =~ /^(X509 |TRUSTED |)CERTIFICATE$/) {
+                $is_cert = 1;
+                last if ($is_crl);
+            } elsif ($hdr eq "X509 CRL") {
+                $is_crl = 1;
+                last if ($is_cert);
+            }
+        }
+    }
+    close $in;
+    return ($is_cert, $is_crl);
 }
 
 sub compute_hash {
@@ -199,8 +199,8 @@
 # certificate fingerprints
 
 sub link_hash_cert {
-	link_hash($_[0], 'cert', '-subject_hash');
-	link_hash($_[0], 'cert', '-subject_hash_old');
+    link_hash($_[0], 'cert', '-subject_hash');
+    link_hash($_[0], 'cert', '-subject_hash_old');
 }
 
 # Same as above except for a CRL. CRL links are of the form <hash>.r<n>
@@ -217,32 +217,33 @@
     my ($hash, $fprint) = compute_hash($openssl,
                                        $is_cert ? "x509" : "crl",
                                        $hash_name,
-						   "-fingerprint", "-noout",
-						   "-in", $fname);
-		chomp $hash;
-		chomp $fprint;
-		return if !$hash;
-		$fprint =~ s/^.*=//;
-		$fprint =~ tr/://d;
-		my $suffix = 0;
-		# Search for an unused hash filename
+                                       "-fingerprint", "-noout",
+                                       "-in", $fname);
+    chomp $hash;
+    $hash =~ s/^.*=// if !$is_cert;
+    chomp $fprint;
+    return if !$hash;
+    $fprint =~ s/^.*=//;
+    $fprint =~ tr/://d;
+    my $suffix = 0;
+    # Search for an unused hash filename
     my $crlmark = $is_cert ? "" : "r";
     while(exists $hashlist{"$hash.$crlmark$suffix"}) {
-			# Hash matches: if fingerprint matches its a duplicate cert
+        # Hash matches: if fingerprint matches its a duplicate cert
         if ($hashlist{"$hash.$crlmark$suffix"} eq $fprint) {
             my $what = $is_cert ? 'certificate' : 'CRL';
             print STDERR "WARNING: Skipping duplicate $what $fname\n";
-				return;
-			}
-			$suffix++;
-		}
+            return;
+        }
+        $suffix++;
+    }
     $hash .= ".$crlmark$suffix";
-		if ($symlink_exists) {
-			print "link $fname -> $hash\n" if $verbose;
-			symlink $fname, $hash || warn "Can't symlink, $!";
-		} else {
-			print "copy $fname -> $hash\n" if $verbose;
+    if ($symlink_exists) {
+        print "link $fname -> $hash\n" if $verbose;
+        symlink $fname, $hash || warn "Can't symlink, $!";
+    } else {
+        print "copy $fname -> $hash\n" if $verbose;
         copy_file($fname, $hash);
-		}
-		$hashlist{$hash} = $fprint;
+    }
+    $hashlist{$hash} = $fprint;
 }
