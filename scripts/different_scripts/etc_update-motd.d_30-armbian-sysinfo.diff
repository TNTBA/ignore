--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/etc/update-motd.d/30-armbian-sysinfo	2022-07-21 02:19:01.000000000 -0400
+++ /media/mks/armbi_root/etc/update-motd.d/30-armbian-sysinfo	2023-12-12 11:04:09.000000000 -0500
@@ -34,11 +34,17 @@
 
 # don't edit below here
 
+# Include functions:
+# getboardtemp()
+# batteryinfo()
+# ambienttemp()
+source /usr/lib/armbian/armbian-allwinner-battery
+
 function display() {
 	# $1=name $2=value $3=red_limit $4=minimal_show_limit $5=unit $6=after $7=acs/desc{
 	# battery red color is opposite, lower number
 	if [[ "$1" == "Battery" ]]; then local great="<"; else local great=">"; fi
-	if [[ -n "$2" && "$2" > "0" && (( "${2%.*}" -ge "$4" )) ]]; then
+	if [[ -n "$2" && "$2" -gt "0" && (( "${2%.*}" -ge "$4" )) ]]; then
 		printf "%-14s" "$1:"
 		if awk "BEGIN{exit ! ($2 $great $3)}"; then echo -ne "\e[0;91m $2"; else echo -ne "\e[0;92m $2"; fi
 		printf "%-1s\x1B[0m" "$5"
@@ -47,89 +53,6 @@
 	fi
 } # display
 
-function getboardtemp() {
-	if [ -f /etc/armbianmonitor/datasources/soctemp ]; then
-		read raw_temp </etc/armbianmonitor/datasources/soctemp 2>/dev/null
-		if [ ! -z $(echo "$raw_temp" | grep -o "^[1-9][0-9]*\.\?[0-9]*$") ] && (( $(echo "${raw_temp} < 200" |bc -l) )); then
-			# Allwinner legacy kernels output degree C
-			board_temp=${raw_temp}
-		else
-			board_temp=$(awk '{printf("%d",$1/1000)}' <<<${raw_temp})
-		fi
-	elif [ -f /etc/armbianmonitor/datasources/pmictemp ]; then
-		# fallback to PMIC temperature
-		board_temp=$(awk '{printf("%d",$1/1000)}' </etc/armbianmonitor/datasources/pmictemp)
-	fi
-	# Some boards, such as the Orange Pi Zero LTS, report shifted CPU temperatures
-	board_temp=$((board_temp + CPU_TEMP_OFFSET))
-} # getboardtemp
-
-function batteryinfo() {
-	# Battery info for Allwinner
-	mainline_dir="/sys/power/axp_pmu"
-	legacy_dir="/sys/class/power_supply"
-	if [[ -e "$mainline_dir" ]]; then
-		read status_battery_connected < $mainline_dir/battery/connected 2>/dev/null
-		if [[ "$status_battery_connected" == "1" ]]; then
-			read status_battery_charging < $mainline_dir/charger/charging
-			read status_ac_connect < $mainline_dir/ac/connected
-			read battery_percent< $mainline_dir/battery/capacity
-			# dispay charging / percentage
-			if [[ "$status_ac_connect" == "1" && "$battery_percent" -lt "100" ]]; then
-				status_battery_text=" charging"
-			elif [[ "$status_ac_connect" == "1" && "$battery_percent" -eq "100" ]]; then
-				status_battery_text=" charged"
-			else
-				status_battery_text=" discharging"
-			fi
-		fi
-	elif [[ -e "$legacy_dir/axp813-ac" ]]; then
-		read status_battery_connected < $legacy_dir/axp20x-battery/present
-		if [[ "$status_battery_connected" == "1" ]]; then
-			status_battery_text=" "$(awk '{print tolower($0)}' < $legacy_dir/axp20x-battery/status)
-			read status_ac_connect < $legacy_dir/axp813-ac/present
-			read battery_percent< $legacy_dir/axp20x-battery/capacity
-		fi
-	elif [[ -e "$legacy_dir/battery" ]]; then
-		if [[ (("$(cat $legacy_dir/battery/voltage_now)" -gt "5" )) ]]; then
-			status_battery_text=" "$(awk '{print tolower($0)}' < $legacy_dir/battery/status)
-			read battery_percent <$legacy_dir/battery/capacity
-		fi
-	fi
-} # batteryinfo
-
-function ambienttemp() {
-	# define where w1 usually shows up
-	W1_DIR="/sys/devices/w1_bus_master1/"
-	if [ -f /etc/armbianmonitor/datasources/ambienttemp ]; then
-		read raw_temp </etc/armbianmonitor/datasources/ambienttemp 2>/dev/null
-		amb_temp=$(awk '{printf("%d",$1/1000)}' <<<${raw_temp})
-		echo $amb_temp
-	elif [[ -d $W1_DIR && $ONE_WIRE == yes ]]; then
-		device=$(ls -1 $W1_DIR | grep -E '^[0-9]{1,4}' | head -1)
-		if [[ -n $device ]]; then
-			read raw_temp < ${W1_DIR}${device}/hwmon/$(ls -1 ${W1_DIR}${device}/hwmon)/temp1_input 2>/dev/null
-			amb_temp=$(awk '{printf("%d",$1/1000)}' <<<${raw_temp})
-			echo $amb_temp
-		fi
-	else
-		# read ambient temperature from USB device if available
-		if [[ ! -f /usr/bin/temper ]]; then
-			echo ""
-			return
-		fi
-		amb_temp=$(temper -c 2>/dev/null)
-		case ${amb_temp} in
-			*"find the USB device"*)
-				echo ""
-				;;
-			*)
-				amb_temp=$(awk '{print $NF}' <<<$amb_temp |  sed 's/C//g')
-				echo -n "scale=1;${amb_temp}/1" | grep -oE "\-?[[:digit:]]+\.[[:digit:]]"
-		esac
-	fi
-} # ambienttemp
-
 function get_ip_addresses() {
 	local ips=()
 	for f in /sys/class/net/*; do
@@ -138,7 +61,7 @@
 		if [[ $intf =~ $HIDE_IP_PATTERN ]]; then
 			continue
 		else
-			local tmp=$(ip -4 addr show dev $intf | grep -v "$intf:avahi" | awk '/inet/ {print $2}' | cut -d'/' -f1)
+			local tmp=$(ip -4 addr show dev $intf | grep -v "$intf:avahi" | awk '/inet/ {print $2}' | cut -d'/' -f1 | uniq)
 			# add both name and IP - can be informative but becomes ugly with long persistent/predictable device names
 			#[[ -n $tmp ]] && ips+=("$intf: $tmp")
 			# add IP only
@@ -164,8 +87,6 @@
 	fi
 } # storage_info
 
-
-
 # query various systems and send some stuff to the background for overall faster execution.
 # Works only with ambienttemp and batteryinfo since A20 is slow enough :)
 amb_temp=$(ambienttemp &)
@@ -234,11 +155,8 @@
 display "Battery" "$battery_percent" "20" "1" "%" "$status_battery_text" ; a=$((a+$?))
 (( $a > 0 )) && echo "" # new line only if some value is displayed
 
-# Check whether PRIMARY_INTERFACE exist in /var/lib/vnstat/
-PRIMARY_INTERFACE=$(comm -12 <(ls -1 /var/lib/vnstat/ 2> /dev/null) <(echo "$PRIMARY_INTERFACE" | sed 's/+/\n/g') | sed -n -e 'H;${x;s/\n/+/g;s/^+//;p;}')
-
 line=0
-if [[ $(command -v vnstat) && -n $PRIMARY_INTERFACE ]]; then
+if [[ -n "$PRIMARY_INTERFACE" ]] && vnstat -i "$PRIMARY_INTERFACE" &> /dev/null; then
 	traffic=$(vnstat -i $PRIMARY_INTERFACE --oneline | cut -d";" -f4,5)
 	traffic_rx=$(echo $traffic | cut -d";" -f1,1 | sed -r 's/([0-9]+\.[0-9]{1})[0-9]*/\1/')
 	traffic_tx=$(echo $traffic | cut -d";" -f2,2 | sed -r 's/([0-9]+\.[0-9]{1})[0-9]*/\1/')
