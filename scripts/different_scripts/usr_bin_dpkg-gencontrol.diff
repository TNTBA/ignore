--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/usr/bin/dpkg-gencontrol	2022-05-24 07:40:09.000000000 -0400
+++ /media/mks/armbi_root/usr/bin/dpkg-gencontrol	2023-05-10 22:04:01.000000000 -0400
@@ -98,7 +98,7 @@
 }
 
 while (@ARGV) {
-    $_=shift(@ARGV);
+    $_ = shift @ARGV;
     if (m/^-p/p) {
         $oppackage = ${^POSTMATCH};
         my $err = pkg_name_is_illegal($oppackage);
@@ -112,19 +112,19 @@
     } elsif (m/^-f/p) {
         $fileslistfile = ${^POSTMATCH};
     } elsif (m/^-v(.+)$/) {
-        $forceversion= $1;
+        $forceversion = $1;
     } elsif (m/^-O$/) {
-        $stdout= 1;
+        $stdout = 1;
     } elsif (m/^-O(.+)$/) {
         $outputfile = $1;
-    } elsif (m/^-i([sp][sp]?)$/) {
-        warning(g_('-i%s is deprecated; it is without effect'), $1);
+    } elsif (m/^-i[sp][sp]?$/) {
+        warning(g_('%s is deprecated; it is without effect'), $_);
     } elsif (m/^-F([0-9a-z]+)$/) {
-        $changelogformat=$1;
+        $changelogformat = $1;
     } elsif (m/^-D([^\=:]+)[=:]/p) {
         $override{$1} = ${^POSTMATCH};
     } elsif (m/^-U([^\=:]+)$/) {
-        $remove{$1}= 1;
+        $remove{$1} = 1;
     } elsif (m/^-V(\w[-:0-9A-Za-z]*)[=:]/p) {
         $substvars->set_as_used($1, ${^POSTMATCH});
     } elsif (m/^-T(.*)$/) {
@@ -163,6 +163,7 @@
 }
 
 $substvars->set_version_substvars($sourceversion, $binaryversion);
+$substvars->set_vendor_substvars();
 $substvars->set_arch_substvars();
 $substvars->load('debian/substvars') if -e 'debian/substvars' and not $substvars_loaded;
 my $control = Dpkg::Control::Info->new($controlfile);
@@ -221,8 +222,8 @@
 
 	    if (none { debarch_is($host_arch, $_) } @archlist) {
 		error(g_("current host architecture '%s' does not " .
-			 "appear in package's architecture list (%s)"),
-		      $host_arch, "@archlist");
+			 "appear in package '%s' architecture list (%s)"),
+		      $host_arch, $oppackage, "@archlist");
 	    }
 	    $fields->{$_} = $host_arch;
 	}
@@ -257,7 +258,7 @@
                               $fields->{'Architecture'}, $fields->{'Multi-Arch'});
 if (exists $pkg->{'Provides'}) {
     my $provides = deps_parse($substvars->substvars($pkg->{'Provides'}, no_warn => 1),
-                              reduce_restrictions => 1, union => 1);
+                              reduce_restrictions => 1, virtual => 1, union => 1);
     if (defined $provides) {
 	foreach my $subdep ($provides->get_deps()) {
 	    if ($subdep->isa('Dpkg::Deps::Simple')) {
@@ -281,8 +282,8 @@
 	    $dep = deps_parse($field_value, use_arch => 1,
 	                      reduce_arch => $reduce_arch,
 	                      reduce_profiles => 1);
-	    error(g_('error occurred while parsing %s field: %s'), $field,
-                  $field_value) unless defined $dep;
+            error(g_("parsing package '%s' %s field: %s"), $oppackage,
+                  $field, $field_value) unless defined $dep;
 	    $dep->simplify_deps($facts, @seen_deps);
 	    # Remember normal deps to simplify even further weaker deps
 	    push @seen_deps, $dep;
@@ -290,13 +291,13 @@
 	    $dep = deps_parse($field_value, use_arch => 1,
 	                      reduce_arch => $reduce_arch,
 	                      reduce_profiles => 1, union => 1);
-	    error(g_('error occurred while parsing %s field: %s'), $field,
-                  $field_value) unless defined $dep;
+            error(g_("parsing package '%s' %s field: %s"), $oppackage,
+                  $field, $field_value) unless defined $dep;
 	    $dep->simplify_deps($facts);
             $dep->sort();
 	}
 	error(g_('the %s field contains an arch-specific dependency but the ' .
-	         'package is architecture all'), $field)
+	         "package '%s' is architecture all"), $field, $oppackage)
 	    if $dep->has_arch_restriction();
 	$fields->{$field} = $dep->output();
 	delete $fields->{$field} unless $fields->{$field}; # Delete empty field
@@ -320,7 +321,8 @@
     delete $fields->{'Homepage'};
 } else {
     for my $f (qw(Subarchitecture Kernel-Version Installer-Menu-Item)) {
-        warning(g_('%s package with udeb specific field %s'), $pkg_type, $f)
+        warning(g_("%s package '%s' with udeb specific field %s"),
+                $pkg_type, $oppackage, $f)
             if defined($fields->{$f});
     }
 }
@@ -335,13 +337,20 @@
 
 if (!defined($substvars->get('Installed-Size'))) {
     my $installed_size = 0;
+    my %hardlink;
     my $scan_installed_size = sub {
         lstat or syserr(g_('cannot stat %s'), $File::Find::name);
 
         if (-f _ or -l _) {
+            my ($dev, $ino, $nlink) = (lstat _)[0, 1, 3];
+
             # For filesystem objects with actual content accumulate the size
             # in 1 KiB units.
-            $installed_size += POSIX::ceil((-s _) / 1024);
+            $installed_size += POSIX::ceil((-s _) / 1024)
+                if not exists $hardlink{"$dev:$ino"};
+
+            # Track hardlinks to avoid repeated additions.
+            $hardlink{"$dev:$ino"} = 1 if $nlink > 1;
         } else {
             # For other filesystem objects assume a minimum 1 KiB baseline,
             # as directories are shared resources between packages, and other
