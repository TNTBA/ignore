--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/usr/bin/dpkg-buildpackage	2022-05-24 07:40:09.000000000 -0400
+++ /media/mks/armbi_root/usr/bin/dpkg-buildpackage	2023-05-10 22:04:01.000000000 -0400
@@ -26,12 +26,13 @@
 use File::Temp qw(tempdir);
 use File::Basename;
 use File::Copy;
+use File::Glob qw(bsd_glob GLOB_TILDE GLOB_NOCHECK);
 use POSIX qw(:sys_wait_h);
 
 use Dpkg ();
 use Dpkg::Gettext;
 use Dpkg::ErrorHandling;
-use Dpkg::Build::Types;
+use Dpkg::BuildTypes;
 use Dpkg::BuildOptions;
 use Dpkg::BuildProfiles qw(set_build_profiles);
 use Dpkg::Conf;
@@ -42,8 +43,12 @@
 use Dpkg::Control;
 use Dpkg::Control::Info;
 use Dpkg::Changelog::Parse;
+use Dpkg::OpenPGP;
+use Dpkg::OpenPGP::ErrorCodes;
+use Dpkg::OpenPGP::KeyHandle;
 use Dpkg::Path qw(find_command);
 use Dpkg::IPC;
+use Dpkg::Vendor qw(run_vendor_hook);
 
 textdomain('dpkg-dev');
 
@@ -74,6 +79,7 @@
       --pre-clean             pre clean source tree (default).
       --no-post-clean         do not post clean source tree (default).
   -tc, --post-clean           post clean source tree.
+      --sanitize-env          sanitize the build environment.
   -D, --check-builddeps       check build dependencies and conflicts (default).
   -d, --no-check-builddeps    do not check build dependencies and conflicts.
       --ignore-builtin-builddeps
@@ -84,11 +90,13 @@
   -R, --rules-file=<rules>    rules file to execute (default is debian/rules).
   -T, --rules-target=<target> call debian/rules <target>.
       --as-root               ensure -T calls the target with root rights.
-  -j, --jobs[=<number>|auto]  jobs to run simultaneously (passed to <rules>),
-                                forced mode.
-  -J, --jobs-try[=<number>|auto]
+  -j, --jobs[=<jobs>|auto]    jobs to run simultaneously (passed to <rules>),
+                                (default; default is auto, opt-in mode).
+  -J, --jobs-try[=<jobs>|auto]
+                              alias for -j, --jobs.
+      --jobs-force[=<jobs>|auto]
                               jobs to run simultaneously (passed to <rules>),
-                                opt-in mode (default is auto).
+                                (default is auto, forced mode).
   -r, --root-command=<command>
                               command to gain root rights (default is fakeroot).
       --check-command=<command>
@@ -97,12 +105,19 @@
       --hook-<name>=<command> set <command> as the hook <name>, known hooks:
                                 init preclean source build binary buildinfo
                                 changes postclean check sign done
+      --buildinfo-file=<file> set the .buildinfo filename to generate.
       --buildinfo-option=<opt>
                               pass option <opt> to dpkg-genbuildinfo.
+      --changes-file=<file>   set the .changes filename to generate.
+      --sign-backend=<backend>
+                              OpenPGP backend to use to sign
+                                (default is auto).
   -p, --sign-command=<command>
                               command to sign .dsc and/or .changes files
-                                (default is gpg2 or gpg).
-  -k, --sign-key=<keyid>      the key to use for signing.
+                                (default is gpg).
+      --sign-keyfile=<file>   the key file to use for signing.
+  -k, --sign-keyid=<keyid>    the key id to use for signing.
+      --sign-key=<keyid>      alias for -k, --sign-keyid.
   -ap, --sign-pause           add pause before starting signature process.
   -us, --unsigned-source      unsigned source package.
   -ui, --unsigned-buildinfo   unsigned .buildinfo file.
@@ -124,8 +139,10 @@
   -sa                         source includes orig, always.
   -sd                         source is diff and .dsc only.
   -v<version>                 changes since version <version>.
-  -m, --release-by=<maint>    maintainer for this release is <maint>.
-  -e, --build-by=<maint>      maintainer for this build is <maint>.
+  -m, --source-by=<maint>     maintainer for this source or build is <maint>.
+      --build-by=<maint>      ditto.
+  -e, --release-by=<maint>    maintainer for this change or release is <maint>.
+      --changed-by=<maint>    ditto.
   -C<descfile>                changes are described in <descfile>.
       --changes-option=<opt>  pass option <opt> to dpkg-genchanges.')
     . "\n\n" . g_(
@@ -146,9 +163,11 @@
 my $admindir;
 my @debian_rules = ('debian/rules');
 my @rootcommand = ();
+my $signbackend;
 my $signcommand;
 my $preclean = 1;
 my $postclean = 0;
+my $sanitize_env = 0;
 my $parallel;
 my $parallel_force = 0;
 my $checkbuilddep = 1;
@@ -157,7 +176,8 @@
 my $check_command = $ENV{DEB_CHECK_COMMAND};
 my @check_opts;
 my $signpause;
-my $signkey = $ENV{DEB_SIGN_KEYID};
+my $signkeyfile = $ENV{DEB_SIGN_KEYFILE};
+my $signkeyid = $ENV{DEB_SIGN_KEYID};
 my $signforce = 0;
 my $signreleased = 1;
 my $signsource = 1;
@@ -177,7 +197,9 @@
 my $maint;
 my $changedby;
 my $desc;
+my $buildinfo_file;
 my @buildinfo_opts;
+my $changes_file;
 my @changes_opts;
 my %target_legacy_root = map { $_ => 1 } qw(
     clean binary binary-arch binary-indep
@@ -221,16 +243,39 @@
 	$admindir = $1;
     } elsif (/^--source-option=(.*)$/) {
 	push @source_opts, $1;
+    } elsif (/^--buildinfo-file=(.*)$/) {
+        $buildinfo_file = $1;
+        usageerr(g_('missing .buildinfo filename')) if not length $buildinfo_file;
     } elsif (/^--buildinfo-option=(.*)$/) {
-	push @buildinfo_opts, $1;
+        my $buildinfo_opt = $1;
+        if ($buildinfo_opt =~ m/^-O(.*)/) {
+            warning(g_('passing %s via %s is not supported; please use %s instead'),
+                    '-O', '--buildinfo-option', '--buildinfo-file');
+            $buildinfo_file = $1;
+        } else {
+            push @buildinfo_opts, $buildinfo_opt;
+        }
+    } elsif (/^--changes-file=(.*)$/) {
+        $changes_file = $1;
+        usageerr(g_('missing .changes filename')) if not length $changes_file;
     } elsif (/^--changes-option=(.*)$/) {
-	push @changes_opts, $1;
-    } elsif (/^(?:-j|--jobs=)(\d*|auto)$/) {
-	$parallel = $1 || '';
-	$parallel_force = 1;
-    } elsif (/^(?:-J|--jobs-try=)(\d*|auto)$/) {
+        my $changes_opt = $1;
+        if ($changes_opt =~ m/^-O(.*)/) {
+            warning(g_('passing %s via %s is not supported; please use %s instead'),
+                    '-O', '--changes-option', '--changes-file');
+            $changes_file = $1;
+        } else {
+            push @changes_opts, $changes_opt;
+        }
+    } elsif (/^--jobs(?:-try)?$/) {
+	$parallel = '';
+	$parallel_force = 0;
+    } elsif (/^(?:-[jJ]|--jobs(?:-try)?=)(\d*|auto)$/) {
 	$parallel = $1 || '';
 	$parallel_force = 0;
+    } elsif (/^--jobs-force(?:=(\d*|auto))?$/) {
+        $parallel = $1 || '';
+        $parallel_force = 1;
     } elsif (/^(?:-r|--root-command=)(.*)$/) {
 	my $arg = $1;
 	@rootcommand = split ' ', $arg;
@@ -238,20 +283,24 @@
 	$check_command = $1;
     } elsif (/^--check-option=(.*)$/) {
 	push @check_opts, $1;
-    } elsif (/^--hook-(.+)=(.*)$/) {
+    } elsif (/^--hook-([^=]+)=(.*)$/) {
 	my ($hook_name, $hook_cmd) = ($1, $2);
 	usageerr(g_('unknown hook name %s'), $hook_name)
 	    if not exists $hook{$hook_name};
 	usageerr(g_('missing hook %s command'), $hook_name)
 	    if not defined $hook_cmd;
 	$hook{$hook_name} = $hook_cmd;
-    } elsif (/^--buildinfo-id=.*$/) {
+    } elsif (/^(--buildinfo-id)=.*$/) {
 	# Deprecated option
-	warning('--buildinfo-id is deprecated, it is without effect');
+	warning(g_('%s is deprecated; it is without effect'), $1);
+    } elsif (/^--sign-backend=(.*)$/) {
+	$signbackend = $1;
     } elsif (/^(?:-p|--sign-command=)(.*)$/) {
 	$signcommand = $1;
-    } elsif (/^(?:-k|--sign-key=)(.*)$/) {
-	$signkey = $1;
+    } elsif (/^--sign-keyfile=(.*)$/) {
+	$signkeyfile = $1;
+    } elsif (/^(?:-k|--sign-keyid=|--sign-key=)(.*)$/) {
+	$signkeyid = $1;
     } elsif (/^--(no-)?check-builddeps$/) {
 	$checkbuilddep = !(defined $1 and $1 eq 'no-');
     } elsif (/^-([dD])$/) {
@@ -296,6 +345,8 @@
         $postclean = 1;
     } elsif (/^--no-post-clean$/) {
         $postclean = 0;
+    } elsif (/^--sanitize-env$/) {
+        $sanitize_env = 1;
     } elsif (/^-t$/ or /^--host-type$/) {
 	$host_type = shift; # Order DOES matter!
     } elsif (/^-t(.*)$/ or /^--host-type=(.*)$/) {
@@ -339,15 +390,15 @@
 	set_build_type(BUILD_FULL, $_);
     } elsif (/^-v(.*)$/) {
 	$since = $1;
-    } elsif (/^-m(.*)$/ or /^--release-by=(.*)$/) {
+    } elsif (/^-m(.*)$/ or /^--(?:source|build)-by=(.*)$/) {
 	$maint = $1;
-    } elsif (/^-e(.*)$/ or /^--build-by=(.*)$/) {
+    } elsif (/^-e(.*)$/ or /^--(?:changed|release)-by=(.*)$/) {
 	$changedby = $1;
     } elsif (/^-C(.*)$/) {
 	$desc = $1;
     } elsif (m/^-[EW]$/) {
 	# Deprecated option
-	warning(g_('-E and -W are deprecated, they are without effect'));
+	warning(g_('%s is deprecated; it is without effect'), $_);
     } elsif (/^-R(.*)$/ or /^--rules-file=(.*)$/) {
 	my $arg = $1;
 	@debian_rules = split ' ', $arg;
@@ -388,17 +439,8 @@
     error(g_("check-command '%s' not found"), $check_command);
 }
 
-if ($signcommand) {
-    if (!find_command($signcommand)) {
-        error(g_("sign-command '%s' not found"), $signcommand);
-    }
-} elsif (($ENV{GNUPGHOME} && -e $ENV{GNUPGHOME}) ||
-         ($ENV{HOME} && -e "$ENV{HOME}/.gnupg")) {
-    if (find_command('gpg2')) {
-        $signcommand = 'gpg2';
-    } elsif (find_command('gpg')) {
-        $signcommand = 'gpg';
-    }
+if ($signcommand and not find_command($signcommand)) {
+    error(g_("sign-command '%s' not found"), $signcommand);
 }
 
 # Default to auto if none of parallel=N, -J or -j have been specified.
@@ -425,6 +467,11 @@
     $build_opts->export();
 }
 
+if ($build_opts->has('terse')) {
+    $ENV{MAKEFLAGS} //= '';
+    $ENV{MAKEFLAGS} .= ' --no-print-directory';
+}
+
 set_build_profiles(@build_profiles) if @build_profiles;
 
 my $changelog = changelog_parse();
@@ -484,9 +531,33 @@
 my $pv = "${pkg}_$sversion";
 my $pva = "${pkg}_${sversion}_$arch";
 
+my $signkeytype;
+my $signkeyhandle;
+if (defined $signkeyfile) {
+    $signkeytype = 'keyfile';
+    $signkeyhandle = bsd_glob($signkeyfile, GLOB_TILDE | GLOB_NOCHECK);
+} elsif (defined $signkeyid) {
+    $signkeytype = 'autoid';
+    $signkeyhandle = $signkeyid;
+} else {
+    $signkeytype = 'userid';
+    $signkeyhandle = $maintainer;
+}
+my $signkey = Dpkg::OpenPGP::KeyHandle->new(
+    type => $signkeytype,
+    handle => $signkeyhandle,
+);
 signkey_validate();
 
-if (not $signcommand) {
+my $openpgp = Dpkg::OpenPGP->new(
+    backend => $signbackend // 'auto',
+    cmd => $signcommand // 'auto',
+    needs => {
+        keystore => $signkey->needs_keystore(),
+    },
+);
+
+if (not $openpgp->can_use_secrets($signkey)) {
     $signsource = 0;
     $signbuildinfo = 0;
     $signchanges = 0;
@@ -506,6 +577,11 @@
     $signsource = 0;
 }
 
+# Sanitize build environment.
+if ($sanitize_env) {
+    run_vendor_hook('sanitize-environment');
+}
+
 #
 # Preparation of environment stops here
 #
@@ -577,29 +653,29 @@
 
 run_hook('buildinfo', 1);
 
+$buildinfo_file //= "../$pva.buildinfo";
+
 push @buildinfo_opts, "--build=$build_types" if build_has_none(BUILD_DEFAULT);
 push @buildinfo_opts, "--admindir=$admindir" if $admindir;
+push @buildinfo_opts, "-O$buildinfo_file" if $buildinfo_file;
 
 run_cmd('dpkg-genbuildinfo', @buildinfo_opts);
 
 run_hook('changes', 1);
 
+$changes_file //= "../$pva.changes";
+
 push @changes_opts, "--build=$build_types" if build_has_none(BUILD_DEFAULT);
 push @changes_opts, "-m$maint" if defined $maint;
 push @changes_opts, "-e$changedby" if defined $changedby;
 push @changes_opts, "-v$since" if defined $since;
 push @changes_opts, "-C$desc" if defined $desc;
+push @changes_opts, "-O$changes_file";
 
-my $chg = "../$pva.changes";
 my $changes = Dpkg::Control->new(type => CTRL_FILE_CHANGES);
 
-printcmd("dpkg-genchanges @changes_opts >$chg");
-
-open my $changes_fh, '-|', 'dpkg-genchanges', @changes_opts
-    or subprocerr('dpkg-genchanges');
-$changes->parse($changes_fh, g_('parse changes file'));
-$changes->save($chg);
-close $changes_fh or subprocerr(g_('dpkg-genchanges'));
+run_cmd('dpkg-genchanges', @changes_opts);
+$changes->load($changes_file);
 
 run_hook('postclean', $postclean);
 
@@ -614,7 +690,7 @@
 run_hook('check', $check_command);
 
 if ($check_command) {
-    run_cmd($check_command, @check_opts, $chg);
+    run_cmd($check_command, @check_opts, $changes_file);
 }
 
 if ($signpause && ($signsource || $signbuildinfo || $signchanges)) {
@@ -625,21 +701,19 @@
 run_hook('sign', $signsource || $signbuildinfo || $signchanges);
 
 if ($signsource) {
-    if (signfile("$pv.dsc")) {
-        error(g_('failed to sign %s file'), '.dsc');
-    }
+    signfile("$pv.dsc");
 
     # Recompute the checksums as the .dsc has changed now.
     my $buildinfo = Dpkg::Control->new(type => CTRL_FILE_BUILDINFO);
-    $buildinfo->load("../$pva.buildinfo");
+    $buildinfo->load($buildinfo_file);
     my $checksums = Dpkg::Checksums->new();
     $checksums->add_from_control($buildinfo);
     $checksums->add_from_file("../$pv.dsc", update => 1, key => "$pv.dsc");
     $checksums->export_to_control($buildinfo);
-    $buildinfo->save("../$pva.buildinfo");
+    $buildinfo->save($buildinfo_file);
 }
-if ($signbuildinfo && signfile("$pva.buildinfo")) {
-    error(g_('failed to sign %s file'), '.buildinfo');
+if ($signbuildinfo) {
+    signfile("$pva.buildinfo");
 }
 if ($signsource or $signbuildinfo) {
     # Recompute the checksums as the .dsc and/or .buildinfo have changed.
@@ -647,16 +721,16 @@
     $checksums->add_from_control($changes);
     $checksums->add_from_file("../$pv.dsc", update => 1, key => "$pv.dsc")
         if $signsource;
-    $checksums->add_from_file("../$pva.buildinfo", update => 1, key => "$pva.buildinfo");
+    $checksums->add_from_file($buildinfo_file, update => 1, key => "$pva.buildinfo");
     $checksums->export_to_control($changes);
     delete $changes->{'Checksums-Md5'};
     update_files_field($changes, $checksums, "$pv.dsc")
         if $signsource;
     update_files_field($changes, $checksums, "$pva.buildinfo");
-    $changes->save($chg);
+    $changes->save($changes_file);
 }
-if ($signchanges && signfile("$pva.changes")) {
-    error(g_('failed to sign %s file'), '.changes');
+if ($signchanges) {
+    signfile("$pva.changes");
 }
 
 if (not $signreleased) {
@@ -706,23 +780,30 @@
     foreach my $keyword (split ' ', $rrr) {
         if ($keyword =~ m{/}) {
             if ($keyword =~ m{^dpkg/target/(.*)$}p and $target_official{$1}) {
-                error(g_('disallowed target in %s field keyword %s'),
+                error(g_('disallowed target in %s field keyword "%s"'),
                       'Rules-Requires-Root', $keyword);
             } elsif ($keyword ne 'dpkg/target-subcommand') {
-                error(g_('unknown %s field keyword %s in dpkg namespace'),
+                error(g_('%s field keyword "%s" is unknown in dpkg namespace'),
                       'Rules-Requires-Root', $keyword);
             }
             $keywords_impl++;
         } else {
-            if ($keyword ne 'no' and $keyword ne 'binary-targets') {
-                warning(g_('unknown %s field keyword %s'),
+            if ($keyword ne lc $keyword and
+                (lc $keyword eq 'no' or lc $keyword eq 'binary-targets')) {
+                error(g_('%s field keyword "%s" is uppercase; use "%s" instead'),
+                      'Rules-Requires-Root', $keyword, lc $keyword);
+            } elsif (lc $keyword eq 'yes') {
+                error(g_('%s field keyword "%s" is invalid; use "%s" instead'),
+                      'Rules-Requires-Root', $keyword, 'binary-targets');
+            } elsif ($keyword ne 'no' and $keyword ne 'binary-targets') {
+                warning(g_('%s field keyword "%s" is unknown'),
                         'Rules-Requires-Root', $keyword);
             }
             $keywords_base++;
         }
 
         if ($rrr{$keyword}++) {
-            error(g_('field %s contains duplicate keyword %s'),
+            error(g_('field %s contains duplicate keyword "%s"'),
                         'Rules-Requires-Root', $keyword);
         }
     }
@@ -740,13 +821,9 @@
     } elsif ($keywords_impl) {
         # Set only on <implementations-keywords>.
         $ENV{DEB_GAIN_ROOT_CMD} = join ' ', @rootcommand;
-        # XXX: For ephemeral backwards compatibility.
-        $ENV{DPKG_GAIN_ROOT_CMD} = $ENV{DEB_GAIN_ROOT_CMD};
     } else {
         # We should not provide the variable otherwise.
         delete $ENV{DEB_GAIN_ROOT_CMD};
-        # XXX: For ephemeral backwards compatibility.
-        delete $ENV{DPKG_GAIN_ROOT_CMD};
     }
 
     return %rrr;
@@ -821,17 +898,13 @@
 }
 
 sub signkey_validate {
-    return unless defined $signkey;
-    # Make sure this is an hex keyid.
-    return unless $signkey =~ m/^(?:0x)?([[:xdigit:]]+)$/;
+    return unless $signkey->type eq 'keyid';
 
-    my $keyid = $1;
-
-    if (length $keyid <= 8) {
+    if (length $signkey->handle <= 8) {
         error(g_('short OpenPGP key IDs are broken; ' .
                  'please use key fingerprints in %s or %s instead'),
               '-k', 'DEB_SIGN_KEYID');
-    } elsif (length $keyid <= 16) {
+    } elsif (length $signkey->handle <= 16) {
         warning(g_('long OpenPGP key IDs are strongly discouraged; ' .
                    'please use key fingerprints in %s or %s instead'),
                 '-k', 'DEB_SIGN_KEYID');
@@ -852,23 +925,22 @@
     print { $signfh } "\n";
     close $signfh or syserr(g_('cannot close %s'), $signfile);
 
-    system($signcommand, '--utf8-strings', '--textmode', '--armor',
-           '--local-user', $signkey || $maintainer, '--clearsign',
-           '--output', "$signfile.asc", $signfile);
-    my $status = $?;
-    if ($status == 0) {
-	system('mv', '--', "$signfile.asc", "../$file")
-	    and subprocerr('mv');
+    my $status = $openpgp->inline_sign($signfile, "$signfile.asc", $signkey);
+    if ($status == OPENPGP_OK) {
+        move("$signfile.asc", "../$file")
+            or syserror(g_('cannot move %s to %s'), "$signfile.asc", "../$file");
+    } else {
+        error(g_('failed to sign %s file: %s'), $file,
+              openpgp_errorcode_to_string($status));
     }
 
-    print "\n";
     return $status
 }
 
 sub fileomitted {
     my ($files, $regex) = @_;
 
-    return $files !~ /$regex/
+    return $files !~ m/$regex$/m
 }
 
 sub describe_build {
