--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/usr/share/doc/mawk/examples/hical	2012-03-23 16:15:00.000000000 -0400
+++ /media/mks/armbi_root/usr/share/doc/mawk/examples/hical	2009-08-20 20:36:34.000000000 -0400
@@ -1,10 +1,11 @@
-#!/usr/sh
+#!/bin/sh
+# $MawkId: hical,v 1.4 2009/08/21 00:36:34 tom Exp $
 
 # @(#) hical - displays previous, current & next months - today highlighted
 # @(#) an "internationalizationable" version of a 3-month 'cal' display, it
 # @(#) may be edited for week to start with Sun or Mon & for local language
 
-prog=/tmp/hical.$$ ; trap 'rm -f $prog ; trap 0 ; exit' 0 1 2 3 15
+prog=${TMPDIR-/tmp}/hical.$$ ; trap 'rm -f $prog ; trap 0 ; exit' 0 1 2 3 15
 
 : ${so:=`tput smso`} ${se:=`tput rmso`}
 
@@ -15,22 +16,19 @@
 #   d - Day of month - 01 to 31
 #   T - Time as HH:MM:SS
 #   Y - Year (including century), as decimal numbers
-DATE_ARGS='%w %m %d %T 19%y'
+DATE_ARGS='%w %m %d %T %Y'
 
 # the 'awk' program file is written to a temporary file to avoid any
-# "arg list too long" error messages, yet have all the code in one file
-# observe when editing the program file that '\n' must be '\\n'
-# NOTE: to make this script portable /bin/echo has been used instead of the
-#  echo built into the shell for the 'bash' shell on Linux, use 'echo -e' in
-#  the next line (Modification made by Edward Betts <edward@debian.org>)
-/bin/echo '{
+# "arg list too long" error messages, yet have all the code in one file.
+cat >$prog <<'EOF'
+{
 # USER EDITS MAY BE REQUIRED (for FMT, day & month names, and the time stuff)
 # FMT = 0  # for weekdays ordered "Mo Tu We Th Fr Sa Su"
   FMT = 1  # for weekdays ordered "Su Mo Tu We Th Fr Sa"
   Header[0] = "Mo Tu We Th Fr Sa Su"
   Header[1] = "Su Mo Tu We Th Fr Sa"
   months    = "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec"
-  time_is   = "The time is:" ; time_fmt = "%s   %s  %s %s\\n"
+  time_is   = "The time is:" ; time_fmt = "%s   %s  %s %s\n"
 # NO MORE USER EDITS REQUIRED (I think!)
   split(months,M_Name) ; split("31 28 31 30 31 30 31 31 30 31 30 31",M_Len)
   daynum  = $1 + FMT
@@ -42,8 +40,8 @@
     else              { Mon[1]  = Mon[2]  - 1 }
   if ( Mon[2] == 12 ) { Year[3] = Year[3] + 1 ; Mon[3] =  1 }
     else              { Mon[3]  = Mon[2]  + 1 }
-  if ( Year[2] % 4   == 0 && \
-       Year[2] % 100 != 0 || \
+  if ( Year[2] % 4   == 0 &&
+       Year[2] % 100 != 0 ||
        Year[2] % 400 == 0 ) M_Len[2] = 29
   Start[2] = 7 - ( ( today - daynum ) % 7 )
   Start[1] = 7 - ( ( M_Len[Mon[1]] - Start[2] ) % 7 )
@@ -51,8 +49,8 @@
   for (i=1;i<=3;i++) { while ( Start[i] >= 7 ) Start[i] -= 7 }
   for (mm=1;mm<=3;mm++) {
     if ( Year[mm] != Year[mm-1] )
-      printf( "%s            %s          %s\\n", so, Year[mm], se )
-    if ( mm == 1 ) printf( "%s    %s  %s\\n", so, Header[FMT], se )
+      printf( "%s            %s          %s\n", so, Year[mm], se )
+    if ( mm == 1 ) printf( "%s    %s  %s\n", so, Header[FMT], se )
     j = k = 1
     while ( j <= M_Len[Mon[mm]] ) {
       line = ""
@@ -64,11 +62,12 @@
         line = sprintf( "%s%s%2s%s ", line, So, date, Se )
       }
       m1 = substr(M_Name[Mon[mm]],k++,1)
-      printf( "%s %1s %s %s%s %s\\n", so, m1, se, line, so, se )
+      printf( "%s %1s %s %s%s %s\n", so, m1, se, line, so, se )
     }
   }
   printf( time_fmt, so, time_is, time, se )
-}' >$prog
+}
+EOF
 
 date +"$DATE_ARGS" | ${AWK:=mawk} -f $prog so=$so se=$se
 
