--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/usr/bin/dpkg-genbuildinfo	2022-05-24 07:40:09.000000000 -0400
+++ /media/mks/armbi_root/usr/bin/dpkg-genbuildinfo	2023-05-10 22:04:01.000000000 -0400
@@ -28,18 +28,25 @@
 use List::Util qw(any);
 use Cwd;
 use File::Basename;
+use File::Temp;
 use POSIX qw(:fcntl_h :locale_h strftime);
 
 use Dpkg ();
 use Dpkg::Gettext;
 use Dpkg::Checksums;
 use Dpkg::ErrorHandling;
-use Dpkg::Arch qw(get_build_arch get_host_arch debarch_eq);
-use Dpkg::Build::Types;
-use Dpkg::Build::Info qw(get_build_env_whitelist);
+use Dpkg::IPC;
+use Dpkg::Path qw(find_command);
+use Dpkg::Arch qw(
+    get_build_arch
+    get_host_arch
+    debarch_eq debarch_to_gnutriplet
+);
+use Dpkg::BuildTypes;
 use Dpkg::BuildOptions;
 use Dpkg::BuildFlags;
 use Dpkg::BuildProfiles qw(get_build_profiles);
+use Dpkg::BuildInfo qw(get_build_env_allowed);
 use Dpkg::Control::Info;
 use Dpkg::Control::Fields;
 use Dpkg::Control;
@@ -69,6 +76,7 @@
 my $buildinfo;
 
 my $checksums = Dpkg::Checksums->new();
+my %distbinaries;
 my %archadded;
 my @archvalues;
 
@@ -246,14 +254,76 @@
     return $installed_deps;
 }
 
+sub is_cross_executable {
+    my $host_arch = get_host_arch();
+    my $build_arch = get_build_arch();
+
+    return if $host_arch eq $build_arch;
+
+    # If we are cross-compiling, record whether it was possible to execute
+    # the host architecture by cross-compiling and executing a small
+    # host-arch binary.
+    my $CC = debarch_to_gnutriplet($host_arch) . '-gcc';
+
+    # If we do not have a cross-compiler, we might be in the process of
+    # building one or cross-compiling using a language other than C/C++,
+    # and aborting the build is then not very useful.
+    return if ! find_command($CC);
+
+    my $crossprog = <<~'CROSSPROG';
+        #include <unistd.h>
+        int main() { write(1, "ok", 2); return 0; }
+    CROSSPROG
+    my ($stdout, $stderr) = ('', '');
+    my $tmpfh = File::Temp->new();
+    spawn(
+        exec => [ $CC, '-w', '-x', 'c', '-o', $tmpfh->filename, '-' ],
+        from_string => \$crossprog,
+        to_string => \$stdout,
+        error_to_string => \$stderr,
+        wait_child => 1,
+        nocheck => 1,
+    );
+    if ($?) {
+        print { *STDOUT } $stdout;
+        print { *STDERR } $stderr;
+        eval {
+            subprocerr("$CC -w -x c -");
+        };
+        warning($@);
+        return;
+    }
+    close $tmpfh;
+    spawn(
+        exec => [ $tmpfh->filename ],
+        error_to_file => '/dev/null',
+        to_string => \$stdout,
+        wait_child => 1,
+        nocheck => 1,
+    );
+
+    return 1 if $? == 0 && $stdout eq 'ok';
+    return 0;
+}
+
+sub get_build_tainted_by {
+    my @tainted = run_vendor_hook('build-tainted-by');
+
+    if (is_cross_executable()) {
+        push @tainted, 'can-execute-cross-built-programs';
+    }
+
+    return @tainted;
+}
+
 sub cleansed_environment {
-    # Consider only whitelisted variables which are not supposed to leak
+    # Consider only allowed variables which are not supposed to leak
     # local user information.
     my %env = map {
         $_ => $ENV{$_}
     } grep {
         exists $ENV{$_}
-    } get_build_env_whitelist();
+    } get_build_env_allowed();
 
     # Record flags from dpkg-buildflags.
     my $bf = Dpkg::BuildFlags->new();
@@ -323,9 +393,9 @@
         $stdout = 1;
     } elsif (m/^-O(.*)$/) {
         $outputfile = $1;
-    } elsif (m/^--buildinfo-id=.*$/) {
+    } elsif (m/^(--buildinfo-id)=.*$/) {
         # Deprecated option
-        warning('--buildinfo-id is deprecated, it is without effect');
+        warning(g_('%s is deprecated; it is without effect'), $1);
     } elsif (m/^--always-include-kernel$/) {
         $use_feature{kernel} = 1;
     } elsif (m/^--always-include-path$/) {
@@ -357,13 +427,13 @@
 $options{offset} = 1;
 my $prev_changelog = changelog_parse(%options);
 
-my $sourceversion = $changelog->{'Binary-Only'} ?
-                    $prev_changelog->{'Version'} : $changelog->{'Version'};
+my $sourceversion = Dpkg::Version->new($changelog->{'Binary-Only'} ?
+                    $prev_changelog->{'Version'} : $changelog->{'Version'});
 my $binaryversion = Dpkg::Version->new($changelog->{'Version'});
 
 # Include .dsc if available.
 my $spackage = $changelog->{'Source'};
-(my $sversion = $sourceversion) =~ s/^\d+://;
+my $sversion = $sourceversion->as_string(omit_epoch => 1);
 
 if (build_has_any(BUILD_SOURCE)) {
     my $dsc = "${spackage}_${sversion}.dsc";
@@ -385,6 +455,15 @@
         # Make us a bit idempotent.
         next if $file->{filename} =~ m/\.buildinfo$/;
 
+        if (defined $file->{arch}) {
+            my $arch_all = debarch_eq('all', $file->{arch});
+
+            next if build_has_none(BUILD_ARCH_INDEP) and $arch_all;
+            next if build_has_none(BUILD_ARCH_DEP) and not $arch_all;
+
+            $distbinaries{$file->{package}} = 1 if defined $file->{package};
+        }
+
         my $path = "$uploadfilesdir/$file->{filename}";
         $checksums->add_from_file($path, key => $file->{filename});
 
@@ -397,7 +476,7 @@
 
 $fields->{'Format'} = $buildinfo_format;
 $fields->{'Source'} = $spackage;
-$fields->{'Binary'} = join(' ', map { $_->{'Package'} } $control->get_packages());
+$fields->{'Binary'} = join(' ', sort keys %distbinaries);
 # Avoid overly long line by splitting over multiple lines.
 if (length($fields->{'Binary'}) > 980) {
     $fields->{'Binary'} =~ s/(.{0,980}) /$1\n/g;
@@ -437,7 +516,7 @@
     }
 }
 
-$fields->{'Build-Tainted-By'} = "\n" . join "\n", run_vendor_hook('build-tainted-by');
+$fields->{'Build-Tainted-By'} = "\n" . join "\n", get_build_tainted_by();
 
 $checksums->export_to_control($fields);
 
