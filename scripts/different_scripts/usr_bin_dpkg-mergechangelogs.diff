--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/usr/bin/dpkg-mergechangelogs	2022-05-24 07:40:09.000000000 -0400
+++ /media/mks/armbi_root/usr/bin/dpkg-mergechangelogs	2023-05-10 22:04:01.000000000 -0400
@@ -20,13 +20,14 @@
 use strict;
 
 use Scalar::Util qw(blessed);
-use Getopt::Long qw(:config posix_default bundling no_ignorecase);
+use Getopt::Long qw(:config posix_default bundling_values no_ignorecase);
 
 use Dpkg ();
 use Dpkg::Changelog::Debian;
 use Dpkg::ErrorHandling;
 use Dpkg::Gettext;
 use Dpkg::Version;
+use Dpkg::Vendor qw(run_vendor_hook);
 
 textdomain('dpkg-dev');
 
@@ -66,18 +67,22 @@
 
 Options:
   -m, --merge-prereleases  merge pre-releases together, ignores everything
-                           after the last '~' in the version.
+                             after the last '~' in the version.
+      --merge-unreleased   merge UNRELEASED entries together, ignoring their
+                             version numbers.
   -?, --help               show this help message.
       --version            show the version.
 "), $Dpkg::PROGNAME;
 }
 
 my $merge_prereleases;
+my $merge_unreleased;
 
 my @options_spec = (
     'help|?' => sub { usage(); exit(0) },
     'version' => sub { version(); exit(0) },
     'merge-prereleases|m' => \$merge_prereleases,
+    'merge-unreleased' => \$merge_unreleased,
 );
 
 {
@@ -85,6 +90,8 @@
     GetOptions(@options_spec);
 }
 
+my $backport_version_regex = run_vendor_hook('backport-version-regex');
+
 my ($old, $new_a, $new_b, $out_file) = @ARGV;
 unless (defined $old and defined $new_a and defined $new_b)
 {
@@ -151,12 +158,12 @@
 sub get_items_to_merge {
     my @items = (shift @o, shift @a, shift @b);
     my @arrays = (\@o, \@a, \@b);
-    my $minver;
+    my $minitem;
     foreach my $i (0 .. 2) {
-	if (defined $minver and defined $items[$i]) {
-	    my $cmp = compare_versions($minver, $items[$i]->get_version());
+	if (defined $minitem and defined $items[$i]) {
+	    my $cmp = compare_versions($minitem, $items[$i]);
 	    if ($cmp > 0) {
-		$minver = $items[$i]->get_version();
+		$minitem = $items[$i];
 		foreach my $j (0 .. $i - 1) {
 		    unshift @{$arrays[$j]}, $items[$j];
 		    $items[$j] = undef;
@@ -166,32 +173,43 @@
 		$items[$i] = undef;
 	    }
 	} else {
-	    $minver = $items[$i]->get_version() if defined $items[$i];
+	    $minitem = $items[$i] if defined $items[$i];
 	}
     }
     return @items;
 }
 
 # Compares the versions taking into account some oddities like the fact
-# that we want backport/volatile versions to sort higher than the version
+# that we want backport versions to sort higher than the version
 # on which they are based.
 sub compare_versions {
     my ($a, $b) = @_;
+
     return 0 if not defined $a and not defined $b;
     return 1 if not defined $b;
     return -1 if not defined $a;
-    $a = $a->get_version() if ref($a) and $a->isa('Dpkg::Changelog::Entry');
-    $b = $b->get_version() if ref($b) and $b->isa('Dpkg::Changelog::Entry');
-    # Backport and volatile are not real prereleases
-    $a =~ s/~(bpo|vola)/+$1/;
-    $b =~ s/~(bpo|vola)/+$1/;
+
+    my ($av, $bv) = ($a, $b);
+
+    $av = $a->get_version() if ref $a and $a->isa('Dpkg::Changelog::Entry');
+    $bv = $b->get_version() if ref $b and $b->isa('Dpkg::Changelog::Entry');
+
+    if ($merge_unreleased) {
+        return 0 if $a->get_distributions() eq 'UNRELEASED' and
+                    $b->get_distributions() eq 'UNRELEASED';
+    }
+    # Backports are not real prereleases.
+    if (defined $backport_version_regex) {
+        $a =~ s/$backport_version_regex/+$1/;
+        $b =~ s/$backport_version_regex/+$1/;
+    }
     if ($merge_prereleases) {
-	$a =~ s/~[^~]*$//;
-	$b =~ s/~[^~]*$//;
+        $av =~ s/~[^~]*$//;
+        $bv =~ s/~[^~]*$//;
     }
-    $a = Dpkg::Version->new($a);
-    $b = Dpkg::Version->new($b);
-    return $a <=> $b;
+    $av = Dpkg::Version->new($av);
+    $bv = Dpkg::Version->new($bv);
+    return $av <=> $bv;
 }
 
 # Merge changelog entries smartly by merging individually the different
