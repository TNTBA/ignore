--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/usr/bin/autom4te	2017-08-20 14:17:16.000000000 -0400
+++ /media/mks/armbi_root/usr/bin/autom4te	2023-01-14 12:42:30.000000000 -0500
@@ -1,12 +1,13 @@
-#! /usr/bin/perl -w
+#! /usr/bin/perl
 # -*- perl -*-
-# Generated from autom4te.in; do not edit by hand.
+# Generated from bin/autom4te.in; do not edit by hand.
 
 eval 'case $# in 0) exec /usr/bin/perl -S "$0";; *) exec /usr/bin/perl -S "$0" "$@";; esac'
     if 0;
 
 # autom4te - Wrapper around M4 libraries.
-# Copyright (C) 2001-2003, 2005-2012 Free Software Foundation, Inc.
+# Copyright (C) 2001-2003, 2005-2017, 2020-2021 Free Software
+# Foundation, Inc.
 
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -19,8 +20,11 @@
 # GNU General Public License for more details.
 
 # You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+# along with this program.  If not, see <https://www.gnu.org/licenses/>.
 
+use 5.006;
+use strict;
+use warnings FATAL => 'all';
 
 BEGIN
 {
@@ -31,17 +35,17 @@
   # that can handle redirection and quote arguments correctly,
   # e.g.: COMMAND.COM.  For DJGPP always use the shell that configure
   # has detected.
-  $ENV{'SHELL'} = '/bin/bash' if ($^O eq 'dos');
+  $ENV{'SHELL'} = '/bin/sh' if ($^O eq 'dos');
 }
 
+use File::Basename;
+
 use Autom4te::C4che;
 use Autom4te::ChannelDefs;
 use Autom4te::Channels;
 use Autom4te::FileUtils;
 use Autom4te::General;
 use Autom4te::XFile;
-use File::Basename;
-use strict;
 
 # Data directory.
 my $pkgdatadir = $ENV{'AC_MACRODIR'} || '/usr/share/autoconf';
@@ -72,10 +76,10 @@
 my %trace;
 
 # The macros the user will want to trace in the future.
-# We need `include' to get the included file, `m4_pattern_forbid' and
-# `m4_pattern_allow' to check the output.
+# We need 'include' to get the included file, 'm4_pattern_forbid' and
+# 'm4_pattern_allow' to check the output.
 #
-# FIXME: What about `sinclude'?
+# FIXME: What about 'sinclude'?
 my @preselect = ('include',
 		 'm4_pattern_allow', 'm4_pattern_forbid',
 		 '_m4_warn');
@@ -105,20 +109,20 @@
 
 # %M4_BUILTIN_ALTERNATE_NAME
 # --------------------------
-# The builtins are renamed, e.g., `define' is renamed `m4_define'.
-# So map `define' to `m4_define' and conversely.
+# The builtins are renamed, e.g., 'define' is renamed 'm4_define'.
+# So map 'define' to 'm4_define' and conversely.
 # Some macros don't follow this scheme: be sure to properly map to their
 # alternate name too.
 #
 # FIXME: Trace status of renamed builtins was fixed in M4 1.4.5, which
 # we now depend on; do we still need to do this mapping?
 #
-# So we will merge them, i.e., tracing `BUILTIN' or tracing
-# `m4_BUILTIN' will be the same: tracing both, but honoring the
+# So we will merge them, i.e., tracing 'BUILTIN' or tracing
+# 'm4_BUILTIN' will be the same: tracing both, but honoring the
 # *last* trace specification.
 #
-# FIXME: This is not enough: in the output `$0' will be `BUILTIN'
-# sometimes and `m4_BUILTIN' at others.  We should return a unique name,
+# FIXME: This is not enough: in the output '$0' will be 'BUILTIN'
+# sometimes and 'm4_BUILTIN' at others.  We should return a unique name,
 # the one specified by the user.
 #
 # FIXME: To be absolutely rigorous, I would say that given that we
@@ -139,38 +143,38 @@
 Run GNU M4 on the FILES, avoiding useless runs.  Output the traces if tracing,
 the frozen file if freezing, otherwise the expansion of the FILES.
 
-If some of the FILES are named \`FILE.m4f\' they are considered to be M4
+If some of the FILES are named 'FILE.m4f' they are considered to be M4
 frozen files of all the previous files (which are therefore not loaded).
-If \`FILE.m4f\' is not found, then \`FILE.m4\' will be used, together with
+If 'FILE.m4f' is not found, then 'FILE.m4' will be used, together with
 all the previous files.
 
 Some files may be optional, i.e., will only be processed if found in the
-include path, but then must end in \`.m4?\';  the question mark is not part of
-the actual file name.
+include path, but then must end in '.m4?';  the question mark is not part
+of the actual file name.
 
 Operation modes:
   -h, --help               print this help, then exit
   -V, --version            print version number, then exit
   -v, --verbose            verbosely report processing
-  -d, --debug              don\'t remove temporary files
-  -o, --output=FILE        save output in FILE (defaults to \`-\', stdout)
-  -f, --force              don\'t rely on cached values
+  -d, --debug              don't remove temporary files
+  -o, --output=FILE        save output in FILE (defaults to '-', stdout)
+  -f, --force              don't rely on cached values
   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY
   -l, --language=LANG      specify the set of M4 macros to use
   -C, --cache=DIRECTORY    preserve results for future runs in DIRECTORY
       --no-cache           disable the cache
   -m, --mode=OCTAL         change the non trace output file mode (0666)
-  -M, --melt               don\'t use M4 frozen files
+  -M, --melt               don't use M4 frozen files
 
 Languages include:
-  \`Autoconf\'   create Autoconf configure scripts
-  \`Autotest\'   create Autotest test suites
-  \`M4sh\'       create M4sh shell scripts
-  \`M4sugar\'    create M4sugar output
+  'Autoconf'   create Autoconf configure scripts
+  'Autotest'   create Autotest test suites
+  'M4sh'       create M4sh shell scripts
+  'M4sugar'    create M4sugar output
 
 " . Autom4te::ChannelDefs::usage . "
 
-The environment variables \`M4\' and \`WARNINGS\' are honored.
+The environment variables 'M4' and 'WARNINGS' are honored.
 
 Library directories:
   -B, --prepend-include=DIR  prepend directory DIR to search path
@@ -183,7 +187,7 @@
 Freezing:
   -F, --freeze   produce an M4 frozen state file for FILES
 
-FORMAT defaults to \`\$f:\$l:\$n:\$%\', and can use the following escapes:
+FORMAT defaults to '\$f:\$l:\$n:\$%', and can use the following escapes:
   \$\$     literal \$
   \$f     file where macro was called
   \$l     line where macro was called
@@ -197,22 +201,21 @@
 a single character for that character, or {STRING} to use a string.
 
 Report bugs to <bug-autoconf\@gnu.org>.
-GNU Autoconf home page: <http://www.gnu.org/software/autoconf/>.
-General help using GNU software: <http://www.gnu.org/gethelp/>.
+GNU Autoconf home page: <https://www.gnu.org/software/autoconf/>.
+General help using GNU software: <https://www.gnu.org/gethelp/>.
 ";
 
 # $VERSION
 # --------
-$version =  <<"EOF";
-autom4te (GNU Autoconf) 2.69
-Copyright (C) 2012 Free Software Foundation, Inc.
+$version = "autom4te (GNU Autoconf) 2.71
+Copyright (C) 2021 Free Software Foundation, Inc.
 License GPLv3+/Autoconf: GNU GPL version 3 or later
-<http://gnu.org/licenses/gpl.html>, <http://gnu.org/licenses/exceptions.html>
+<https://gnu.org/licenses/gpl.html>, <https://gnu.org/licenses/exceptions.html>
 This is free software: you are free to change and redistribute it.
 There is NO WARRANTY, to the extent permitted by law.
 
 Written by Akim Demaille.
-EOF
+";
 
 
 ## ---------- ##
@@ -258,7 +261,7 @@
   my ($file) = @_;
   use Text::ParseWords;
 
-  my $cfg = new Autom4te::XFile ("< " . open_quote ($file));
+  my $cfg = new Autom4te::XFile ($file, "<");
   my $lang;
   while ($_ = $cfg->getline)
     {
@@ -333,12 +336,13 @@
   # Process the arguments for real this time.
   my @trace;
   my @prepend_include;
-  parse_WARNINGS;
+  my @warnings;
+
   getopt
     (
      # Operation modes:
      "o|output=s"   => \$output,
-     "W|warnings=s" => \&parse_warnings,
+     "W|warnings=s" => \@warnings,
      "m|mode=s"     => \$mode,
      "M|melt"       => \$melt,
 
@@ -347,9 +351,9 @@
      "I|include=s"         => \@include,
 
      # Tracing:
-     # Using a hash for traces is seducing.  Unfortunately, upon `-t FOO',
-     # instead of mapping `FOO' to undef, Getopt maps it to `1', preventing
-     # us from distinguishing `-t FOO' from `-t FOO=1'.  So let's do it
+     # Using a hash for traces is seducing.  Unfortunately, upon '-t FOO',
+     # instead of mapping 'FOO' to undef, Getopt maps it to '1', preventing
+     # us from distinguishing '-t FOO' from '-t FOO=1'.  So let's do it
      # by hand.
      "t|trace=s"     => \@trace,
      "p|preselect=s" => \@preselect,
@@ -362,8 +366,11 @@
      "no-cache"  => sub { $cache = undef; },
     );
 
+  parse_WARNINGS;
+  parse_warnings @warnings;
+
   fatal "too few arguments
-Try `$me --help' for more information."
+Try '$me --help' for more information."
     unless @ARGV;
 
   # Freezing:
@@ -388,13 +395,13 @@
 
   # Normalize the includes: the first occurrence is enough, several is
   # a pain since it introduces a useless difference in the path which
-  # invalidates the cache.  And strip `.' which is implicit and always
+  # invalidates the cache.  And strip '.' which is implicit and always
   # first.
   @include = grep { !/^\.$/ } uniq (reverse(@prepend_include), @include);
 
   # Convert @trace to %trace, and work around the M4 builtins tracing
   # problem.
-  # The default format is `$f:$l:$n:$%'.
+  # The default format is '$f:$l:$n:$%'.
   foreach (@trace)
     {
       /^([^:]+)(?::(.*))?$/ms;
@@ -413,9 +420,9 @@
   # discarded: the frozen file is supposed to include them all.
   #
   # We don't want to depend upon m4's --include to find the top level
-  # files, so we use `find_file' here.  Try to get a canonical name,
+  # files, so we use 'find_file' here.  Try to get a canonical name,
   # as it's part of the key for caching.  And some files are optional
-  # (also handled by `find_file').
+  # (also handled by 'find_file').
   my @argv;
   foreach (@ARGV)
     {
@@ -425,7 +432,7 @@
 	}
       elsif (/\.m4f$/)
 	{
-	  # Frozen files are optional => pass a `?' to `find_file'.
+	  # Frozen files are optional => pass a '?' to 'find_file'.
 	  my $file = find_file ("$_?", @include);
 	  if (!$melt && $file)
 	    {
@@ -484,7 +491,7 @@
 # warn_forbidden ($WHERE, $WORD, %FORBIDDEN)
 # ------------------------------------------
 # $WORD is forbidden.  Warn with a dedicated error message if in
-# %FORBIDDEN, otherwise a simple `error: possibly undefined macro'
+# %FORBIDDEN, otherwise a simple 'error: possibly undefined macro'
 # will do.
 my $first_warn_forbidden = 1;
 sub warn_forbidden ($$%)
@@ -527,7 +534,7 @@
   handle_traces ($req, "$tmp/patterns",
 		 ('m4_pattern_forbid' => 'forbid:$1:$2',
 		  'm4_pattern_allow'  => 'allow:$1'));
-  my @patterns = new Autom4te::XFile ("< " . open_quote ("$tmp/patterns"))->getlines;
+  my @patterns = new Autom4te::XFile ("$tmp/patterns", "<")->getlines;
   chomp @patterns;
   my %forbidden =
     map { /^forbid:([^:]+):.+$/ => /^forbid:[^:]+:(.+)$/ } @patterns;
@@ -539,30 +546,35 @@
     foreach (sort keys %forbidden);
   verb "allowed   tokens: $allowed";
 
-  # Read the (cached) raw M4 output, produce the actual result.  We
-  # have to use the 2nd arg to have Autom4te::XFile honor the third, but then
-  # stdout is to be handled by hand :(.  Don't use fdopen as it means
-  # we will close STDOUT, which we already do in END.
-  my $out = new Autom4te::XFile;
-  my $atomic_replace;
-  if ($output eq '-' || (-e $output && ! -f $output))
+  # Read the (cached) raw M4 output, produce the actual result.
+  # If we are writing to a regular file, replace it atomically.
+  my $scratchfile;
+  my $out;
+  if ($output eq '-')
     {
-      $out->open (">$output");
-      $atomic_replace = 0;
+      # Don't just make $out be STDOUT, because then we would close STDOUT,
+      # which we already do in END.
+      $out = new Autom4te::XFile ('>&STDOUT');
+    }
+  elsif (-e $output && ! -f $output)
+    {
+      $out = new Autom4te::XFile ($output, '>');
     }
   else
     {
-      $out->open("$output.tmp", O_CREAT | O_WRONLY | O_TRUNC, oct ($mode));
-      if ($out) {
-        $atomic_replace = 1;
-      } else {
-        $out->open($output, O_CREAT | O_WRONLY | O_TRUNC, oct ($mode));
-        $atomic_replace = 0;
-      }
+      my (undef, $outdir, undef) = fileparse ($output);
+
+      use File::Temp qw (tempfile);
+      ($out, $scratchfile) = tempfile (UNLINK => 0, DIR => $outdir);
+      fatal "cannot create a file in $outdir: $!"
+        unless $out;
+
+      # File::Temp doesn't give us access to 3-arg open(2), unfortunately.
+      chmod (oct ($mode) & ~(umask), $scratchfile)
+        or fatal "setting mode of " . $scratchfile . ": $!";
     }
-  fatal "cannot create $output: $!"
-    unless $out;
-  my $in = new Autom4te::XFile ("< " . open_quote ($ocache . $req->id));
+
+  my $in = new Autom4te::XFile ($ocache . $req->id, "<");
 
   my %prohibited;
   my $res;
@@ -580,13 +592,14 @@
       $res = $_;
 
       # Don't complain in comments.  Well, until we have something
-      # better, don't consider `#include' etc. are comments.
+      # better, don't consider '#include' etc. are comments.
       s/\#.*//
 	unless /^\#\s*(if|include|endif|ifdef|ifndef|define)\b/;
       foreach (split (/\W+/))
 	{
 	  $prohibited{$_} = $.
-	    if !/^$/ && /$forbidden/o && !/$allowed/o && ! exists $prohibited{$_};
+	    if !/^$/ && /$forbidden/o && !/$allowed/o
+               && ! exists $prohibited{$_};
 	}
 
       # Performed *last*: the empty quadrigraph.
@@ -596,11 +609,10 @@
     }
 
   $out->close();
-
-  if ($atomic_replace && !rename("$output.tmp", "$output")) {
-    move ("${output}.tmp", "$output")
-      or fatal "cannot rename ${output}.tmp as $output: $!";
-  }
+  # Always update the file, even if it didn't change;
+  # Automake relies on this.
+  update_file ($scratchfile, $output, 1)
+    if defined $scratchfile;
 
   # If no forbidden words, we're done.
   return
@@ -612,12 +624,12 @@
   if ($ARGV[$#ARGV] ne '-')
     {
       my $prohibited = '\b(' . join ('|', keys %prohibited) . ')\b';
-      my $file = new Autom4te::XFile ("< " . open_quote ($ARGV[$#ARGV]));
+      my $file = new Autom4te::XFile ($ARGV[$#ARGV], "<");
 
       while ($_ = $file->getline)
 	{
 	  # Don't complain in comments.  Well, until we have something
-	  # better, don't consider `#include' etc. to be comments.
+	  # better, don't consider '#include' etc. to be comments.
 	  s/\#.*//
 	    unless /^\#(if|include|endif|ifdef|ifndef|define)\b/;
 
@@ -716,10 +728,10 @@
 # handle_traces($REQ, $OUTPUT, %TRACE)
 # ------------------------------------
 # We use M4 itself to process the traces.  But to avoid name clashes when
-# processing the traces, the builtins are disabled, and moved into `at_'.
-# Actually, all the low level processing macros are in `at_' (and `_at_').
-# To avoid clashes between user macros and `at_' macros, the macros which
-# implement tracing are in `AT_'.
+# processing the traces, the builtins are disabled, and moved into 'at_'.
+# Actually, all the low level processing macros are in 'at_' (and '_at_').
+# To avoid clashes between user macros and 'at_' macros, the macros which
+# implement tracing are in 'AT_'.
 #
 # Having $REQ is needed to neutralize the macros which have been traced,
 # but are not wanted now.
@@ -727,10 +739,10 @@
 {
   my ($req, $output, %trace) = @_;
 
-  verb "formatting traces for `$output': " . join (', ', sort keys %trace);
+  verb "formatting traces for '$output': " . join (', ', sort keys %trace);
 
   # Processing the traces.
-  my $trace_m4 = new Autom4te::XFile ("> " . open_quote ("$tmp/traces.m4"));
+  my $trace_m4 = new Autom4te::XFile ("$tmp/traces.m4", ">");
 
   $_ = <<'EOF';
   divert(-1)
@@ -739,9 +751,9 @@
   # ----------------------------------
   # List the elements, separating then with SEPARATOR.
   # MODE can be:
-  #  `at'       -- the elements are enclosed in brackets.
-  #  `star'     -- the elements are listed as are.
-  #  `percent'  -- the elements are `flattened': spaces are singled out,
+  #  'at'       -- the elements are enclosed in brackets.
+  #  'star'     -- the elements are listed as are.
+  #  'percent'  -- the elements are 'flattened': spaces are singled out,
   #                and no new line remains.
   define([_at_at],
   [at_ifelse([$#], [1], [],
@@ -759,7 +771,7 @@
 	     [[$2][$1]$0([$1], at_shift(at_shift($@)))])])
 
   # FLATTEN quotes its result.
-  # Note that the second pattern is `newline, tab or space'.  Don't lose
+  # Note that the second pattern is 'newline, tab or space'.  Don't lose
   # the tab!
   define([at_flatten],
   [at_patsubst(at_patsubst([[[$1]]], [\\\n]), [[\n\t ]+], [ ])])
@@ -773,14 +785,14 @@
   s/^  //mg;s/\\t/\t/mg;s/\\n/\n/mg;
   print $trace_m4 $_;
 
-  # If you trace `define', then on `define([m4_exit], defn([m4exit])' you
+  # If you trace 'define', then on 'define([m4_exit], defn([m4exit])' you
   # will produce
   #
   #    AT_define([m4sugar.m4], [115], [1], [define], [m4_exit], <m4exit>)
   #
-  # Since `<m4exit>' is not quoted, the outer m4, when processing
-  # `trace.m4' will exit prematurely.  Hence, move all the builtins to
-  # the `at_' name space.
+  # Since '<m4exit>' is not quoted, the outer m4, when processing
+  # 'trace.m4' will exit prematurely.  Hence, move all the builtins to
+  # the 'at_' name space.
 
   print $trace_m4 "# Copy the builtins.\n";
   map { print $trace_m4 "define([at_$_], defn([$_]))\n" } @m4_builtin;
@@ -830,8 +842,8 @@
   # | AT_AC_SUBST([configure.ac], [3], [1], [AC_SUBST], [exec_prefix], [NONE])
   #
   # Pay attention that the file name might include colons, if under DOS
-  # for instance, so we don't use `[^:]+'.
-  my $traces = new Autom4te::XFile ("< " . open_quote ($tcache . $req->id));
+  # for instance, so we don't use '[^:]+'.
+  my $traces = new Autom4te::XFile ($tcache . $req->id, "<");
   while ($_ = $traces->getline)
     {
       # Trace with arguments, as the example above.  We don't try
@@ -847,7 +859,15 @@
   $trace_m4->close;
 
   my $in = new Autom4te::XFile ("$m4 " . shell_quote ("$tmp/traces.m4") . " |");
-  my $out = new Autom4te::XFile ("> " . open_quote ($output));
+  my $out = new Autom4te::XFile;
+  if ($output eq '-')
+    {
+      $out->open (">$output");
+    }
+  else
+    {
+      $out->open ($output, ">");
+    }
 
   # This is dubious: should we really transform the quadrigraphs in
   # traces?  It might break balanced [ ] etc. in the output.  The
@@ -871,7 +891,7 @@
 # up_to_date ($REQ)
 # -----------------
 # Are the cache files of $REQ up to date?
-# $REQ is `valid' if it corresponds to the request and exists, which
+# $REQ is 'valid' if it corresponds to the request and exists, which
 # does not mean it is up to date.  It is up to date if, in addition,
 # its files are younger than its dependencies.
 sub up_to_date ($)
@@ -892,39 +912,52 @@
 
   # The youngest of the cache files must be older than the oldest of
   # the dependencies.
+  # FIXME: These timestamps have only 1-second resolution.
+  # Time::HiRes fixes this, but assumes Perl 5.8 or later.
   my $tmtime = mtime ($tfile);
   my $omtime = mtime ($ofile);
   my ($file, $mtime) = ($tmtime < $omtime
 			? ($ofile, $omtime) : ($tfile, $tmtime));
 
-  # We depend at least upon the arguments.
-  my @dep = @ARGV;
-
   # stdin is always out of date.
-  if (grep { $_ eq '-' } @dep)
+  if (grep { $_ eq '-' } @ARGV)
     { return 0 }
 
+  # We depend at least upon the arguments.
+  foreach my $dep (@ARGV)
+    {
+      if ($mtime < mtime ($dep))
+	{
+	  verb "up_to_date ($file): outdated: $dep";
+	  return 0;
+	}
+    }
+
   # Files may include others.  We can use traces since we just checked
   # if they are available.
   handle_traces ($req, "$tmp/dependencies",
 		 ('include'    => '$1',
 		  'm4_include' => '$1'));
-  my $deps = new Autom4te::XFile ("< " . open_quote ("$tmp/dependencies"));
+  my $deps = new Autom4te::XFile ("$tmp/dependencies", "<");
   while ($_ = $deps->getline)
     {
       chomp;
-      my $file = find_file ("$_?", @include);
+      my $dep = find_file ("$_?", @include);
       # If a file which used to be included is no longer there, then
       # don't say it's missing (it might no longer be included).  But
       # of course, that causes the output to be outdated (as if the
-      # time stamp of that missing file was newer).
+      # timestamp of that missing file was newer).
       return 0
-	if ! $file;
-      push @dep, $file;
+	if ! $dep;
+      if ($mtime < mtime ($dep))
+	{
+	  verb "up_to_date ($file): outdated: $dep";
+	  return 0;
+	}
     }
 
-  # If $FILE is younger than one of its dependencies, it is outdated.
-  return up_to_date_p ($file, @dep);
+  verb "up_to_date ($file): up to date";
+  return 1;
 }
 
 
@@ -952,7 +985,7 @@
   fatal "freezing produced output:\n$result"
     if $result;
 
-  # If freezing produces output, something went wrong: a bad `divert',
+  # If freezing produces output, something went wrong: a bad 'divert',
   # or an improper paren etc.
   xsystem ("$m4"
 	   . ' --fatal-warning'
@@ -981,12 +1014,21 @@
     exit $exit_code;
   }
 
-# We need our cache directory.  Don't fail with parallel creation.
-if (! -d "$cache")
+# Ensure the cache directory exists.
+if (! mkdir ($cache, 0755))
   {
-    mkdir "$cache", 0755
-      or -d "$cache"
-      or fatal "cannot create $cache: $!";
+    # Snapshot $! immediately, the next few operations may clobber it.
+    my $eexist = $!{EEXIST};
+    my $errmsg = "$!";
+
+    # If mkdir failed with EEXIST, that means the *name* $cache
+    # already exists, but it might be the wrong kind of file.
+    if (! $eexist || ! -d $cache)
+      {
+        require Cwd;
+        my $cwd = Cwd::cwd();
+        fatal "cannot create $cache in $cwd: $errmsg";
+      }
   }
 
 # Open the index for update, and lock it.  autom4te handles several
@@ -1000,8 +1042,8 @@
 # If autom4te is younger, then some structures such as C4che might
 # have changed, which would corrupt its processing.
 Autom4te::C4che->load ($icache_file)
-  if -f $icache && mtime ($icache) > mtime ($0)
-                && Autom4te::C4che->good_version ($icache_file);
+  if (-f $icache && mtime ($icache) > mtime ($0)
+      && Autom4te::C4che->good_version ($icache_file, '2.71'));
 
 # Add the new trace requests.
 my $req = Autom4te::C4che->request ('input' => \@ARGV,
@@ -1037,7 +1079,9 @@
   # In particular, m4_warn guarantees that either $stackdump is empty, or
   # it consists of lines where only the last line ends in "top level".
   my ($cat, $loc, $msg, $stacktrace) = split ('::', $_, 4);
-  msg $cat, $loc, "warning: $msg",
+  # There might not have been a stacktrace.
+  $stacktrace = '' unless defined $stacktrace;
+  msg $cat, $loc, $msg,
     partial => ($stacktrace =~ /top level$/) + 0;
   for (split /\n/, $stacktrace)
     {
@@ -1051,7 +1095,7 @@
   {
     # Always produce traces, since even if the output is young enough,
     # there is no guarantee that the traces use the same *format*
-    # (e.g., `-t FOO:foo' and `-t FOO:bar' are both using the same M4
+    # (e.g., '-t FOO:foo' and '-t FOO:bar' are both using the same M4
     # traces, hence the M4 traces cache is usable, but its formatting
     # will yield different results).
     handle_traces ($req, $output, %trace);
@@ -1066,7 +1110,7 @@
 
 # If we ran up to here, the cache is valid.
 $req->valid (1);
-Autom4te::C4che->save ($icache_file);
+Autom4te::C4che->save ($icache_file, '2.71');
 
 exit $exit_code;
 
