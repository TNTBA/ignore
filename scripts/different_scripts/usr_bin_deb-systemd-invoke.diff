--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/usr/bin/deb-systemd-invoke	2018-11-21 18:15:24.000000000 -0500
+++ /media/mks/armbi_root/usr/bin/deb-systemd-invoke	2022-07-02 11:23:16.000000000 -0400
@@ -35,7 +35,7 @@
 
 =head1 SYNOPSIS
 
-B<deb-systemd-invoke> start|stop|restart S<I<unit file> ...>
+B<deb-systemd-invoke> [B<--user>] start|stop|restart S<I<unit file> ...>
 
 =head1 DESCRIPTION
 
@@ -51,13 +51,24 @@
 
 use strict;
 use warnings;
+use Getopt::Long; # in core since Perl 5
 
 if (@ARGV < 2) {
     print STDERR "Syntax: $0 <action> <unit file> [<unit file> ...]\n";
     exit 1;
 }
 
+my $is_system = 1;
+my @instances = ();
+my $result = GetOptions(
+    "user" => sub { $is_system = 0; },
+    "system" => sub { $is_system = 1; }, # default
+);
+
 my $policyhelper = '/usr/sbin/policy-rc.d';
+if (length $ENV{DPKG_ROOT}) {
+    $policyhelper = $ENV{DPKG_ROOT} . $policyhelper;
+}
 my @units = @ARGV;
 my $action = shift @units;
 if (-x $policyhelper) {
@@ -77,6 +88,23 @@
     }
 }
 
+if (!$is_system) {
+    # '--machine <ID>@' was added in v250 and v249.10, before that we can't talk to arbitrary user instances
+    my $systemctl_version = `systemctl --version --quiet | sed -n -r "s/systemd ([0-9]+) \\(.*/\\1/p"`;
+    chomp ($systemctl_version);
+    if (system('dpkg', '--compare-versions', $systemctl_version, 'ge', '249') != 0) {
+            print STDERR "systemctl version $systemctl_version does not support acting on user instance, skipping\n";
+            exit 0;
+    }
+
+    # Each user instance of the manager has a corresponding user@<id<.service unit.
+    # Get the full list of IDs, so that we can talk to each user instance to start/stop
+    # user units.
+    @instances = `systemctl --no-legend --quiet list-units 'user@*' | sed -n -r 's/.*user@([0-9]+).service.*/\\1/p'`;
+} else {
+    push @instances, 'system';
+}
+
 # If the job is disabled and is not currently running, the job is not started or restarted.
 # However, if the job is disabled but has been forced into the running state, we *do* stop
 # and restart it since this is expected behaviour for the admin who forced the start.
@@ -84,28 +112,48 @@
 if ($action eq "start" || $action eq "restart") {
     my $global_exit_code = 0;
     my @start_units = ();
-    for my $unit (@units) {
-        my $unit_installed = 0;
-        my $enabled_output = `/bin/systemctl is-enabled -- '$unit'`;
-        # matching enabled and enabled-runtime as an installed non static unit
-        if ($enabled_output =~ /enabled/) {
-            $unit_installed = 1;
+
+    for my $instance (@instances) {
+        my @instance_args = ();
+
+        if ($instance eq 'system') {
+            push @instance_args, '--system';
+        } else {
+            chomp ($instance);
+            push @instance_args, '--user', '--machine', "$instance@";
         }
-        system('/bin/systemctl', '--quiet', 'is-active', '--', $unit);
-        my $unit_active = $?>>8 == 0 ? 1 : 0;
-        if (!$unit_installed && $action eq "start") {
-            print STDERR "$unit is a disabled or a static unit, not starting it.\n";
-        } elsif (!$unit_installed && !$unit_active && $action eq "restart") {
-            print STDERR "$unit is a disabled or a static unit not running, not starting it.\n";
+
+        for my $unit (@units) {
+            my $unit_installed = 0;
+            my $enabled_output = `systemctl @instance_args is-enabled -- '$unit'`;
+            # matching enabled and enabled-runtime as an installed non static unit
+            if ($enabled_output =~ /enabled/) {
+                $unit_installed = 1;
+            }
+            system('systemctl', @instance_args, '--quiet', 'is-active', '--', $unit);
+            my $unit_active = $?>>8 == 0 ? 1 : 0;
+            if (!$unit_installed && $action eq "start") {
+                print STDERR "$unit is a disabled or a static unit, not starting it.\n";
+            } elsif (!$unit_installed && !$unit_active && $action eq "restart") {
+                print STDERR "$unit is a disabled or a static unit not running, not starting it.\n";
+            }
+            else {
+                push @start_units, $unit;
+            }
         }
-        else {
-            push @start_units, $unit;
+        if (@start_units) {
+            system('systemctl', '--quiet', @instance_args, $action, @start_units) == 0 or die("Could not execute systemctl: $!");
         }
     }
-    if (@start_units) {
-        exec('/bin/systemctl', $action, @start_units) or die("Could not execute systemctl: $!");
+    exit(0);
+} elsif ($action eq "stop" && !$is_system) {
+    my $global_exit_code = 0;
+
+    for my $instance (@instances) {
+        chomp ($instance);
+        system('systemctl', '--quiet', '--user', '--machine', "$instance@", $action, @units);
     }
     exit(0);
 } else {
-    exec '/bin/systemctl', @ARGV;
+    exec('systemctl', @ARGV);
 }
