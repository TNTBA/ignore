--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/usr/share/doc/python3-libgpiod/examples/gpiomon.py	2018-11-09 03:31:22.000000000 -0500
+++ /media/mks/armbi_root/usr/share/doc/python3-libgpiod/examples/gpiomon.py	2021-03-22 08:25:56.000000000 -0400
@@ -12,33 +12,36 @@
 import gpiod
 import sys
 
-def print_event(event):
-    if event.type == gpiod.LineEvent.RISING_EDGE:
-        print(' RISING EDGE', end='')
-    elif event.type == gpiod.LineEvent.FALLING_EDGE:
-        print('FALLING EDGE', end='')
-    else:
-        raise TypeError('Invalid event type')
-
-    print(' {}.{} line: {}'.format(event.sec, event.nsec, event.source.offset()))
-
-if len(sys.argv) < 3:
-    raise TypeError('usage: gpiomon.py <gpiochip> <offset1> <offset2> ...')
-
-with gpiod.Chip(sys.argv[1]) as chip:
-    offsets = []
-    for off in sys.argv[2:]:
-        offsets.append(int(off))
-
-    lines = chip.get_lines(offsets)
-    lines.request(consumer=sys.argv[0], type=gpiod.LINE_REQ_EV_BOTH_EDGES)
-
-    try:
-        while True:
-            ev_lines = lines.event_wait(sec=1)
-            if ev_lines:
-                for line in ev_lines:
-                    event = line.event_read()
-                    print_event(event)
-    except KeyboardInterrupt:
-        sys.exit(130)
+if __name__ == '__main__':
+    def print_event(event):
+        if event.type == gpiod.LineEvent.RISING_EDGE:
+            evstr = ' RISING EDGE'
+        elif event.type == gpiod.LineEvent.FALLING_EDGE:
+            evstr = 'FALLING EDGE'
+        else:
+            raise TypeError('Invalid event type')
+
+        print('event: {} offset: {} timestamp: [{}.{}]'.format(evstr,
+                                                               event.source.offset(),
+                                                               event.sec, event.nsec))
+
+    if len(sys.argv) < 3:
+        raise TypeError('usage: gpiomon.py <gpiochip> <offset1> <offset2> ...')
+
+    with gpiod.Chip(sys.argv[1]) as chip:
+        offsets = []
+        for off in sys.argv[2:]:
+            offsets.append(int(off))
+
+        lines = chip.get_lines(offsets)
+        lines.request(consumer=sys.argv[0], type=gpiod.LINE_REQ_EV_BOTH_EDGES)
+
+        try:
+            while True:
+                ev_lines = lines.event_wait(sec=1)
+                if ev_lines:
+                    for line in ev_lines:
+                        event = line.event_read()
+                        print_event(event)
+        except KeyboardInterrupt:
+            sys.exit(130)
