--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/var/lib/dpkg/info/libc6:arm64.preinst	2022-03-15 18:48:49.000000000 -0400
+++ /media/mks/armbi_root/var/lib/dpkg/info/libc6:arm64.preinst	2024-04-30 17:07:28.000000000 -0400
@@ -1,6 +1,5 @@
 #!/bin/sh
 set -e
-export LC_ALL=C
 
 type=$1
 preversion=$2
@@ -12,84 +11,21 @@
     test $verA -$2 $verB
 }
 
-# Sanity check.
-# If there are versions of glibc outside of the normal installation
-# location (/lib, /lib64, etc.) then things may break very badly
-# as soon as ld.so is replaced by a new version.  This check is not
-# foolproof, but it's pretty accurate.  This script ignores libraries
-# with different sonames, and libraries incompatible with the 
-# to-be-installed ld.so.
-check_dir () {
-    msg=$1
-    dir=$2
-
-    # Follow symlinks
-    dir=$(readlink -e $dir || true)
-
-    # Ignore inexistent directories
-    if ! test -d "$dir" ; then
-        return
-    fi
-  
-    # Detect possible candidates
-    files=$(ls $dir | egrep '^(ld|lib(d|c|m|pthread|rt|dl))-2.*.so' 2>/dev/null || true)
-    if test -z "$files" ; then
-        return
-    fi
-  
-    for file in $files ; do
-        lib=$dir/$file
-
-        # Skip if it is a symlink (as installed by lsb-core)
-        if test -L "$lib" ; then
-            continue
-        fi
-
-        # Skip if it is the currently dynamic loader
-        if test "$lib" = "$ldfile" ; then
-            continue
-        fi
-
-        # See if the found libraries are compatible with the system ld.so;
-        # if they aren't, they'll be ignored. Check e_ident, e_type (which
-        # will just be ET_DYN), and e_machine. If a match is found, there
-        # is a risk of breakage.
-        libbytes=`head -c 20 $lib | od -c`
-        if test "$ldbytes" != "$libbytes" ; then 
-          continue
-        fi
-
-        # Binaries owned packages are considered to do the right thing
-        # First try a quick lookup which should catch all cases on a 
-        # normal system
-        if echo $libcfiles | grep -q "[ ^]$lib[ $]" ; then 
-            continue
-        fi
-
-        # Slower lookup to confirm
-        if dpkg-query -S "$lib" >/dev/null 2>&1 ; then
-            continue
-        fi
-
-        # Output an error message and exit
-        echo
-        echo "A copy of the C library was found $msg:"
-        echo "  '$lib'"
-        echo "It is not safe to upgrade the C library in this situation;"
-        echo "please remove that copy of the C library or get it out of"
-        echo "'$dir' and try again."
-        echo
-        exit 1
-    done
-}
-
 if [ "$type" != abort-upgrade ]
 then
-    # Load debconf module if available
-    if [ -f /usr/share/debconf/confmodule ] ; then
+    # Load debconf module if available and usable
+    if [ -f /usr/share/debconf/confmodule ] && \
+       ( [ "$DEBCONF_USE_CDEBCONF" ] || perl -e "" 2>/dev/null ) ; then
         . /usr/share/debconf/confmodule
+        USE_DEBCONF=1
+    else
+        USE_DEBCONF=
     fi
 
+    # Only change LC_ALL after loading debconf to ensure the debconf templates
+    # are properly localized.
+    export LC_ALL=C
+
     # See if LD_LIBRARY_PATH contains the traditional /lib, but not the
     # multiarch path
     dirs=$(echo $LD_LIBRARY_PATH | sed 's/:/ /g')
@@ -121,7 +57,7 @@
     then
         # sanity checking for the appropriate kernel on each architecture.
         kernel_ver=`uname -r`
-        case ${DPKG_MAINTSCRIPT_ARCH:-$(dpkg --print-architecture)} in
+        case ${DPKG_MAINTSCRIPT_ARCH} in
             *)
                 # The GNU libc requires a >= 3.2 kernel, found in wheezy
                 kernel_ver_min=3.2
@@ -131,7 +67,7 @@
 
         if kernel_compare_versions "$kernel_ver" lt $kernel_ver_min
         then
-            if [ -f /usr/share/debconf/confmodule ]
+            if [ "$USE_DEBCONF" ]
             then
                 db_version 2.0
                 db_fset glibc/kernel-too-old seen false
@@ -142,8 +78,8 @@
                 db_stop
             else
                 echo "ERROR: This version of the GNU libc requires kernel version"
-                echo "$kernel_ver_rec or later.  Please upgrade your kernel before installing"
-                echo "glibc."
+                echo "$kernel_ver_rec or later.  Please upgrade your kernel and reboot before installing"
+                echo 'glibc. You may need to use "apt -f install" after reboot to solve dependencies.'
                 echo
             fi
             exit 1
@@ -151,7 +87,7 @@
 
         if kernel_compare_versions "$kernel_ver" lt $kernel_ver_rec
         then
-            if [ -f /usr/share/debconf/confmodule ]
+            if [ "$USE_DEBCONF" ]
             then
                 db_version 2.0
                 db_fset glibc/kernel-not-supported seen false
@@ -174,7 +110,7 @@
         kernel_ver_min=8.3
         if kernel_compare_versions "$kernel_ver" lt $kernel_ver_min
         then
-            if [ -f /usr/share/debconf/confmodule ]
+            if [ "$USE_DEBCONF" ]
             then
                 db_version 2.0
                 db_version 2.0
@@ -186,70 +122,53 @@
                 db_stop
             else
                 echo "ERROR: This version of the GNU libc requires kernel version"
-                echo "$kernel_ver_min or later.  Please upgrade your kernel before installing"
-                echo "glibc."
+                echo "$kernel_ver_min or later.  Please upgrade your kernel and reboot before installing"
+                echo 'glibc. You may need to use "apt -f install" after reboot to solve dependencies.'
                 echo
             fi
             exit 1
         fi
-    fi
-fi
 
-if [ "$type" = upgrade ]
-then
-    # Try to detect copies of the libc library in the various places
-    # the dynamic linker uses.
-    ldfile=$(readlink -m /lib/ld-linux-aarch64.so.1)
-    if test -f "$file"; then
-        ldbytes=$(head -c 20 /lib/ld-linux-aarch64.so.1 | od -c)
-    else
-        # If the symlink to the dynamic linker is dangling or missing, set
-        # ldbytes to an empty string, the test below will fail and all the
-        # libraries found will be ignored.
-        ldbytes=""
-    fi
-    libcfiles=$(dpkg-query -L ${DPKG_MAINTSCRIPT_PACKAGE}:${DPKG_MAINTSCRIPT_ARCH} 2>/dev/null)
-
-    dirs="/lib/aarch64-linux-gnu /lib /lib/tls /lib32 /lib64 /usr/local/lib /usr/local/lib32 /usr/local/lib64"
-    for dir in $dirs ; do
-        check_dir "in an unexpected directory" $dir
-    done
-
-    if test -n "$LD_LIBRARY_PATH"; then
-        dirs=$(echo $LD_LIBRARY_PATH | sed 's/:/ /g')
-        for dir in $dirs ; do
-            check_dir "via LD_LIBRARY_PATH" $dir
-        done
-    fi
-
-    if test -e /etc/ld.so.conf; then
-        dirs=$(echo $(cat /etc/ld.so.conf))
-        if test -n "$dirs" ; then
-            for dir in $dirs ; do
-                check_dir "via /etc/ld.so.conf" $dir
-            done
-        fi
-    fi
-
-    if [ -e /lib/tls/i686/cmov/libc.so.6 ] || [ -e /lib/i686/cmov/libc.so.6 ] ; then
-        status_i686=$(dpkg -s libc6-i686 2>/dev/null | grep ^Status: | sed -e 's/^Status: \(.*\) \(.*\) \(.*\)/\3/g')
-        status_xen=$(dpkg -s libc6-xen 2>/dev/null | grep ^Status: | sed -e 's/^Status: \(.*\) \(.*\) \(.*\)/\3/g')
-        if ([ -z "$status_i686" ] || [ "$status_i686" = "not-installed" ] || [ "$status_i686" = "config-files" ]) && \
-             ([ -z "$status_xen" ] || [ "$status_xen" = "not-installed" ] || [ "$status_xen" = "config-files" ]); then
-            echo
-            echo "A non-dpkg owned copy of the libc6-i686 package was found."
-            echo "It is not safe to upgrade the C library in this situation;"
-            echo "please remove that copy of the C library and try again."
-            echo
+    elif [ $system = "GNU" ]
+    then
+        kernel_ver=`uname -v | cut -d / -f 1 | cut -d ' ' -f 2`
+        kernel_ver_git=${kernel_ver#*+git}
+        kernel_ver_git=${kernel_ver_git%%-*}
+        kernel_ver=${kernel_ver%+git*}
+        kernel_ver_min=1.8
+        kernel_ver_git_min=20210923
+        if kernel_compare_versions "$kernel_ver" lt $kernel_ver_min || \
+         ( kernel_compare_versions "$kernel_ver" eq $kernel_ver_min && \
+            [ "$kernel_ver_git" -lt $kernel_ver_git_min ] )
+        then
+            if [ "$USE_DEBCONF" ]
+            then
+                db_version 2.0
+                db_fset glibc/kernel-too-old seen false
+                db_reset glibc/kernel-too-old
+                db_subst glibc/kernel-too-old kernel_ver $kernel_ver_min+git$kernel_ver_git_min
+                db_input critical glibc/kernel-too-old || true
+                db_go
+                db_stop
+            else
+                echo "ERROR: This version of the GNU libc requires kernel version"
+                echo "$kernel_ver_min+git$kernel_ver_git_min or later."
+                echo "Please upgrade your kernel and reboot before installing glibc."
+                echo 'You may need to use "apt -f install" after reboot to solve dependencies.'
+                echo
+            fi
             exit 1
         fi
     fi
+fi
 
-    if [ -n "$preversion" ] && [ -x "$(which ischroot)" ] && ! ischroot; then
+if [ "$type" = upgrade ]
+then
+    if [ -n "$preversion" ] && [ -x "$(command -v ischroot)" ] && ! ischroot; then
 	# NSS authentication trouble guard
-	if dpkg --compare-versions "$preversion" lt 2.28; then
-	    if pidof xscreensaver xlockmore >/dev/null; then
-		if [ -f /usr/share/debconf/confmodule ] ; then
+	if dpkg --compare-versions "$preversion" lt 2.36; then
+	    if grep -E -q '(^|/)(xscreensaver|xlockmore)' /proc/*/cmdline 2>/dev/null; then
+		if [ "$USE_DEBCONF" ] ; then
 		    db_version 2.0
 		    db_reset glibc/disable-screensaver
 		    db_input critical glibc/disable-screensaver || true
@@ -278,8 +197,12 @@
 	    check="kdm postgresql xdm"
 	    # NSS services check:
 	    	    echo -n "Checking for services that may need to be restarted..."
-	    # Only get the ones that are installed, and configured
-	    check=$(dpkg -s $check 2> /dev/null | egrep '^Package:|^Status:' | awk '{if ($1 ~ /^Package:/) { package=$2 } else if ($0 ~ /^Status: .* installed$/) { print package }}')
+	    # Only get the ones that are installed, of the same architecture
+	    # as libc (or arch all) and configured. Restart openssh-server even
+	    # if only half-configured to continue accepting new connections
+	    # during the upgrade.
+	    check=$(dpkg-query -W -f='${binary:Package} ${Status} ${Architecture}\n' $check 2> /dev/null | \
+			grep -E "(^openssh-server .* unpacked|installed) (all|${DPKG_MAINTSCRIPT_ARCH})$" | sed 's/[: ].*//')
 	    # some init scripts don't match the package names
 	    check=$(echo $check | \
 		    sed -e's/\bapache2.2-common\b/apache2/g' \
@@ -289,6 +212,7 @@
 			-e's/\blpr\b/lpd/g' \
 			-e's/\blpr-ppd\b/lpd-ppd/g' \
 			-e's/\bmysql-server\b/mysql/g' \
+			-e's/\bopenssh-server\b/ssh/g' \
 			-e's/\bsasl2-bin\b/saslauthd/g' \
 			-e's/\bsamba\b/smbd/g' \
 			-e's/\bpostgresql-common\b/postgresql/g' \
@@ -305,7 +229,7 @@
 	    done
 
 	    if [ -n "$services" ]; then 
-		if [ -f /usr/share/debconf/confmodule ] ; then
+		if [ "$USE_DEBCONF" ] ; then
 	            db_version 2.0
 		    db_reset glibc/upgrade
 		    db_subst glibc/upgrade services $services
@@ -352,23 +276,69 @@
 	            exit 1
 		fi
 	    fi
-	fi # end upgrading and $preversion lt 2.28
+
+            # As long systemd-logind has not seen any login request since the system has been
+            # booted, it has not loaded any NSS module. In that condition if glibc is upgraded
+            # (that means with a non session shell or by some automation), the NSS modules are
+            # replaced by a new major version which might be incompatible (and definitely are
+            # for some versions).
+            #
+            # The solution implemented for most daemons is to restart them, but unfortunately
+            # it is not something supported with systemd-logind (see bug#91950).
+            #
+            # As a workaround, when detected that the system is using systemd and that the
+            # systemd-logind process has not not loaded any NSS module, force systemd-logind to
+            # load NSS modules. This is done by disabling lingering on a non-existing user. This
+            # has to be done by talking directly to systemd-logind through sd-bus, as loginctl
+            # first checks if the user actually exist. The nonexistent uid is chosen as
+            # 4294967294, which is reserved by Policy §9.2.2.
+            #
+            # Note that starting with glibc 2.34, the nss_files is builtin. When glibc >= 2.34
+            # ends-up in a stable release, this workaround can therefore be dropped.
+            if dpkg --compare-versions "$preversion" lt 2.34 && [ -d /run/systemd/system ]; then
+                if ! grep -q -E 'libnss_(compat|db|files)' /proc/$(systemctl show --property MainPID --value systemd-logind.service)/maps >/dev/null 2>&1; then
+                    echo "Forcing systemd-logind to load NSS modules..."
+                    busctl call --system org.freedesktop.login1 /org/freedesktop/login1 org.freedesktop.login1.Manager \
+                        SetUserLinger ubb 4294967294 false false >/dev/null 2>&1 || true
+                fi
+            fi
+
+	fi # end upgrading and $preversion lt 2.36
     fi # Upgrading
 
     # This will keep us from using hwcap libs (optimized) during an
     # upgrade.
-    touch /etc/ld.so.nohwcap
+    touch "$DPKG_ROOT/etc/ld.so.nohwcap"
+fi
+
+# We create the top-level lib symlink on merged-usr systems, so that we can
+# cover cases where for example libc6:amd64 on i386 is installed and then removed
+# (which deletes the symlink too). Note that we only suppor the simplest case,
+# no conversion (moving files) is done here, as that's the job of the usrmerge
+# package. See: https://bugs.debian.org/926699
+# Once all packages install only under /usr, this can be removed, as removing
+# this package will no longer result in the symlink being deleted.
+if [ "$1" = "install" ] || [ "$1" = "upgrade" ]; then
+    if [ -L "$DPKG_ROOT/lib" ]; then
+        # Has the link already been created?
+        # If it has not, is a directory already there? Half-merged systems are
+        # the problem of usrmerge, simply ignore them here.
+        if [ ! -L "${DPKG_ROOT}/lib" ] && [ ! -d "${DPKG_ROOT}/lib" ]; then
+            mkdir -p "$DPKG_ROOT/usr/lib"
+            ln -s usr/lib "${DPKG_ROOT}/lib"
+        fi
+    fi
 fi
 
 
 
 if [ -n "$preversion" ]; then
-    if dpkg --compare-versions "$preversion" lt 2.28; then
+    if dpkg --compare-versions "$preversion" lt 2.36; then
        # unconditionally wipe ld.so.cache on major version upgrades; this
        # makes those upgrades a bit slower, but is less error-prone than
        # hoping we notice every time the cache format is changed upstream
-       rm -f /etc/ld.so.cache
-       rm -f /var/cache/ldconfig/aux-cache
+       rm -f "$DPKG_ROOT/etc/ld.so.cache"
+       rm -f "$DPKG_ROOT/var/cache/ldconfig/aux-cache"
     fi
 fi
 
