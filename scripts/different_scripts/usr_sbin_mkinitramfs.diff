--- /media/mks/5dcae443-0796-4029-ae6c-bf5bd2a37067/usr/sbin/mkinitramfs	2019-08-22 21:16:37.000000000 -0400
+++ /media/mks/armbi_root/usr/sbin/mkinitramfs	2022-07-12 17:51:34.000000000 -0400
@@ -20,6 +20,7 @@
 Options:
   -c compress	Override COMPRESS setting in initramfs.conf.
   -d confdir	Specify an alternative configuration directory.
+  -l level	Override COMPRESSLEVEL setting in initramfs.conf.
   -k		Keep temporary directory used to make the image.
   -o outfile	Write to outfile.
   -r root	Override ROOT setting in initramfs.conf.
@@ -35,7 +36,7 @@
 	exit 2
 }
 
-OPTIONS=$(getopt -o c:d:hko:r:v --long help -n "$0" -- "$@") || usage_error
+OPTIONS=$(getopt -o c:d:hl:ko:r:v --long help -n "$0" -- "$@") || usage_error
 
 eval set -- "$OPTIONS"
 
@@ -57,6 +58,10 @@
 		usage
 		exit 0
 		;;
+	-l)
+		compresslevel="$2"
+		shift 2
+		;;
 	-o)
 		outfile="$2"
 		shift 2
@@ -170,11 +175,45 @@
 unset COMPRESS
 
 if ! command -v "${compress}" >/dev/null 2>&1; then
+	echo "W: No ${compress} in ${PATH}, using gzip" >&2
 	compress=gzip
-	[ "${verbose}" = y ] && \
-		echo "No ${compress} in ${PATH}, using gzip"
 fi
 
+# Check that kernel supports selected compressor, and fall back to gzip.
+# Exit if even gzip is not supported.
+case "${compress}" in
+gzip)	kconfig_sym=CONFIG_RD_GZIP ;;
+bzip2)	kconfig_sym=CONFIG_RD_BZIP2 ;;
+lzma)	kconfig_sym=CONFIG_RD_LZMA ;;
+xz)	kconfig_sym=CONFIG_RD_XZ ;;
+lzop)	kconfig_sym=CONFIG_RD_LZO ;;
+lz4)	kconfig_sym=CONFIG_RD_LZ4 ;;
+zstd)	kconfig_sym=CONFIG_RD_ZSTD ;;
+esac
+while ! grep -q "^$kconfig_sym=y" "/boot/config-${version}"; do
+	if [ "${compress}" = gzip ]; then
+		echo "E: gzip compression ($kconfig_sym) not supported by kernel" >&2
+		exit 1
+	fi
+	echo "W: ${compress} compression ($kconfig_sym) not supported by kernel, using gzip" >&2
+	compress=gzip
+	kconfig_sym=CONFIG_RD_GZIP
+done
+
+if [ -z "${compresslevel:-}" ]; then
+	compresslevel=${COMPRESSLEVEL:-}
+fi
+case "${compress}" in
+lz4)	compresslevel="-${compresslevel:-9}" ;;
+zstd)	compresslevel="-${compresslevel:-9}" ;;
+#gzip|xz|bzip2|lzma|lzop included
+*)
+	# We're not using a compression level by default
+	compresslevel="${compresslevel:+-${compresslevel}}"
+	;;
+esac
+unset COMPRESSLEVEL
+
 case "${compress}" in
 gzip)	# If we're doing a reproducible build, use gzip -n
 	if [ -n "${SOURCE_DATE_EPOCH}" ]; then
@@ -183,11 +222,21 @@
 	elif command -v pigz >/dev/null; then
 		compress=pigz
 	fi
+	if [ -n "${compresslevel}" ]; then
+		compress="${compress} ${compresslevel}"
+	fi
+	;;
+lz4)	compress="lz4 ${compresslevel} -l" ;;
+zstd)	compress="zstd -q ${compresslevel}"
+	# If we're not doing a reproducible build, enable multithreading
+	test -z "${SOURCE_DATE_EPOCH}" && compress="$compress -T0"
+	;;
+xz)	compress="xz ${compresslevel} --check=crc32"
+	# If we're not doing a reproducible build, enable multithreading
+	test -z "${SOURCE_DATE_EPOCH}" && compress="$compress --threads=0"
 	;;
-lz4)	compress="lz4 -9 -l" ;;
-xz)	compress="xz --check=crc32" ;;
 bzip2|lzma|lzop)
-	# no parameters needed
+	compress="${compress} ${compresslevel}"
 	;;
 *)	echo "W: Unknown compression command ${compress}" >&2 ;;
 esac
@@ -210,12 +259,16 @@
 # Prepare to clean up temporary files on exit
 DESTDIR=
 __TMPCPIOGZ=
+__TMPMAINCPIO=
 __TMPEARLYCPIO=
 clean_on_exit() {
 	if [ "${keep}" = "y" ]; then
-		echo "Working files in ${DESTDIR:-<not yet created>}, early initramfs in ${__TMPEARLYCPIO:-<not yet created>} and overlay in ${__TMPCPIOGZ:-<not yet created>}"
+		echo "Working files in ${DESTDIR:-<not yet created>}," \
+			"early initramfs in ${__TMPEARLYCPIO:-<not yet created>}," \
+			"main initramfs in ${__TMPMAINCPIO:-<not yet created>} and" \
+			"overlay in ${__TMPCPIOGZ:-<not yet created>}"
 	else
-		for path in "${DESTDIR}" "${__TMPCPIOGZ}" "${__TMPEARLYCPIO}"; do
+		for path in "${DESTDIR}" "${__TMPCPIOGZ}" "${__TMPMAINCPIO}" "${__TMPEARLYCPIO}"; do
 			test -z "${path}" || rm -rf "${path}"
 		done
 	fi
@@ -228,6 +281,7 @@
 DESTDIR="$(mktemp -d "${TMPDIR:-/var/tmp}/mkinitramfs_XXXXXX")" || exit 1
 chmod 755 "${DESTDIR}"
 __TMPCPIOGZ="$(mktemp "${TMPDIR:-/var/tmp}/mkinitramfs-OL_XXXXXX")" || exit 1
+__TMPMAINCPIO="$(mktemp "${TMPDIR:-/var/tmp}/mkinitramfs-MAIN_XXXXXX")" || exit 1
 __TMPEARLYCPIO="$(mktemp "${TMPDIR:-/var/tmp}/mkinitramfs-FW_XXXXXX")" || exit 1
 
 DPKG_ARCH=$(dpkg --print-architecture)
@@ -244,6 +298,7 @@
 export MODULES
 export BUSYBOX
 export RESUME
+export FSTYPE
 
 # Private, used by 'catenate_cpiogz'.
 export __TMPCPIOGZ
@@ -261,8 +316,10 @@
 	mkdir -p "${DESTDIR}/${d}"
 done
 
-# Copy in modules.builtin and modules.order (not generated by depmod)
-for x in modules.builtin modules.order; do
+# Copy in modules.builtin, modules.builtin.modinfo and modules.order (not generated by depmod)
+# and modules.builtin.bin (generated by depmod, but too late to avoid
+# error messages as in #948257)
+for x in modules.builtin modules.builtin.bin modules.builtin.modinfo modules.order; do
 	if [ -f "${MODULESDIR}/${x}" ]; then
 		cp -p "${MODULESDIR}/${x}" "${DESTDIR}${MODULESDIR}/${x}"
 	fi
@@ -300,6 +357,9 @@
 # Resolve hidden dependencies
 hidden_dep_add_modules
 
+# Add firmware for built-in code
+add_builtin_firmware
+
 # First file executed by linux
 cp -p /usr/share/initramfs-tools/init "${DESTDIR}/init"
 
@@ -349,29 +409,38 @@
 	fi
 done
 
-# workaround: libgcc always needed on old-abi arm
-if [ "$DPKG_ARCH" = arm ] || [ "$DPKG_ARCH" = armeb ]; then
-	cp -a /lib/libgcc_s.so.1 "${DESTDIR}/lib/"
-fi
-
 run_scripts /usr/share/initramfs-tools/hooks
 run_scripts "${CONFDIR}"/hooks
 
-# Avoid double sleep when using older udev scripts
-# shellcheck disable=SC2016
-sed -i 's/^\s*sleep \$ROOTDELAY$/:/' "${DESTDIR}/scripts/init-top/udev"
-
 # cache boot run order
 for b in $(cd "${DESTDIR}/scripts" && find . -mindepth 1 -type d); do
 	cache_run_scripts "${DESTDIR}" "/scripts/${b#./}"
 done
 
+# decompress modules for boot speed, if possible
+find "${DESTDIR}/${MODULESDIR}" -name '*.ko.*' | while read -r ko; do
+	case "$ko" in
+	*.xz)
+		if ! command -v xz >/dev/null 2>&1; then
+			break
+		fi
+		xz -d "${ko}"
+		;;
+	*.zst)
+		if ! command -v zstd >/dev/null 2>&1; then
+			break
+		fi
+		zstd -q -d --rm "${ko}"
+		;;
+	esac
+done
+
 # generate module deps
 depmod -a -b "${DESTDIR}" "${version}"
 rm -f "${DESTDIR}/lib/modules/${version}"/modules.*map
 
 # make sure that library search path is up to date
-cp -ar /etc/ld.so.conf* "$DESTDIR"/etc/
+cp -pPr /etc/ld.so.conf* "$DESTDIR"/etc/
 if ! ldconfig -r "$DESTDIR" ; then
 	[ "$(id -u)" != "0" ] \
 	&& echo "ldconfig might need uid=0 (root) for chroot()" >&2
@@ -388,32 +457,8 @@
 	copy_file DSDT "${CONFDIR}/DSDT.aml"
 fi
 
-# Make sure there is a final sh in initramfs
-if [ ! -e "${DESTDIR}/bin/sh" ]; then
-	copy_exec /bin/sh "${DESTDIR}/bin/"
-fi
-
-# dirty hack for armhf's double-linker situation; if we have one of
-# the two known eglibc linkers, nuke both and re-create sanity
-if [ "$DPKG_ARCH" = armhf ]; then
-	if [ -e "${DESTDIR}/lib/arm-linux-gnueabihf/ld-linux.so.3" ] || \
-	   [ -e "${DESTDIR}/lib/ld-linux-armhf.so.3" ]; then
-		rm -f "${DESTDIR}/lib/arm-linux-gnueabihf/ld-linux.so.3"
-		rm -f "${DESTDIR}/lib/ld-linux-armhf.so.3"
-		cp -aL /lib/ld-linux-armhf.so.3 "${DESTDIR}/lib/"
-		ln -sf /lib/ld-linux-armhf.so.3 "${DESTDIR}/lib/arm-linux-gnueabihf/ld-linux.so.3"
-	fi
-fi
-
 [ "${verbose}" = y ] && echo "Building cpio ${outfile} initramfs"
 
-if [ -s "${__TMPEARLYCPIO}" ]; then
-	cat "${__TMPEARLYCPIO}" >"${outfile}" || exit 1
-else
-	# truncate
-	true > "${outfile}"
-fi
-
 (
 # preserve permissions if root builds the image, see #633582
 [ "$(id -ru)" != 0 ] && cpio_owner_root="-R 0:0"
@@ -429,10 +474,9 @@
 fi
 
 # work around lack of "set -o pipefail" for the following pipe:
-# cd "${DESTDIR}" && find . | LC_ALL=C sort | cpio --quiet $cpio_owner_root $cpio_reproducible -o -H newc | gzip >>"${outfile}" || exit 1
+# cd "${DESTDIR}" && find . | LC_ALL=C sort | cpio --quiet $cpio_owner_root $cpio_reproducible -o -H newc >>"${outfile}" || exit 1
 ec1=1
 ec2=1
-ec3=1
 exec 3>&1
 eval "$(
 	# http://cfaj.freeshell.org/shell/cus-faq-2.html
@@ -444,26 +488,31 @@
 		LC_ALL=C sort
 	} | {
 		# shellcheck disable=SC2086
-		cpio --quiet $cpio_owner_root $cpio_reproducible -o -H newc 4>&-; echo "ec2=$?;" >&4
-	} | ${compress} >>"${outfile}"
-	echo "ec3=$?;" >&4
+		cpio --quiet $cpio_owner_root $cpio_reproducible -o -H newc 4>&- >"${__TMPMAINCPIO}"
+		echo "ec2=$?;" >&4
+	}
 )"
 if [ "$ec1" -ne 0 ]; then
-	echo "E: mkinitramfs failure find $ec1 cpio $ec2 $compress $ec3" >&2
+	echo "E: mkinitramfs failure find $ec1 cpio $ec2" >&2
 	exit "$ec1"
 fi
 if [ "$ec2" -ne 0 ]; then
-	echo "E: mkinitramfs failure cpio $ec2 $compress $ec3" >&2
+	echo "E: mkinitramfs failure cpio $ec2" >&2
 	exit "$ec2"
 fi
-if [ "$ec3" -ne 0 ]; then
-	echo "E: mkinitramfs failure $compress $ec3" >&2
-	exit "$ec3"
-fi
 ) || exit 1
 
+{
+if [ -s "${__TMPEARLYCPIO}" ]; then
+	cat "${__TMPEARLYCPIO}" || exit 1
+fi
+
+$compress -c "${__TMPMAINCPIO}" ||
+	{ echo "E: mkinitramfs failure $compress $?" >&2; exit 1; }
+
 if [ -s "${__TMPCPIOGZ}" ]; then
-	cat "${__TMPCPIOGZ}" >>"${outfile}" || exit 1
+	cat "${__TMPCPIOGZ}" || exit 1
 fi
+} >"${outfile}" || exit 1
 
 exit 0
